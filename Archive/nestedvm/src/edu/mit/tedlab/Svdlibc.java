/* This file was generated from svd by Mips2Java on Tue May 12 02:26:29 CEST 2009 */
package edu.mit.tedlab;

public final class Svdlibc extends org.ibex.nestedvm.UnixRuntime {
    /* program counter */
    private int pc = 0;

    /* General Purpose registers */
    private final static int r0 = 0;
    private int      r1,  r2,  r3,  r4,  r5,  r6,  r7,
                r8,  r9,  r10, r11, r12, r13, r14, r15,
                r16, r17, r18, r19, r20, r21, r22, r23,
                r24, r25, r26, r27, r28, r29, r30, r31,
                hi = 0, lo = 0;
    /* FP registers */
    private int f0,  f1,  f2,  f3,  f4,  f5,  f6,  f7,
                f8,  f9,  f10, f11, f12, f13, f14, f15,
                f16, f17, f18, f19, f20, f21, f22, f23,
                f24, f25, f26, f27, f28, f29, f30, f31;
    /* FP Control Register */
    private int fcsr = 0;

    private final void run_10000() throws ExecutionException { /* 0x10000 - 0x10200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10010;
                        pc=0x10010;
                        continue;
                    }
                case 0x10010:
                    /* Next insn is delay slot */ 
                    r31=0x10018;
                    pc=0x100fc;
                    continue;
                case 0x10018:
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10020;
                        pc=0x10020;
                        continue;
                    }
                case 0x10020:
                    /* Next insn is delay slot */ 
                    r31=0x10028;
                    pc=0x1d6b4;
                    run_1d600(); return;
                case 0x10028:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10038:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r0 >= 0) {
                        /* Next insn is delay slot */ 
                        r31=0x10048;
                        pc=0x10048;
                        continue;
                    }
                case 0x10048:
                    /* Next insn is delay slot */ 
                    r31=0x10050;
                    pc=0x10060;
                    continue;
                case 0x10050:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x10060:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = 5 << 16;
                    addr=r17+-19064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                        pc=0x100e8;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = 5 << 16;
                    r2 = readPages[(r16+-22284)>>>12][((r16+-22284)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = 0 << 16;
                        pc=0x100c8;
                        continue;
                    }
                    r2 = 0 << 16;
                    r2 = readPages[(r16+-22284)>>>12][((r16+-22284)>>>2)&0x3ff];
                    r2 = r2 + 4;
                case 0x100a4:
                    /* Next insn is delay slot */ 
                    writePages[(r16+-22284)>>>12][((r16+-22284)>>>2)&0x3ff] = r2;
                    pc=r3;
                    r31=0x100ac;
                    return;
                case 0x100ac:
                    r2 = readPages[(r16+-22284)>>>12][((r16+-22284)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 4;
                        pc=0x100a4;
                        continue;
                    }
                    r2 = r2 + 4;
                    r2 = 0 << 16;
                case 0x100c8:
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x100e4;
                        continue;
                    }
                    r2 = r0 + 1;
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -22296;
                    r31=0x100e0;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x100e0:
                    r2 = r0 + 1;
                case 0x100e4:
                    addr=r17+-19064;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x100e8:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x100fc:
                    r2 = 0 << 16;
                    r29 = r29 + -24;
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r2 = r2 + 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r4 = r4 + -22296;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + -19056;
                        pc=0x10128;
                        continue;
                    }
                    r5 = r5 + -19056;
                    /* Next insn is delay slot */ 
                    r31=0x10128;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10128:
                    r2 = 5 << 16;
                    r3 = readPages[(r2+-22292)>>>12][((r2+-22292)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r2 + -22292;
                        pc=0x10154;
                        continue;
                    }
                    r4 = r2 + -22292;
                    r2 = 0 << 16;
                    r2 = r2 + 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10154;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x10154;
                    pc=0x0;
                    throw new ExecutionException("Branch to addr 0x0");
                case 0x10154:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x10164:
                    r29 = r29 + -8;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    f0 = r0;
                    r29 = r30 + r0;
                    r30 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x10184:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x101d4;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                case 0x101d4:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x101e8:
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                case 0x10200:
                    pc=0x10200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10200() throws ExecutionException { /* 0x10200 - 0x10400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10200:
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r2 = r30 + 36;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r6 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10230;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x10230:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x10244:
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r2 = r30 + 36;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r28 + -32768;
                    /* Next insn is delay slot */ 
                    r31=0x10288;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x10288:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r6 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x102a8;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x102a8:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r28 + -32760;
                    /* Next insn is delay slot */ 
                    r31=0x102c4;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x102c4:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 1;
                    r31=0x102cc;
                    pc=0x20200;
                    run_20200(); return;
                case 0x102cc:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    r4 = 5 << 16;
                    r4 = r4 + -32768;
                    r5 = 5 << 16;
                    r5 = readPages[(r5+-20192)>>>12][((r5+-20192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x102f8;
                    pc=0x101e8;
                    run_10000(); return;
                case 0x102f8:
                    r4 = 5 << 16;
                    r4 = r4 + -32688;
                    r5 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1030c;
                    pc=0x101e8;
                    run_10000(); return;
                case 0x1030c:
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -32652;
                    r31=0x10318;
                    pc=0x101e8;
                    run_10000(); return;
                case 0x10318:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 1;
                    r31=0x10320;
                    pc=0x20200;
                    run_20200(); return;
                case 0x10320:
                    r29 = r29 + -248;
                    writePages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff] = r31;
                    writePages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+248)>>>12][((r30+248)>>>2)&0x3ff] = r4;
                    writePages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff] = r5;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                    addr=r30+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + 1;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = r0 + 3;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r0;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r0;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r0;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-31776)>>>12][((r2+-31776)>>>2)&0x3ff];
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-31772)>>>12][((r2+-31772)>>>2)&0x3ff];
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-31768)>>>12][((r2+-31768)>>>2)&0x3ff];
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-31764)>>>12][((r2+-31764)>>>2)&0x3ff];
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r28+-32704)>>>12][((r28+-32704)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32700)>>>12][((r28+-32700)>>>2)&0x3ff];
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                case 0x103b8:
                    r4 = readPages[(r30+248)>>>12][((r30+248)>>>2)&0x3ff];
                    r5 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -31760;
                    r31=0x103cc;
                    pc=0x23400;
                    run_23400(); return;
                case 0x103cc:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x103e8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x10978;
                    run_10800(); return;
                case 0x103e8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + -97;
                    writePages[(r30+232)>>>12][((r30+232)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+232)>>>12][((r30+232)>>>2)&0x3ff];
                case 0x10400:
                    pc=0x10400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10400() throws ExecutionException { /* 0x10400 - 0x10600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10400:
                    r2 = (r3&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1095c;
                        run_10800(); return;
                    }
                    r2 = readPages[(r30+232)>>>12][((r30+232)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -31252;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x10434:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32756;
                    /* Next insn is delay slot */ 
                    r31=0x10448;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x10448:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10458;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r0;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10458:
                    r4 = 5 << 16;
                    r4 = r4 + -31736;
                    r5 = 5 << 16;
                    r5 = readPages[(r5+-19192)>>>12][((r5+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10470;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10470:
                    /* Next insn is delay slot */ 
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10478:
                    r2 = readPages[(r30+248)>>>12][((r30+248)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19592)>>>12][((r2+-19592)>>>2)&0x3ff];
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x104ac;
                        continue;
                    }
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x104ac;
                    pc=0x102cc;
                    run_10200(); return;
                case 0x104ac:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x104f8;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19592)>>>12][((r2+-19592)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = 5 << 16;
                    r4 = r4 + -31712;
                    r5 = 5 << 16;
                    r5 = readPages[(r5+-19192)>>>12][((r5+-19192)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x104f8;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x104f8:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x105ec;
                        continue;
                    }
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x105ec;
                        continue;
                    }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x105ec;
                        continue;
                    }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x105ec;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10554;
                    pc=0x136f8;
                    run_13600(); return;
                case 0x10554:
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10574;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31688;
                    r31=0x10574;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10574:
                    addr=r30+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x105b4;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x105a4;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31656;
                    r31=0x105a4;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x105a4:
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x105b0;
                    pc=0x11a2c;
                    run_11a00(); return;
                case 0x105b0:
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                case 0x105b4:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19592)>>>12][((r2+-19592)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x105e4;
                    pc=0x13960;
                    run_13800(); return;
                case 0x105e4:
                    /* Next insn is delay slot */ 
                    pc=0x10690;
                    run_10600(); return;
                case 0x105ec:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10600;
                    pc=0x1382c;
                    run_13800(); return;
                case 0x10600:
                    pc=0x10600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10600() throws ExecutionException { /* 0x10600 - 0x10800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10600:
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10620;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31624;
                    r31=0x10620;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10620:
                    addr=r30+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10660;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10650;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31656;
                    r31=0x10650;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x10650:
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1065c;
                    pc=0x118f0;
                    run_11800(); return;
                case 0x1065c:
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                case 0x10660:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19592)>>>12][((r2+-19592)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10690;
                    pc=0x13ae0;
                    run_13a00(); return;
                case 0x10690:
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    r31=0x10698;
                    pc=0x20200;
                    run_20200(); return;
                case 0x10698:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x106a8;
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x106a8:
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x103b8;
                        run_10200(); return;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31596;
                    r31=0x106c8;
                    pc=0x10244;
                    run_10200(); return;
                case 0x106c8:
                    /* Next insn is delay slot */ 
                    pc=0x103b8;
                    run_10200(); return;
                case 0x106d0:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x106e0;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x106e0:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10704:
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10718;
                    pc=0x102cc;
                    run_10200(); return;
                case 0x10718:
                    /* Next insn is delay slot */ 
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10720:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10730;
                    pc=0x1f800;
                    run_1f800(); return;
                case 0x10730:
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x1073c:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1074c;
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x1074c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10754:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19192)>>>12][((r2+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10768:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32748;
                    /* Next insn is delay slot */ 
                    r31=0x1077c;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x1077c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1078c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x1078c:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32744;
                    /* Next insn is delay slot */ 
                    r31=0x107a0;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x107a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107b4;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x107b4:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32740;
                    /* Next insn is delay slot */ 
                    r31=0x107c8;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x107c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x107dc;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x107dc:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32736;
                    /* Next insn is delay slot */ 
                    r31=0x107f0;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x107f0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10804;
                        run_10800(); return;
                    }
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10800:
                    pc=0x10800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10800() throws ExecutionException { /* 0x10800 - 0x10a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10800:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                case 0x10804:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32732;
                    /* Next insn is delay slot */ 
                    r31=0x10818;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x10818:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1082c;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x1082c:
                    r4 = 5 << 16;
                    r4 = r4 + -31564;
                    r5 = 5 << 16;
                    r5 = readPages[(r5+-19192)>>>12][((r5+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10844;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10844:
                    /* Next insn is delay slot */ 
                    pc=0x103b8;
                    run_10200(); return;
                case 0x1084c:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    addr=r30+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10858:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10868;
                    pc=0x1fa00;
                    run_1fa00(); return;
                case 0x10868:
                    r1 = 5 << 16;
                    writePages[(r1+-20188)>>>12][((r1+-20188)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10878:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32748;
                    /* Next insn is delay slot */ 
                    r31=0x1088c;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x1088c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1089c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x1089c:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32744;
                    /* Next insn is delay slot */ 
                    r31=0x108b0;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x108b0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x108c4;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x108c4:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32740;
                    /* Next insn is delay slot */ 
                    r31=0x108d8;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x108d8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x108ec;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x108ec:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32736;
                    /* Next insn is delay slot */ 
                    r31=0x10900;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x10900:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10914;
                        continue;
                    }
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10914:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19192)>>>12][((r4+-19192)>>>2)&0x3ff];
                    r5 = r28 + -32732;
                    /* Next insn is delay slot */ 
                    r31=0x10928;
                    pc=0x26e00;
                    run_26e00(); return;
                case 0x10928:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1093c;
                        continue;
                    }
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    pc=0x103b8;
                    run_10200(); return;
                case 0x1093c:
                    r4 = 5 << 16;
                    r4 = r4 + -31564;
                    r5 = 5 << 16;
                    r5 = readPages[(r5+-19192)>>>12][((r5+-19192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10954;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10954:
                    /* Next insn is delay slot */ 
                    pc=0x103b8;
                    run_10200(); return;
                case 0x1095c:
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10970;
                    pc=0x102cc;
                    run_10200(); return;
                case 0x10970:
                    /* Next insn is delay slot */ 
                    pc=0x103b8;
                    run_10200(); return;
                case 0x10978:
                    r2 = readPages[(r30+248)>>>12][((r30+248)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19592)>>>12][((r2+-19592)>>>2)&0x3ff];
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x109ac;
                        continue;
                    }
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x109ac;
                    pc=0x102cc;
                    run_10200(); return;
                case 0x109ac:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x109cc;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31544;
                    r31=0x109cc;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x109cc:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19592)>>>12][((r2+-19592)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+252)>>>12][((r30+252)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x109f8;
                    pc=0x136f8;
                    run_13600(); return;
                case 0x109f8:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                case 0x10a00:
                    pc=0x10a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10a00() throws ExecutionException { /* 0x10a00 - 0x10c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10a00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10a18;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31520;
                    r31=0x10a18;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10a18:
                    addr=r30+36;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10a70;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10a48;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31656;
                    r31=0x10a48;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x10a48:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10a60;
                    pc=0x11a2c;
                    run_11a00(); return;
                case 0x10a60:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10a70;
                    pc=0x111d4;
                    run_11000(); return;
                case 0x10a70:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10a9c;
                        continue;
                    }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10a98;
                    pc=0x10184;
                    run_10000(); return;
                case 0x10a98:
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                case 0x10a9c:
                    /* Next insn is delay slot */ 
                    r31=0x10aa4;
                    pc=0x10164;
                    run_10000(); return;
                case 0x10aa4:
                    { long l = Double.doubleToLongBits((float)(Float.intBitsToFloat(f0))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10ad0;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31428;
                    r31=0x10ad0;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x10ad0:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b34;
                        continue;
                    }
                    r2 = r30 + 64;
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r6 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r2 + r0;
                    r31=0x10b0c;
                    pc=0x16e74;
                    run_16e00(); return;
                case 0x10b0c:
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10b40;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31404;
                    r31=0x10b2c;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10b2c:
                    /* Next insn is delay slot */ 
                    pc=0x10b40;
                    continue;
                case 0x10b34:
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31384;
                    r31=0x10b40;
                    pc=0x10244;
                    run_10200(); return;
                case 0x10b40:
                    /* Next insn is delay slot */ 
                    r31=0x10b48;
                    pc=0x10164;
                    run_10000(); return;
                case 0x10b48:
                    { long l = Double.doubleToLongBits((float)(Float.intBitsToFloat(f0))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10c14;
                        run_10c00(); return;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -31364;
                    r6 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r7 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10b90;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x10b90:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = 5 << 16;
                    r3 = readPages[(r3+-19128)>>>12][((r3+-19128)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = r3 >> 31;
                    r2 = r2 >>> 31;
                    r2 = r3 + r2;
                    r3 = r2 >> 1;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = 5 << 16;
                    r4 = r4 + -31324;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x10bdc;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x10bdc:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = 5 << 16;
                    r3 = readPages[(r3+-19128)>>>12][((r3+-19128)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = r3 >> 31;
                    r2 = r2 >>> 31;
                    r2 = r3 + r2;
                case 0x10c00:
                    pc=0x10c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10c00() throws ExecutionException { /* 0x10c00 - 0x10e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10c00:
                    r2 = r2 >> 1;
                    r4 = 5 << 16;
                    r4 = r4 + -31288;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x10c14;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x10c14:
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10cc0;
                        continue;
                    }
                    r2 = r30 + 104;
                    r4 = r2 + r0;
                    r5 = r28 + -32728;
                    r6 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10c3c;
                    pc=0x26400;
                    run_26400(); return;
                case 0x10c3c:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r30 + 104;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r3 + r0;
                    r6 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10c58;
                    pc=0x13ae0;
                    run_13a00(); return;
                case 0x10c58:
                    r2 = r30 + 104;
                    r4 = r2 + r0;
                    r5 = r28 + -32720;
                    r6 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10c70;
                    pc=0x26400;
                    run_26400(); return;
                case 0x10c70:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r6 = r30 + 104;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x10c8c;
                    pc=0x11dcc;
                    run_11c00(); return;
                case 0x10c8c:
                    r2 = r30 + 104;
                    r4 = r2 + r0;
                    r5 = r28 + -32712;
                    r6 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10ca4;
                    pc=0x26400;
                    run_26400(); return;
                case 0x10ca4:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r30 + 104;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r3 + r0;
                    r6 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10cc0;
                    pc=0x13ae0;
                    run_13a00(); return;
                case 0x10cc0:
                    r2 = r0 + r0;
                    r29 = r30 + r0;
                    r31 = readPages[(r29+244)>>>12][((r29+244)>>>2)&0x3ff];
                    r30 = readPages[(r29+240)>>>12][((r29+240)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 248;
                    pc=r31;
                    return;
                case 0x10cd8:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x10ce8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d00;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x10d2c;
                    continue;
                case 0x10d00:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = r28 + -31624;
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x10ce8;
                    continue;
                case 0x10d2c:
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x10d3c:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r30;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r4 = r0 + 12;
                    r31=0x10d60;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x10d60:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10d88;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31160;
                    r31=0x10d80;
                    pc=0x25200;
                    run_25200(); return;
                case 0x10d80:
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    pc=0x10f54;
                    run_10e00(); return;
                case 0x10d88:
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x10dc0;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x10dc0:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e04;
                        run_10e00(); return;
                    }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10dfc;
                        continue;
                    }
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10df8;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x10df8:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x10dfc:
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    pc=0x10f54;
                    run_10e00(); return;
                case 0x10e00:
                    pc=0x10e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_10e00() throws ExecutionException { /* 0x10e00 - 0x11000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x10e00:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x10e04:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r16 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 8;
                    r31=0x10e30;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x10e30:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10eb4;
                        continue;
                    }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10e8c;
                        continue;
                    }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10e80;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x10e80:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                case 0x10e8c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10eac;
                        continue;
                    }
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10ea8;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x10ea8:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x10eac:
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    pc=0x10f54;
                    continue;
                case 0x10eb4:
                    r2 = r0 + 1;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                case 0x10ebc:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10edc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x10f48;
                    continue;
                case 0x10edc:
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + -4;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x10ebc;
                    continue;
                case 0x10f48:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x10f54:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r30 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x10f70:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10f9c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11030;
                    run_11000(); return;
                case 0x10f9c:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x10fec;
                        continue;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x10fd8;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x10fd8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                case 0x10fec:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11024;
                        run_11000(); return;
                    }
                case 0x11000:
                    pc=0x11000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11000() throws ExecutionException { /* 0x11000 - 0x11200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11000:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11018;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x11018:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                case 0x11024:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11030;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x11030:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x11044:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r30;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r6;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    r31=0x11070;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x11070:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11098;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31148;
                    r31=0x11090;
                    pc=0x25200;
                    run_25200(); return;
                case 0x11090:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    pc=0x111b8;
                    continue;
                case 0x11098:
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r2 + r0;
                    r5 = r0 + 1;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -31136;
                    r31=0x110ec;
                    pc=0x13d00;
                    run_13c00(); return;
                case 0x110ec:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1111c;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11114;
                    pc=0x111d4;
                    continue;
                case 0x11114:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    pc=0x111b8;
                    continue;
                case 0x1111c:
                    r16 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -31116;
                    r31=0x11134;
                    pc=0x13d00;
                    run_13c00(); return;
                case 0x11134:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11164;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1115c;
                    pc=0x111d4;
                    continue;
                case 0x1115c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    pc=0x111b8;
                    continue;
                case 0x11164:
                    r16 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -31096;
                    r31=0x1117c;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x1117c:
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x111ac;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x111a4;
                    pc=0x111d4;
                    continue;
                case 0x111a4:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    pc=0x111b8;
                    continue;
                case 0x111ac:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x111b8:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r30 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x111d4:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11200;
                        run_11200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x112b4;
                    run_11200(); return;
                case 0x11200:
                    pc=0x11200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11200() throws ExecutionException { /* 0x11200 - 0x11400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11200:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11238;
                        continue;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1122c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x1122c:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                case 0x11238:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11270;
                        continue;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11264;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x11264:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r0;
                case 0x11270:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x112a8;
                        continue;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1129c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x1129c:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r0;
                case 0x112a8:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x112b4;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x112b4:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x112c8:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    r4 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 16;
                    r31=0x112e4;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x112e4:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1130c;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31076;
                    r31=0x11304;
                    pc=0x25200;
                    run_25200(); return;
                case 0x11304:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    pc=0x11318;
                    continue;
                case 0x1130c:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x11318:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x11330:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1135c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11410;
                    run_11400(); return;
                case 0x1135c:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11388;
                        continue;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11388;
                    pc=0x10f70;
                    run_10e00(); return;
                case 0x11388:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x113d8;
                        continue;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x113d8;
                        continue;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x113cc;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x113cc:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r0;
                case 0x113d8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11404;
                        run_11400(); return;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11404;
                    pc=0x10f70;
                    run_10e00(); return;
                case 0x11400:
                    pc=0x11400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11400() throws ExecutionException { /* 0x11400 - 0x11600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11400:
                case 0x11404:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11410;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x11410:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x11424:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11450;
                    pc=0x10d3c;
                    run_10c00(); return;
                case 0x11450:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11478;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31060;
                    r31=0x11470;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x11470:
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                    pc=0x11598;
                    continue;
                case 0x11478:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x11480:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x114a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1158c;
                    continue;
                case 0x114a4:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x114e4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x114f8;
                    continue;
                case 0x114e4:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x114a4;
                    continue;
                case 0x114f8:
                    r5 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x11480;
                    continue;
                case 0x1158c:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x11598:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x115b0:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x115cc:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x115f0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x116b0;
                    run_11600(); return;
                case 0x115f0:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x115f4:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                case 0x11600:
                    pc=0x11600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11600() throws ExecutionException { /* 0x11600 - 0x11800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11600:
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11618;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1169c;
                    continue;
                case 0x11618:
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x11678;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11688;
                    continue;
                case 0x11678:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x11688:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x115f4;
                    run_11400(); return;
                case 0x1169c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x115cc;
                    run_11400(); return;
                case 0x116b0:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r6 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x116cc;
                    pc=0x11044;
                    run_11000(); return;
                case 0x116cc:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x116f4;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -31020;
                    r31=0x116ec;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x116ec:
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                    pc=0x118d8;
                    run_11800(); return;
                case 0x116f4:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x116fc:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11720;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11894;
                    run_11800(); return;
                case 0x11720:
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x1174c:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11770;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11880;
                    run_11800(); return;
                case 0x11770:
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x117d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1186c;
                    run_11800(); return;
                case 0x117d0:
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                case 0x11800:
                    pc=0x11800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11800() throws ExecutionException { /* 0x11800 - 0x11a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11800:
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x1186c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x1174c;
                    run_11600(); return;
                case 0x11880:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x116fc;
                    run_11600(); return;
                case 0x11894:
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x118d8:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x118f0:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1191c;
                    pc=0x10d3c;
                    run_10c00(); return;
                case 0x1191c:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                case 0x11924:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11948;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11a14;
                    run_11a00(); return;
                case 0x11948:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x1194c:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11970;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11a00;
                    run_11a00(); return;
                case 0x11970:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x1194c;
                    continue;
                case 0x11a00:
                    pc=0x11a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11a00() throws ExecutionException { /* 0x11a00 - 0x11c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11a00:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x11924;
                    run_11800(); return;
                case 0x11a14:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x11a2c:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r6 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11a60;
                    pc=0x11044;
                    run_11000(); return;
                case 0x11a60:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x11a68:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11a8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11b20;
                    continue;
                case 0x11a8c:
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x11a68;
                    continue;
                case 0x11b20:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r5 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -4;
                    r3 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                case 0x11b9c:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x11bb4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11c38;
                    run_11c00(); return;
                case 0x11bb4:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r5 = r2 + 4;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                case 0x11c00:
                    pc=0x11c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11c00() throws ExecutionException { /* 0x11c00 - 0x11e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11c00:
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -4;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x11b9c;
                    run_11a00(); return;
                case 0x11c38:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x11c54:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11c78;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11db4;
                    continue;
                case 0x11c78:
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 4;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11cb8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11da0;
                    continue;
                case 0x11cb8:
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x11c78;
                    continue;
                case 0x11da0:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x11c54;
                    continue;
                case 0x11db4:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x11dcc:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r6;
                    r2 = r7 + r0;
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x11dfc;
                    pc=0x1476c;
                    run_14600(); return;
                case 0x11dfc:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x11e00:
                    pc=0x11e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_11e00() throws ExecutionException { /* 0x11e00 - 0x12000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x11e00:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e2c;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -30980;
                    r5 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11e24;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x11e24:
                    /* Next insn is delay slot */ 
                    pc=0x11f44;
                    continue;
                case 0x11e2c:
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11ebc;
                        continue;
                    }
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r5 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11e4c;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x11e4c:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x11e50:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11e70;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11f38;
                    continue;
                case 0x11e70:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))));
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r5 = f0;
                    /* Next insn is delay slot */ 
                    r31=0x11ea8;
                    pc=0x14afc;
                    run_14a00(); return;
                case 0x11ea8:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x11e50;
                    continue;
                case 0x11ebc:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r5 = r28 + -32680;
                    r6 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11ed0;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x11ed0:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x11ed4:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11ef4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x11f38;
                    continue;
                case 0x11ef4:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r5 = r28 + -32676;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11f24;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x11f24:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x11ed4;
                    continue;
                case 0x11f38:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11f44;
                    pc=0x148d8;
                    run_14800(); return;
                case 0x11f44:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x11f58:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r4;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r5;
                    r2 = r6 + r0;
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11f84;
                    pc=0x14350;
                    run_14200(); return;
                case 0x11f84:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11fb4;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -30940;
                    r5 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11fac;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x11fac:
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                    pc=0x12130;
                    run_12000(); return;
                case 0x11fb4:
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x11fdc;
                        continue;
                    }
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11fd4;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x11fd4:
                    /* Next insn is delay slot */ 
                    pc=0x11ff0;
                    continue;
                case 0x11fdc:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = r28 + -32672;
                    r6 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x11ff0;
                    pc=0x22600;
                    run_22600(); return;
                case 0x11ff0:
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x12000:
                    pc=0x12000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12000() throws ExecutionException { /* 0x12000 - 0x12200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12000:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -30900;
                    r31=0x12018;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x12018:
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12034;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                    pc=0x12130;
                    continue;
                case 0x12034:
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x120b8;
                        continue;
                    }
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x12048:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12068;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12118;
                    continue;
                case 0x12068:
                    r2 = r30 + 36;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x12078;
                    pc=0x149f0;
                    run_14800(); return;
                case 0x12078:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((float)(Float.intBitsToFloat(f0))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x12048;
                    continue;
                case 0x120b8:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x120bc:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x120dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12118;
                    continue;
                case 0x120dc:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = r28 + -32668;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x12104;
                    pc=0x22600;
                    run_22600(); return;
                case 0x12104:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x120bc;
                    continue;
                case 0x12118:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12124;
                    pc=0x148d8;
                    run_14800(); return;
                case 0x12124:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                case 0x12130:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x12148:
                    r29 = r29 + -192;
                    writePages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff] = r31;
                    writePages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff] = r4;
                    r4 = r30 + 24;
                    r5 = r0 + 128;
                    r6 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12170;
                    pc=0x20800;
                    run_20800(); return;
                case 0x12170:
                    r4 = r30 + 24;
                    r5 = r0 + 128;
                    r6 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12184;
                    pc=0x20800;
                    run_20800(); return;
                case 0x12184:
                    r3 = r30 + 160;
                    r7 = r30 + 164;
                    r2 = r30 + 168;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r30 + 172;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30876;
                    /* Next insn is delay slot */ 
                    r6 = r3 + r0;
                    r31=0x121b0;
                    pc=0x22600;
                    run_22600(); return;
                case 0x121b0:
                    r3 = r2 + r0;
                    r2 = r0 + 4;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x121d4;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30856;
                    r31=0x121cc;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x121cc:
                    /* Next insn is delay slot */ 
                    writePages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff] = r0;
                    pc=0x12464;
                    run_12400(); return;
                case 0x121d4:
                    r2 = readPages[(r30+172)>>>12][((r30+172)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x121f8;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30804;
                    r31=0x121f0;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x121f0:
                    /* Next insn is delay slot */ 
                    writePages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff] = r0;
                    pc=0x12464;
                    run_12400(); return;
                case 0x121f8:
                    r4 = r30 + 24;
                    r5 = r0 + 128;
                case 0x12200:
                    pc=0x12200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12200() throws ExecutionException { /* 0x12200 - 0x12400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12200:
                    r6 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1220c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x1220c:
                    r4 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r5 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r6 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12220;
                    pc=0x11044;
                    run_11000(); return;
                case 0x12220:
                    writePages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1223c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff] = r0;
                    pc=0x12464;
                    run_12400(); return;
                case 0x1223c:
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r0;
                case 0x12240:
                    r2 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12264;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x122e4;
                    continue;
                case 0x12264:
                    r2 = r30 + 156;
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = r28 + -32660;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x12278;
                    pc=0x22600;
                    run_22600(); return;
                case 0x12278:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x122a4;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -30688;
                    r5 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1229c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1229c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff] = r0;
                    pc=0x12464;
                    run_12400(); return;
                case 0x122a4:
                    r4 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r2;
                    pc=0x12240;
                    continue;
                case 0x122e4:
                    r4 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r2 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r0;
                case 0x12320:
                    r2 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12344;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x123c4;
                    continue;
                case 0x12344:
                    r2 = r30 + 156;
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = r28 + -32660;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x12358;
                    pc=0x22600;
                    run_22600(); return;
                case 0x12358:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12384;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -30636;
                    r5 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1237c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1237c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff] = r0;
                    pc=0x12464;
                    run_12400(); return;
                case 0x12384:
                    r4 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r2;
                    pc=0x12320;
                    continue;
                case 0x123c4:
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r0;
                case 0x123c8:
                    r2 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x123ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12458;
                    run_12400(); return;
                case 0x123ec:
                    r4 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                case 0x12400:
                    pc=0x12400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12400() throws ExecutionException { /* 0x12400 - 0x12600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12400:
                    r2 = r3 + r2;
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = r28 + -32652;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x12418;
                    pc=0x22600;
                    run_22600(); return;
                case 0x12418:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12444;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -30584;
                    r5 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1243c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1243c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff] = r0;
                    pc=0x12464;
                    continue;
                case 0x12444:
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r2;
                    pc=0x123c8;
                    run_12200(); return;
                case 0x12458:
                    r2 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    writePages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff] = r2;
                case 0x12464:
                    r2 = readPages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+188)>>>12][((r29+188)>>>2)&0x3ff];
                    r30 = readPages[(r29+184)>>>12][((r29+184)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 192;
                    pc=r31;
                    return;
                case 0x1247c:
                    r29 = r29 + -128;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r31;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff] = r4;
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x124d8;
                        continue;
                    }
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r2 + 7;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                case 0x124d8:
                    r3 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r3 >> 3;
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x12568;
                        continue;
                    }
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r2 + 7;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = r2;
                case 0x12568:
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r3 = r2 >> 3;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = r2 & 7;
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r2 = r2 + r3;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 1;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    r2 = r30 + 48;
                    r4 = r2 + r0;
                    r5 = 5 << 16;
                    r5 = r5 + -30536;
                    r6 = readPages[(r28+-32688)>>>12][((r28+-32688)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x125cc;
                    pc=0x26400;
                    run_26400(); return;
                case 0x125cc:
                    r2 = r30 + 48;
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30520;
                    r6 = r2 + r0;
                    r7 = r28 + -32644;
                    /* Next insn is delay slot */ 
                    r31=0x125ec;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x125ec:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                case 0x12600:
                    pc=0x12600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12600() throws ExecutionException { /* 0x12600 - 0x12800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12600:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30508;
                    r6 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r7 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12624;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12624:
                    r3 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30480;
                    r6 = r28 + -32636;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12670;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12670:
                    r2 = r28 + -32632;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r28 + -32632;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30452;
                    r6 = r28 + -32624;
                    r7 = r28 + -32624;
                    /* Next insn is delay slot */ 
                    r31=0x1269c;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x1269c:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                case 0x126a0:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x126c4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12748;
                    continue;
                case 0x126c4:
                    r4 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r2 = r2 & 7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12714;
                        continue;
                    }
                    r3 = r28 + -32616;
                    /* Next insn is delay slot */ 
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r3;
                    pc=0x1271c;
                    continue;
                case 0x12714:
                    r2 = r28 + -32612;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r2;
                case 0x1271c:
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = r28 + -32608;
                    r6 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r7 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12734;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12734:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x126a0;
                    continue;
                case 0x12748:
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = r28 + -32616;
                    /* Next insn is delay slot */ 
                    r31=0x12758;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12758:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                case 0x1275c:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12780;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12804;
                    run_12800(); return;
                case 0x12780:
                    r4 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r2 = r2 & 7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x127d0;
                        continue;
                    }
                    r3 = r28 + -32616;
                    /* Next insn is delay slot */ 
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r3;
                    pc=0x127d8;
                    continue;
                case 0x127d0:
                    r2 = r28 + -32612;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r2;
                case 0x127d8:
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = r28 + -32608;
                    r6 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r7 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x127f0;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x127f0:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x1275c;
                    continue;
                case 0x12800:
                    pc=0x12800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12800() throws ExecutionException { /* 0x12800 - 0x12a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12800:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x12804:
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = r28 + -32616;
                    /* Next insn is delay slot */ 
                    r31=0x12814;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12814:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                case 0x12818:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1283c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x128c8;
                    continue;
                case 0x1283c:
                    r4 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r2 = r2 & 7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12880;
                        continue;
                    }
                    r3 = r28 + -32616;
                    /* Next insn is delay slot */ 
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r3;
                    pc=0x12888;
                    continue;
                case 0x12880:
                    r2 = r28 + -32612;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r2;
                case 0x12888:
                    r3 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = r28 + -32600;
                    r2 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x128b4;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x128b4:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x12818;
                    continue;
                case 0x128c8:
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r5 = r28 + -32616;
                    /* Next insn is delay slot */ 
                    r31=0x128d8;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x128d8:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r30 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 128;
                    pc=r31;
                    return;
                case 0x128ec:
                    r29 = r29 + -72;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r4;
                    r3 = r30 + 40;
                    r7 = r30 + 44;
                    r2 = r30 + 48;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30432;
                    /* Next insn is delay slot */ 
                    r6 = r3 + r0;
                    r31=0x12924;
                    pc=0x22600;
                    run_22600(); return;
                case 0x12924:
                    r3 = r2 + r0;
                    r2 = r0 + 3;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12948;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30416;
                    r31=0x12940;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x12940:
                    /* Next insn is delay slot */ 
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r0;
                    pc=0x12b00;
                    run_12a00(); return;
                case 0x12948:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r6 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1295c;
                    pc=0x11044;
                    run_11000(); return;
                case 0x1295c:
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12978;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r0;
                    pc=0x12b00;
                    run_12a00(); return;
                case 0x12978:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r0;
                case 0x12980:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x129a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12acc;
                    run_12a00(); return;
                case 0x129a0:
                    r2 = r30 + 32;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r5 = r28 + -32660;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x129b4;
                    pc=0x22600;
                    run_22600(); return;
                case 0x129b4:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x129d8;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30416;
                    r31=0x129d0;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x129d0:
                    /* Next insn is delay slot */ 
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r0;
                    pc=0x12b00;
                    run_12a00(); return;
                case 0x129d8:
                    r4 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x12a00:
                    pc=0x12a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12a00() throws ExecutionException { /* 0x12a00 - 0x12c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12a00:
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x12a04:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12a24;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12ab8;
                    continue;
                case 0x12a24:
                    r4 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r4 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30376;
                    /* Next insn is delay slot */ 
                    r7 = r2 + r0;
                    r31=0x12a70;
                    pc=0x22600;
                    run_22600(); return;
                case 0x12a70:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x12a94;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30416;
                    r31=0x12a8c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x12a8c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r0;
                    pc=0x12b00;
                    continue;
                case 0x12a94:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    pc=0x12a04;
                    continue;
                case 0x12ab8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x12980;
                    run_12800(); return;
                case 0x12acc:
                    r4 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                case 0x12b00:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x12b18:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r7 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30364;
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12b68;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12b68:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x12b70:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12b94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12cb8;
                    run_12c00(); return;
                case 0x12b94:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r5 = r2 + 4;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    r4 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r5 = r28 + -32592;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x12bf0;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12bf0:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                case 0x12c00:
                    pc=0x12c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12c00() throws ExecutionException { /* 0x12c00 - 0x12e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12c00:
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 4;
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12c30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12ca4;
                    continue;
                case 0x12c30:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r4 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r5 = r28 + -32584;
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12c90;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x12c90:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    pc=0x12bf0;
                    run_12a00(); return;
                case 0x12ca4:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x12b70;
                    run_12a00(); return;
                case 0x12cb8:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x12ccc:
                    r29 = r29 + -72;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r4;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r30 + 16;
                    r31=0x12cf0;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x12cf0:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    r2 = r30 + 20;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x12d14;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x12d14:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    r2 = r30 + 24;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x12d38;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x12d38:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12d70;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30348;
                    r31=0x12d68;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x12d68:
                    /* Next insn is delay slot */ 
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                    pc=0x12f70;
                    run_12e00(); return;
                case 0x12d70:
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r6 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12d84;
                    pc=0x11044;
                    run_11000(); return;
                case 0x12d84:
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12da0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                    pc=0x12f70;
                    run_12e00(); return;
                case 0x12da0:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                case 0x12da8:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12dc8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12f3c;
                    run_12e00(); return;
                case 0x12dc8:
                    r2 = r30 + 28;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x12dd8;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x12dd8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12df4;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30348;
                    r31=0x12dec;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x12dec:
                    /* Next insn is delay slot */ 
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                    pc=0x12f70;
                    run_12e00(); return;
                case 0x12df4:
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                case 0x12e00:
                    pc=0x12e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_12e00() throws ExecutionException { /* 0x12e00 - 0x13000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x12e00:
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r0;
                case 0x12e20:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12e40;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x12f28;
                    continue;
                case 0x12e40:
                    r2 = r30 + 44;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x12e50;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x12e50:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    r2 = r30 + 52;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x12e74;
                    pc=0x149f0;
                    run_14800(); return;
                case 0x12e74:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x12eac;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30348;
                    r31=0x12ea4;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x12ea4:
                    /* Next insn is delay slot */ 
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                    pc=0x12f70;
                    continue;
                case 0x12eac:
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((float)(Float.intBitsToFloat(f0))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x12e20;
                    continue;
                case 0x12f28:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x12da8;
                    run_12c00(); return;
                case 0x12f3c:
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                case 0x12f70:
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x12f88:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12fb4;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x12fb4:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12fc8;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x12fc8:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x12fdc;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x12fdc:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x12fe4:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13008;
                        run_13000(); return;
                    }
                case 0x13000:
                    pc=0x13000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13000() throws ExecutionException { /* 0x13000 - 0x13200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13000:
                    /* Next insn is delay slot */ 
                    pc=0x13130;
                    continue;
                case 0x13008:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r5 = r2 + 4;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x13060;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x13060:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 4;
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x130a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1311c;
                    continue;
                case 0x130a0:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x130cc;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x130cc:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))));
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = f0;
                    /* Next insn is delay slot */ 
                    r31=0x13108;
                    pc=0x14afc;
                    run_14a00(); return;
                case 0x13108:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x13060;
                    continue;
                case 0x1311c:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x12fe4;
                    run_12e00(); return;
                case 0x13130:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x13144:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    r2 = r30 + 20;
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30304;
                    r6 = r30 + 16;
                    /* Next insn is delay slot */ 
                    r7 = r2 + r0;
                    r31=0x13174;
                    pc=0x22600;
                    run_22600(); return;
                case 0x13174:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13198;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30292;
                    r31=0x13190;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x13190:
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r0;
                    pc=0x132a8;
                    run_13200(); return;
                case 0x13198:
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x131a8;
                    pc=0x10d3c;
                    run_10c00(); return;
                case 0x131a8:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x131c4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r0;
                    pc=0x132a8;
                    run_13200(); return;
                case 0x131c4:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x131c8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x131e8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1329c;
                    run_13200(); return;
                case 0x131e8:
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x131ec:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1320c;
                        run_13200(); return;
                    }
                case 0x13200:
                    pc=0x13200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13200() throws ExecutionException { /* 0x13200 - 0x13400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13200:
                    /* Next insn is delay slot */ 
                    pc=0x13288;
                    continue;
                case 0x1320c:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r5 = r28 + -32652;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x13250;
                    pc=0x22600;
                    run_22600(); return;
                case 0x13250:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x13274;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30292;
                    r31=0x1326c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1326c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r0;
                    pc=0x132a8;
                    continue;
                case 0x13274:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    pc=0x131ec;
                    run_13000(); return;
                case 0x13288:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x131c8;
                    run_13000(); return;
                case 0x1329c:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                case 0x132a8:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x132c0:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r4 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r5 = r5 + -30252;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x132fc;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x132fc:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x13300:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13324;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x13410;
                    run_13400(); return;
                case 0x13324:
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x13328:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1334c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x133fc;
                    continue;
                case 0x1334c:
                    r4 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    if(r2 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x133b4;
                        continue;
                    }
                    r2 = r0 + 10;
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    pc=0x133bc;
                    continue;
                case 0x133b4:
                    r2 = r0 + 32;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                case 0x133bc:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r5 = r28 + -32576;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r7 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x133e8;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x133e8:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    pc=0x13328;
                    continue;
                case 0x133fc:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                case 0x13400:
                    pc=0x13400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13400() throws ExecutionException { /* 0x13400 - 0x13600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13400:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x13300;
                    run_13200(); return;
                case 0x13410:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x13424:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r4;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r30 + 16;
                    r31=0x13448;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x13448:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = r30 + 20;
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1346c;
                    pc=0x1496c;
                    run_14800(); return;
                case 0x1346c:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x134a4;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30240;
                    r31=0x1349c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1349c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                    pc=0x135c0;
                    continue;
                case 0x134a4:
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x134b4;
                    pc=0x10d3c;
                    run_10c00(); return;
                case 0x134b4:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x134d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                    pc=0x135c0;
                    continue;
                case 0x134d0:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x134d4:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x134f4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x135b4;
                    continue;
                case 0x134f4:
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x134f8:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13518;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x135a0;
                    continue;
                case 0x13518:
                    r2 = r30 + 36;
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x13528;
                    pc=0x149f0;
                    run_14800(); return;
                case 0x13528:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13544;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -30240;
                    r31=0x1353c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1353c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                    pc=0x135c0;
                    continue;
                case 0x13544:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((float)(Float.intBitsToFloat(f0))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    pc=0x134f8;
                    continue;
                case 0x135a0:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x134d4;
                    continue;
                case 0x135b4:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                case 0x135c0:
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x135d8:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13604;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x13600:
                    pc=0x13600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13600() throws ExecutionException { /* 0x13600 - 0x13800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13600:
                case 0x13604:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13618;
                    pc=0x14a84;
                    run_14a00(); return;
                case 0x13618:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                case 0x1361c:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13640;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x136e4;
                    continue;
                case 0x13640:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x13644:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13668;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x136d0;
                    continue;
                case 0x13668:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))));
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = f0;
                    /* Next insn is delay slot */ 
                    r31=0x136bc;
                    pc=0x14afc;
                    run_14a00(); return;
                case 0x136bc:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x13644;
                    continue;
                case 0x136d0:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x1361c;
                    continue;
                case 0x136e4:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x136f8:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13724;
                    pc=0x14230;
                    run_14200(); return;
                case 0x13724:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x137c8;
                        continue;
                    }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -30160;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x13764:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13770;
                    pc=0x12148;
                    run_12000(); return;
                case 0x13770:
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x137dc;
                    continue;
                case 0x13778:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13784;
                    pc=0x128ec;
                    run_12800(); return;
                case 0x13784:
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x137dc;
                    continue;
                case 0x1378c:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13798;
                    pc=0x12ccc;
                    run_12c00(); return;
                case 0x13798:
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x137dc;
                    continue;
                case 0x137a0:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x137ac;
                    pc=0x13144;
                    run_13000(); return;
                case 0x137ac:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x137dc;
                    continue;
                case 0x137b4:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x137c0;
                    pc=0x13424;
                    run_13400(); return;
                case 0x137c0:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x137dc;
                    continue;
                case 0x137c8:
                    r4 = 5 << 16;
                    r4 = r4 + -30200;
                    r5 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x137dc;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x137dc:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x137e8;
                    pc=0x148d8;
                    run_14800(); return;
                case 0x137e8:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13814;
                        run_13800(); return;
                    }
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13804;
                    pc=0x115b0;
                    run_11400(); return;
                case 0x13800:
                    pc=0x13800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13800() throws ExecutionException { /* 0x13800 - 0x13a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13800:
                case 0x13804:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13814;
                    pc=0x10f70;
                    run_10e00(); return;
                case 0x13814:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x1382c:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13858;
                    pc=0x14230;
                    run_14200(); return;
                case 0x13858:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x138fc;
                        continue;
                    }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -30140;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x13898:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x138a4;
                    pc=0x12148;
                    run_12000(); return;
                case 0x138a4:
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x13910;
                    continue;
                case 0x138ac:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x138b8;
                    pc=0x128ec;
                    run_12800(); return;
                case 0x138b8:
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x13910;
                    continue;
                case 0x138c0:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x138cc;
                    pc=0x12ccc;
                    run_12c00(); return;
                case 0x138cc:
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x13910;
                    continue;
                case 0x138d4:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x138e0;
                    pc=0x13144;
                    run_13000(); return;
                case 0x138e0:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x13910;
                    continue;
                case 0x138e8:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x138f4;
                    pc=0x13424;
                    run_13400(); return;
                case 0x138f4:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x13910;
                    continue;
                case 0x138fc:
                    r4 = 5 << 16;
                    r4 = r4 + -30200;
                    r5 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13910;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x13910:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1391c;
                    pc=0x148d8;
                    run_14800(); return;
                case 0x1391c:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13948;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13938;
                    pc=0x11424;
                    run_11400(); return;
                case 0x13938:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13948;
                    pc=0x111d4;
                    run_11000(); return;
                case 0x13948:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x13960:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r6;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x1398c;
                    pc=0x1476c;
                    run_14600(); return;
                case 0x1398c:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x139bc;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -30120;
                    r5 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x139b4;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x139b4:
                    /* Next insn is delay slot */ 
                    pc=0x13acc;
                    run_13a00(); return;
                case 0x139bc:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13a90;
                        run_13a00(); return;
                    }
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -30072;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x139f8:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                case 0x13a00:
                    pc=0x13a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13a00() throws ExecutionException { /* 0x13a00 - 0x13c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13a00:
                    /* Next insn is delay slot */ 
                    r31=0x13a08;
                    pc=0x1247c;
                    run_12400(); return;
                case 0x13a08:
                    /* Next insn is delay slot */ 
                    pc=0x13aa4;
                    continue;
                case 0x13a10:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13a20;
                    pc=0x12b18;
                    run_12a00(); return;
                case 0x13a20:
                    /* Next insn is delay slot */ 
                    pc=0x13aa4;
                    continue;
                case 0x13a28:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13a38;
                    pc=0x12f88;
                    run_12e00(); return;
                case 0x13a38:
                    /* Next insn is delay slot */ 
                    pc=0x13aa4;
                    continue;
                case 0x13a40:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13a4c;
                    pc=0x11424;
                    run_11400(); return;
                case 0x13a4c:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13a60;
                    pc=0x132c0;
                    run_13200(); return;
                case 0x13a60:
                    /* Next insn is delay slot */ 
                    pc=0x13aa4;
                    continue;
                case 0x13a68:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13a74;
                    pc=0x11424;
                    run_11400(); return;
                case 0x13a74:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13a88;
                    pc=0x135d8;
                    run_13400(); return;
                case 0x13a88:
                    /* Next insn is delay slot */ 
                    pc=0x13aa4;
                    continue;
                case 0x13a90:
                    r4 = 5 << 16;
                    r4 = r4 + -30200;
                    r5 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13aa4;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x13aa4:
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13ab0;
                    pc=0x148d8;
                    run_14800(); return;
                case 0x13ab0:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13acc;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13acc;
                    pc=0x10f70;
                    run_10e00(); return;
                case 0x13acc:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x13ae0:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r6;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x13b0c;
                    pc=0x1476c;
                    run_14600(); return;
                case 0x13b0c:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13b3c;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -30052;
                    r5 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13b34;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x13b34:
                    /* Next insn is delay slot */ 
                    pc=0x13c5c;
                    run_13c00(); return;
                case 0x13b3c:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = (r2&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13c20;
                        run_13c00(); return;
                    }
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -30004;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    return;
                case 0x13b78:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13b84;
                    pc=0x115b0;
                    run_11400(); return;
                case 0x13b84:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13b98;
                    pc=0x1247c;
                    run_12400(); return;
                case 0x13b98:
                    /* Next insn is delay slot */ 
                    pc=0x13c34;
                    run_13c00(); return;
                case 0x13ba0:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13bac;
                    pc=0x115b0;
                    run_11400(); return;
                case 0x13bac:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13bc0;
                    pc=0x12b18;
                    run_12a00(); return;
                case 0x13bc0:
                    /* Next insn is delay slot */ 
                    pc=0x13c34;
                    run_13c00(); return;
                case 0x13bc8:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13bd4;
                    pc=0x115b0;
                    run_11400(); return;
                case 0x13bd4:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13be8;
                    pc=0x12f88;
                    run_12e00(); return;
                case 0x13be8:
                    /* Next insn is delay slot */ 
                    pc=0x13c34;
                    run_13c00(); return;
                case 0x13bf0:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13c00;
                    pc=0x132c0;
                    run_13200(); return;
                case 0x13c00:
                    pc=0x13c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13c00() throws ExecutionException { /* 0x13c00 - 0x13e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13c00:
                    /* Next insn is delay slot */ 
                    pc=0x13c34;
                    continue;
                case 0x13c08:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13c18;
                    pc=0x135d8;
                    run_13400(); return;
                case 0x13c18:
                    /* Next insn is delay slot */ 
                    pc=0x13c34;
                    continue;
                case 0x13c20:
                    r4 = 5 << 16;
                    r4 = r4 + -30200;
                    r5 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13c34;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x13c34:
                    r4 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13c40;
                    pc=0x148d8;
                    run_14800(); return;
                case 0x13c40:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13c5c;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13c5c;
                    pc=0x111d4;
                    run_11000(); return;
                case 0x13c5c:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x13c70:
                    r29 = r29 + -8;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r4;
                    addr=r30+10;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r30 + r0;
                    r30 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x13c94:
                    r29 = r29 + -8;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x13cb8:
                    r29 = r29 + -8;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r4;
                    addr=r30+10;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r29 = r30 + r0;
                    r30 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x13cdc:
                    r29 = r29 + -8;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x13d00:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r2 = r5 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r6;
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13d44;
                        continue;
                    }
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 4;
                    r31=0x13d3c;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x13d3c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x13d5c;
                    continue;
                case 0x13d44:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x13d58;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x13d58:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x13d5c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13d78;
                        continue;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13d78;
                    pc=0x25200;
                    run_25200(); return;
                case 0x13d78:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x13d90:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r2 = r5 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r6;
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13dd4;
                        continue;
                    }
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 8;
                    r31=0x13dcc;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x13dcc:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x13dec;
                    continue;
                case 0x13dd4:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x13de8;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x13de8:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x13dec:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x13e08;
                        run_13e00(); return;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                case 0x13e00:
                    pc=0x13e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_13e00() throws ExecutionException { /* 0x13e00 - 0x14000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x13e00:
                    /* Next insn is delay slot */ 
                    r31=0x13e08;
                    pc=0x25200;
                    run_25200(); return;
                case 0x13e08:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x13e20:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = r0 + 7;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13e48;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x13e48:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13e60;
                    pc=0x20600;
                    run_20600(); return;
                case 0x13e60:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x13e74:
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r2 = r30 + 36;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r6 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13ebc;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x13ebc:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x13ed0:
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r2 = r30 + 36;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r31=0x13efc;
                    pc=0x13e20;
                    continue;
                case 0x13efc:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r28 + -32568;
                    /* Next insn is delay slot */ 
                    r31=0x13f18;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x13f18:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r6 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13f38;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x13f38:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r28 + -32560;
                    /* Next insn is delay slot */ 
                    r31=0x13f54;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x13f54:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x13f68:
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r2 = r30 + 36;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r31=0x13f94;
                    pc=0x13e20;
                    continue;
                case 0x13f94:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r28 + -32568;
                    /* Next insn is delay slot */ 
                    r31=0x13fb0;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x13fb0:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r6 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x13fd0;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x13fd0:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r28 + -32556;
                    /* Next insn is delay slot */ 
                    r31=0x13fec;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x13fec:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 1;
                    r31=0x13ff4;
                    pc=0x20200;
                    run_20200(); return;
                case 0x13ff4:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                case 0x14000:
                    pc=0x14000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14000() throws ExecutionException { /* 0x14000 - 0x14200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14000:
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r28+-31736)>>>12][((r28+-31736)>>>2)&0x3ff];
                    r2 = r2 < 64 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14028;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -29984;
                    r31=0x14028;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x14028:
                    r5 = r28 + -31736;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    r4 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -19032;
                    r4 = r4 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = r3 + 1;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x14070:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x14084:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r28+-31736)>>>12][((r28+-31736)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x140e4;
                        continue;
                    }
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -19032;
                    r2 = r3 + r2;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x140d0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x140e4;
                    continue;
                case 0x140d0:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x14084;
                    continue;
                case 0x140e4:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31736)>>>12][((r28+-31736)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14100;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r0;
                    pc=0x1414c;
                    continue;
                case 0x14100:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -19032;
                    r4 = r3 + r2;
                    r2 = readPages[(r28+-31736)>>>12][((r28+-31736)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r28+-31736)>>>12][((r28+-31736)>>>2)&0x3ff] = r2;
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -19032;
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                case 0x1414c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x14160:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14190;
                    pc=0x20600;
                    run_20600(); return;
                case 0x14190:
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x141a0;
                    pc=0x25400;
                    run_25400(); return;
                case 0x141a0:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x141c0;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x141c0;
                    pc=0x13ff4;
                    run_13e00(); return;
                case 0x141c0:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x141d8:
                    r29 = r29 + -536;
                    writePages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff] = r31;
                    writePages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+536)>>>12][((r30+536)>>>2)&0x3ff] = r4;
                    writePages[(r30+540)>>>12][((r30+540)>>>2)&0x3ff] = r5;
                    r4 = r30 + 16;
                    r5 = 5 << 16;
                    r5 = r5 + -29964;
                    r6 = readPages[(r30+536)>>>12][((r30+536)>>>2)&0x3ff];
                case 0x14200:
                    pc=0x14200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14200() throws ExecutionException { /* 0x14200 - 0x14400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14200:
                    r7 = readPages[(r30+540)>>>12][((r30+540)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1420c;
                    pc=0x26400;
                    run_26400(); return;
                case 0x1420c:
                    r4 = r30 + 16;
                    r5 = r28 + -32552;
                    /* Next insn is delay slot */ 
                    r31=0x1421c;
                    pc=0x14160;
                    run_14000(); return;
                case 0x1421c:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+532)>>>12][((r29+532)>>>2)&0x3ff];
                    r30 = readPages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 536;
                    pc=r31;
                    return;
                case 0x14230:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14250;
                    pc=0x14350;
                    continue;
                case 0x14250:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14278;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -29944;
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14278;
                    pc=0x13f68;
                    run_13e00(); return;
                case 0x14278:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x14290:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x142b4;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x142b4:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x142c4;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x142c4:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x142e8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    pc=0x14338;
                    continue;
                case 0x142e8:
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    r4 = r2 + r0;
                    r5 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14314;
                    pc=0x27200;
                    run_27200(); return;
                case 0x14314:
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 ^ 0;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x14338:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x14350:
                    r29 = r29 + -608;
                    writePages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff] = r31;
                    writePages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff] = r4;
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    r5 = r28 + -32548;
                    /* Next insn is delay slot */ 
                    r31=0x14374;
                    pc=0x27200;
                    run_27200(); return;
                case 0x14374:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14398;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    run_14400(); return;
                case 0x14398:
                    r2 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 124;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x143d4;
                        continue;
                    }
                    r2 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r2 + r0;
                    r5 = r28 + -32552;
                    /* Next insn is delay slot */ 
                    r31=0x143cc;
                    pc=0x14160;
                    run_14000(); return;
                case 0x143cc:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    run_14400(); return;
                case 0x143d4:
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    r5 = r28 + -32544;
                    /* Next insn is delay slot */ 
                    r31=0x143e4;
                    pc=0x14290;
                    continue;
                case 0x143e4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1440c;
                        run_14400(); return;
                    }
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    r5 = r28 + -32540;
                    /* Next insn is delay slot */ 
                    r31=0x143fc;
                    pc=0x14290;
                    continue;
                case 0x143fc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1440c;
                        run_14400(); return;
                    }
                case 0x14400:
                    pc=0x14400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14400() throws ExecutionException { /* 0x14400 - 0x14600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14400:
                    /* Next insn is delay slot */ 
                    pc=0x14444;
                    continue;
                case 0x1440c:
                    r2 = r30 + 528;
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1441c;
                    pc=0x29600;
                    run_29600(); return;
                case 0x1441c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1443c;
                        continue;
                    }
                    r4 = r28 + -32536;
                    r5 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14434;
                    pc=0x141d8;
                    run_14000(); return;
                case 0x14434:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    continue;
                case 0x1443c:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r0;
                    pc=0x145f4;
                    continue;
                case 0x14444:
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    r5 = r28 + -32528;
                    /* Next insn is delay slot */ 
                    r31=0x14454;
                    pc=0x14290;
                    run_14200(); return;
                case 0x14454:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1447c;
                        continue;
                    }
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    r5 = r28 + -32524;
                    /* Next insn is delay slot */ 
                    r31=0x1446c;
                    pc=0x14290;
                    run_14200(); return;
                case 0x1446c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1447c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x144b8;
                    continue;
                case 0x1447c:
                    r2 = r30 + 528;
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1448c;
                    pc=0x29600;
                    run_29600(); return;
                case 0x1448c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x144b0;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -29916;
                    r5 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x144a8;
                    pc=0x141d8;
                    run_14000(); return;
                case 0x144a8:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    continue;
                case 0x144b0:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r0;
                    pc=0x145f4;
                    continue;
                case 0x144b8:
                    r2 = r30 + 528;
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x144c8;
                    pc=0x29600;
                    run_29600(); return;
                case 0x144c8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x144e8;
                        continue;
                    }
                    r4 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    r5 = r28 + -32552;
                    /* Next insn is delay slot */ 
                    r31=0x144e0;
                    pc=0x21800;
                    run_21800(); return;
                case 0x144e0:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    continue;
                case 0x144e8:
                    r4 = r30 + 16;
                    r5 = r28 + -32516;
                    r6 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x144fc;
                    pc=0x26400;
                    run_26400(); return;
                case 0x144fc:
                    r2 = r30 + 528;
                    r4 = r30 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1450c;
                    pc=0x29600;
                    run_29600(); return;
                case 0x1450c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14528;
                        continue;
                    }
                    r4 = r28 + -32536;
                    /* Next insn is delay slot */ 
                    r5 = r30 + 16;
                    r31=0x14520;
                    pc=0x141d8;
                    run_14000(); return;
                case 0x14520:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    continue;
                case 0x14528:
                    r4 = r30 + 16;
                    r5 = r28 + -32508;
                    r6 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1453c;
                    pc=0x26400;
                    run_26400(); return;
                case 0x1453c:
                    r2 = r30 + 528;
                    r4 = r30 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1454c;
                    pc=0x29600;
                    run_29600(); return;
                case 0x1454c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14568;
                        continue;
                    }
                    r4 = r28 + -32536;
                    /* Next insn is delay slot */ 
                    r5 = r30 + 16;
                    r31=0x14560;
                    pc=0x141d8;
                    run_14000(); return;
                case 0x14560:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    continue;
                case 0x14568:
                    r4 = r30 + 16;
                    r5 = r28 + -32500;
                    r6 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1457c;
                    pc=0x26400;
                    run_26400(); return;
                case 0x1457c:
                    r2 = r30 + 528;
                    r4 = r30 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1458c;
                    pc=0x29600;
                    run_29600(); return;
                case 0x1458c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x145ac;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -29916;
                    /* Next insn is delay slot */ 
                    r5 = r30 + 16;
                    r31=0x145a4;
                    pc=0x141d8;
                    run_14000(); return;
                case 0x145a4:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    continue;
                case 0x145ac:
                    r4 = r30 + 16;
                    r5 = r28 + -32492;
                    r6 = readPages[(r30+608)>>>12][((r30+608)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x145c0;
                    pc=0x26400;
                    run_26400(); return;
                case 0x145c0:
                    r2 = r30 + 528;
                    r4 = r30 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x145d0;
                    pc=0x29600;
                    run_29600(); return;
                case 0x145d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x145f0;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -29916;
                    /* Next insn is delay slot */ 
                    r5 = r30 + 16;
                    r31=0x145e8;
                    pc=0x141d8;
                    run_14000(); return;
                case 0x145e8:
                    /* Next insn is delay slot */ 
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r2;
                    pc=0x145f4;
                    continue;
                case 0x145f0:
                    writePages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff] = r0;
                case 0x145f4:
                    r2 = readPages[(r30+592)>>>12][((r30+592)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                case 0x14600:
                    pc=0x14600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14600() throws ExecutionException { /* 0x14600 - 0x14800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14600:
                    r30 = readPages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 608;
                    pc=r31;
                    return;
                case 0x1460c:
                    r29 = r29 + -560;
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r31;
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+560)>>>12][((r30+560)>>>2)&0x3ff] = r4;
                    r2 = r5 + r0;
                    addr=r30+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r30+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14644;
                        continue;
                    }
                    r2 = r28 + -32484;
                    /* Next insn is delay slot */ 
                    writePages[(r30+548)>>>12][((r30+548)>>>2)&0x3ff] = r2;
                    pc=0x1464c;
                    continue;
                case 0x14644:
                    r2 = r28 + -32480;
                    writePages[(r30+548)>>>12][((r30+548)>>>2)&0x3ff] = r2;
                case 0x1464c:
                    r2 = readPages[(r30+548)>>>12][((r30+548)>>>2)&0x3ff];
                    writePages[(r30+544)>>>12][((r30+544)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+560)>>>12][((r30+560)>>>2)&0x3ff];
                    r5 = r28 + -32524;
                    /* Next insn is delay slot */ 
                    r31=0x14668;
                    pc=0x14290;
                    run_14200(); return;
                case 0x14668:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14690;
                        continue;
                    }
                    r4 = readPages[(r30+560)>>>12][((r30+560)>>>2)&0x3ff];
                    r5 = r28 + -32528;
                    /* Next insn is delay slot */ 
                    r31=0x14680;
                    pc=0x14290;
                    run_14200(); return;
                case 0x14680:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14690;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x146c8;
                    continue;
                case 0x14690:
                    r3 = r30 + 32;
                    r2 = readPages[(r30+560)>>>12][((r30+560)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    r5 = 5 << 16;
                    r5 = r5 + -29904;
                    r6 = 5 << 16;
                    r6 = r6 + -29892;
                    r7 = readPages[(r30+544)>>>12][((r30+544)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x146c0;
                    pc=0x26400;
                    run_26400(); return;
                case 0x146c0:
                    /* Next insn is delay slot */ 
                    pc=0x14744;
                    continue;
                case 0x146c8:
                    r4 = readPages[(r30+560)>>>12][((r30+560)>>>2)&0x3ff];
                    r5 = r28 + -32540;
                    /* Next insn is delay slot */ 
                    r31=0x146d8;
                    pc=0x14290;
                    run_14200(); return;
                case 0x146d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14718;
                        continue;
                    }
                    r3 = r30 + 32;
                    r2 = readPages[(r30+560)>>>12][((r30+560)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    r5 = 5 << 16;
                    r5 = r5 + -29904;
                    r6 = 5 << 16;
                    r6 = r6 + -29880;
                    r7 = readPages[(r30+544)>>>12][((r30+544)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14710;
                    pc=0x26400;
                    run_26400(); return;
                case 0x14710:
                    /* Next insn is delay slot */ 
                    pc=0x14744;
                    continue;
                case 0x14718:
                    r3 = r30 + 32;
                    r2 = readPages[(r30+560)>>>12][((r30+560)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = r3 + r0;
                    r5 = 5 << 16;
                    r5 = r5 + -29904;
                    r6 = r28 + -32476;
                    r7 = readPages[(r30+544)>>>12][((r30+544)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14744;
                    pc=0x26400;
                    run_26400(); return;
                case 0x14744:
                    r2 = r30 + 32;
                    r4 = r2 + r0;
                    r5 = r28 + -32468;
                    /* Next insn is delay slot */ 
                    r31=0x14758;
                    pc=0x14160;
                    run_14000(); return;
                case 0x14758:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff];
                    r30 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 560;
                    pc=r31;
                    return;
                case 0x1476c:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    r2 = r5 + r0;
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r28 + -32548;
                    /* Next insn is delay slot */ 
                    r31=0x14798;
                    pc=0x27200;
                    run_27200(); return;
                case 0x14798:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x147bc;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x148c0;
                    run_14800(); return;
                case 0x147bc:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 124;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x147f8;
                        continue;
                    }
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r2 + r0;
                    r5 = r28 + -32468;
                    /* Next insn is delay slot */ 
                    r31=0x147f0;
                    pc=0x14160;
                    run_14000(); return;
                case 0x147f0:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x148c0;
                    run_14800(); return;
                case 0x147f8:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r28 + -32544;
                case 0x14800:
                    pc=0x14800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14800() throws ExecutionException { /* 0x14800 - 0x14a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14800:
                    /* Next insn is delay slot */ 
                    r31=0x14808;
                    pc=0x14290;
                    run_14200(); return;
                case 0x14808:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14860;
                        continue;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r28 + -32540;
                    /* Next insn is delay slot */ 
                    r31=0x14820;
                    pc=0x14290;
                    run_14200(); return;
                case 0x14820:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14860;
                        continue;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r28 + -32528;
                    /* Next insn is delay slot */ 
                    r31=0x14838;
                    pc=0x14290;
                    run_14200(); return;
                case 0x14838:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14860;
                        continue;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r28 + -32524;
                    /* Next insn is delay slot */ 
                    r31=0x14850;
                    pc=0x14290;
                    run_14200(); return;
                case 0x14850:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14860;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14878;
                    continue;
                case 0x14860:
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x14870;
                    pc=0x1460c;
                    run_14600(); return;
                case 0x14870:
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x148c0;
                    continue;
                case 0x14878:
                    addr=r30+16;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x148a0;
                        continue;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r28 + -32464;
                    /* Next insn is delay slot */ 
                    r31=0x14898;
                    pc=0x21800;
                    run_21800(); return;
                case 0x14898:
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x148b4;
                    continue;
                case 0x148a0:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r28 + -32468;
                    /* Next insn is delay slot */ 
                    r31=0x148b0;
                    pc=0x21800;
                    run_21800(); return;
                case 0x148b0:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x148b4:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x148c0:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x148d8:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14958;
                        continue;
                    }
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19576)>>>12][((r2+-19576)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14958;
                        continue;
                    }
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14930;
                    pc=0x14070;
                    run_14000(); return;
                case 0x14930:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1494c;
                        continue;
                    }
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14944;
                    pc=0x25800;
                    run_25800(); return;
                case 0x14944:
                    /* Next insn is delay slot */ 
                    pc=0x14958;
                    continue;
                case 0x1494c:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14958;
                    pc=0x20400;
                    run_20400(); return;
                case 0x14958:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x1496c:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r30;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    r4 = r30 + 16;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x149a0;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x149a0:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x149cc;
                        continue;
                    }
                    r16 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x149c0;
                    pc=0x13cdc;
                    run_13c00(); return;
                case 0x149c0:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    pc=0x149d4;
                    continue;
                case 0x149cc:
                    r2 = r0 + 1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x149d4:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r30 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x149f0:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                case 0x14a00:
                    pc=0x14a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14a00() throws ExecutionException { /* 0x14a00 - 0x14c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14a00:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    r4 = r30 + 16;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14a20;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x14a20:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14a64;
                        continue;
                    }
                    r4 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14a3c;
                    pc=0x13cdc;
                    run_13c00(); return;
                case 0x14a3c:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f0;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    pc=0x14a6c;
                    continue;
                case 0x14a64:
                    r2 = r0 + 1;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x14a6c:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x14a84:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14aa8;
                    pc=0x13c94;
                    run_13c00(); return;
                case 0x14aa8:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = r30 + 16;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14ac4;
                    pc=0x23200;
                    run_23200(); return;
                case 0x14ac4:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14ae0;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x14ae4;
                    continue;
                case 0x14ae0:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x14ae4:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x14afc:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14b20;
                    pc=0x13c94;
                    run_13c00(); return;
                case 0x14b20:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r4 = r30 + 16;
                    r5 = r0 + 4;
                    r6 = r0 + 1;
                    r7 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x14b3c;
                    pc=0x23200;
                    run_23200(); return;
                case 0x14b3c:
                    r3 = r2 + r0;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x14b58;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x14b5c;
                    continue;
                case 0x14b58:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x14b5c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x14b74:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f13;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f12;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f15;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f14;
                    f3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x14bbc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14be0;
                    continue;
                case 0x14bbc:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x14c38;
                        run_14c00(); return;
                    }
                case 0x14be0:
                    f3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x14c0c;
                        run_14c00(); return;
                    }
                case 0x14c00:
                    pc=0x14c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14c00() throws ExecutionException { /* 0x14c00 - 0x14e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14c00:
                    /* Next insn is delay slot */ 
                    pc=0x14c50;
                    continue;
                case 0x14c0c:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x14c38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14c50;
                    continue;
                case 0x14c38:
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = f0;
                    pc=0x14c68;
                    continue;
                case 0x14c50:
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = f1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = f0;
                case 0x14c68:
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x14c80:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f13;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f12;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f15;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f14;
                    f3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x14cc8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14ce0;
                    continue;
                case 0x14cc8:
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = f0;
                    pc=0x14cf4;
                    continue;
                case 0x14ce0:
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = f1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = f0;
                case 0x14cf4:
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x14d0c:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f13;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f12;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f15;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f14;
                    f3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x14d54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14d6c;
                    continue;
                case 0x14d54:
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = f0;
                    pc=0x14d80;
                    continue;
                case 0x14d6c:
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = f1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = f0;
                case 0x14d80:
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x14d98:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14de8;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                case 0x14de8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x14dfc:
                    r29 = r29 + -16;
                case 0x14e00:
                    pc=0x14e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_14e00() throws ExecutionException { /* 0x14e00 - 0x15000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x14e00:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14e4c;
                        continue;
                    }
                    r4 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r4;
                case 0x14e4c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x14e60:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r6;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f64;
                        continue;
                    }
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ea0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14f64;
                    continue;
                case 0x14ea0:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x14ee4;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x14ee4:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x14ee8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x14f08;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x14f64;
                    continue;
                case 0x14f08:
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = f1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x14ee8;
                    continue;
                case 0x14f64:
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x14f74:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r6;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x151a4;
                        run_15000(); return;
                    }
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x151a4;
                        run_15000(); return;
                    }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x151a4;
                        run_15000(); return;
                    }
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x151a4;
                        run_15000(); return;
                    }
                    r3 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15084;
                        run_15000(); return;
                    }
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15084;
                        run_15000(); return;
                    }
                case 0x15000:
                    pc=0x15000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15000() throws ExecutionException { /* 0x15000 - 0x15200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15000:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x15004:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15024;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x151a4;
                    continue;
                case 0x15024:
                    r6 = r30 + 40;
                    r4 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r5 = r30 + 32;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = r2 + r0;
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 8;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = r4 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r4 = r4 + 8;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x15004;
                    continue;
                case 0x15084:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x150c8;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x150c8:
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1510c;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                case 0x1510c:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x15110:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15130;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x151a4;
                    continue;
                case 0x15130:
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = f1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x15110;
                    continue;
                case 0x151a4:
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x151b4:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r5;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r6;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x153b0;
                        run_15200(); return;
                    }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x153b0;
                        run_15200(); return;
                    }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15208;
                        run_15200(); return;
                    }
                case 0x15200:
                    pc=0x15200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15200() throws ExecutionException { /* 0x15200 - 0x15400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15200:
                    /* Next insn is delay slot */ 
                    pc=0x153b0;
                    continue;
                case 0x15208:
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15298;
                        continue;
                    }
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15298;
                        continue;
                    }
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x1522c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1524c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x153b0;
                    continue;
                case 0x1524c:
                    r5 = r30 + 28;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r4 = r30 + 20;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = r3 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r3 = r3 + 8;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x1522c;
                    continue;
                case 0x15298:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x152dc;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x152dc:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15320;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x15320:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x15324:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15344;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x153b0;
                    continue;
                case 0x15344:
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = f1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x15324;
                    continue;
                case 0x153b0:
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x153c0:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r6;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1540c;
                        run_15400(); return;
                    }
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1540c;
                        run_15400(); return;
                    }
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                case 0x15400:
                    pc=0x15400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15400() throws ExecutionException { /* 0x15400 - 0x15600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15400:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15418;
                        continue;
                    }
                case 0x1540c:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                    pc=0x15614;
                    run_15600(); return;
                case 0x15418:
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r0;
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x154d0;
                        continue;
                    }
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x154d0;
                        continue;
                    }
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x15444:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15464;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15600;
                    run_15600(); return;
                case 0x15464:
                    r7 = r30 + 36;
                    r5 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r6 = r30 + 44;
                    r2 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r3 = r5 + r0;
                    r4 = r2 + r0;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    f0 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 8;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r5 = r5 + 8;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r5;
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = f1;
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x15444;
                    continue;
                case 0x154d0:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15514;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                case 0x15514:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15558;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                case 0x15558:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x1555c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1557c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15600;
                    run_15600(); return;
                case 0x1557c:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    f0 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = f1;
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x1555c;
                    continue;
                case 0x15600:
                    pc=0x15600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15600() throws ExecutionException { /* 0x15600 - 0x15800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15600:
                    f1 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    f0 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                case 0x15614:
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x1562c:
                    r29 = r29 + -16;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r4;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r6;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15884;
                        run_15800(); return;
                    }
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15884;
                        run_15800(); return;
                    }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15884;
                        run_15800(); return;
                    }
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x15884;
                        run_15800(); return;
                    }
                    r3 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15750;
                        continue;
                    }
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15750;
                        continue;
                    }
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x156bc:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x156dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15884;
                    run_15800(); return;
                case 0x156dc:
                    r6 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r4 = r30 + 32;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + r0;
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    f0 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r2 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = f1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x156bc;
                    continue;
                case 0x15750:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15794;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x15794:
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x157d8;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                case 0x157d8:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x157dc:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x157fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15884;
                    run_15800(); return;
                case 0x157fc:
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                case 0x15800:
                    pc=0x15800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15800() throws ExecutionException { /* 0x15800 - 0x15a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15800:
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x157dc;
                    run_15600(); return;
                case 0x15884:
                    r29 = r30 + r0;
                    r30 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 16;
                    pc=r31;
                    return;
                case 0x15894:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r5;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r6;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15b2c;
                    run_15a00(); return;
                case 0x158cc:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x158d8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x158f8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15afc;
                    run_15a00(); return;
                case 0x158f8:
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x15918:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ae8;
                        run_15a00(); return;
                    }
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x15984;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15ae8;
                    run_15a00(); return;
                case 0x15984:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                case 0x15a00:
                    pc=0x15a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15a00() throws ExecutionException { /* 0x15a00 - 0x15c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15a00:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x15918;
                    run_15800(); return;
                case 0x15ae8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x158d8;
                    run_15800(); return;
                case 0x15afc:
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 >> 31;
                    r2 = r2 >>> 31;
                    r2 = r3 + r2;
                    r2 = r2 >> 1;
                    r4 = r2 + r0;
                    r5 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r6 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r7 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x15b2c;
                    pc=0x15894;
                    run_15800(); return;
                case 0x15b2c:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x15b40:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r5;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r6;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15dac;
                        run_15c00(); return;
                    }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15dac;
                        run_15c00(); return;
                    }
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15b94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15dac;
                    run_15c00(); return;
                case 0x15b94:
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15c60;
                        run_15c00(); return;
                    }
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15c60;
                        run_15c00(); return;
                    }
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x15bb8:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15bd8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15dac;
                    run_15c00(); return;
                case 0x15bd8:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = f1;
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = f0;
                    r5 = r30 + 36;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                case 0x15c00:
                    pc=0x15c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15c00() throws ExecutionException { /* 0x15c00 - 0x15e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15c00:
                    r4 = r2 + r0;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = r2 + 8;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r4 = r30 + 28;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + r0;
                    f1 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    f0 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = f1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = f0;
                    r2 = r2 + 8;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x15bb8;
                    run_15a00(); return;
                case 0x15c60:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ca4;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x15ca4:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ce8;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                case 0x15ce8:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x15cec:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15d0c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15dac;
                    continue;
                case 0x15d0c:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = f1;
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = f1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    f0 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x15cec;
                    continue;
                case 0x15dac:
                    r29 = r30 + r0;
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x15dbc:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r5;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r6;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15df0;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x15f8c;
                    run_15e00(); return;
                case 0x15df0:
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x15e08;
                        run_15e00(); return;
                    }
                case 0x15e00:
                    pc=0x15e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_15e00() throws ExecutionException { /* 0x15e00 - 0x16000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x15e00:
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                    pc=0x15f8c;
                    continue;
                case 0x15e08:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e24;
                        continue;
                    }
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x15f8c;
                    continue;
                case 0x15e24:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x15e5c;
                        continue;
                    }
                    r3 = r0 + 1;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x15e60;
                    continue;
                case 0x15e5c:
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x15e60:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    r2 = r0 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                case 0x15eb0:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x15ed0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15f80;
                    continue;
                case 0x15ed0:
                    r3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x15f4c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x15f6c;
                    continue;
                case 0x15f4c:
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r2;
                case 0x15f6c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    pc=0x15eb0;
                    continue;
                case 0x15f80:
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x15f8c:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x15fa0:
                    r29 = r29 + -56;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r4;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r5;
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r6;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = readPages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff];
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                case 0x16000:
                    pc=0x16000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16000() throws ExecutionException { /* 0x16000 - 0x16200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16000:
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19128)>>>12][((r2+-19128)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r1 = 5 << 16;
                    writePages[(r1+-19128)>>>12][((r1+-19128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r4 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x16044;
                    pc=0x2e5ec;
                    run_2e400(); return;
                case 0x16044:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                case 0x16048:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1606c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x160a0;
                    continue;
                case 0x1606c:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x16048;
                    continue;
                case 0x160a0:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                case 0x160a4:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x160c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16218;
                    run_16200(); return;
                case 0x160c8:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x16114:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16134;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x161f4;
                    continue;
                case 0x16134:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x16114;
                    continue;
                case 0x161f4:
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r2 + 8;
                case 0x16200:
                    pc=0x16200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16200() throws ExecutionException { /* 0x16200 - 0x16400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16200:
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x160a4;
                    run_16000(); return;
                case 0x16218:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                case 0x1621c:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16364;
                    continue;
                case 0x16240:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x1628c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x162ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16340;
                    continue;
                case 0x162ac:
                    r6 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r4 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    f2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = f1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x1628c;
                    continue;
                case 0x16340:
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x1621c;
                    continue;
                case 0x16364:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x16378:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r5;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r6;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff];
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19128)>>>12][((r2+-19128)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r1 = 5 << 16;
                    writePages[(r1+-19128)>>>12][((r1+-19128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                case 0x16400:
                    pc=0x16400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16400() throws ExecutionException { /* 0x16400 - 0x16600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16400:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x1640c;
                    pc=0x2e5ec;
                    run_2e400(); return;
                case 0x1640c:
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x16410:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16434;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16588;
                    continue;
                case 0x16434:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x16480:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x164a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16574;
                    continue;
                case 0x164a0:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    f0 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = f1;
                    writePages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x16480;
                    continue;
                case 0x16574:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x16410;
                    continue;
                case 0x16588:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x1659c:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16714;
                        run_16600(); return;
                    }
                    r2 = 16384 << 16;
                    writePages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff] = r2;
                    f0 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r28+-31712)>>>12][((r28+-31712)>>>2)&0x3ff] = f1;
                    writePages[(r28+-31708)>>>12][((r28+-31708)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r28+-32456)>>>12][((r28+-32456)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32452)>>>12][((r28+-32452)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x165f0;
                    pc=0x1e600;
                    run_1e600(); return;
                case 0x165f0:
                    f2 = f0;
                    f3 = f1;
                    f1 = readPages[(r28+-31712)>>>12][((r28+-31712)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31708)>>>12][((r28+-31708)>>>2)&0x3ff];
                case 0x16600:
                    pc=0x16600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16600() throws ExecutionException { /* 0x16600 - 0x16800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16600:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32448)>>>12][((r28+-32448)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32444)>>>12][((r28+-32444)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    r2 = f0;
                    r2 = r2 << 3;
                    r2 = r2 + 5;
                    writePages[(r28+-31728)>>>12][((r28+-31728)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r28+-32440)>>>12][((r28+-32440)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32436)>>>12][((r28+-32436)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x16664;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x16664:
                    f2 = f0;
                    f3 = f1;
                    f1 = readPages[(r28+-32432)>>>12][((r28+-32432)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32428)>>>12][((r28+-32428)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32424)>>>12][((r28+-32424)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32420)>>>12][((r28+-32420)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-31712)>>>12][((r28+-31712)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31708)>>>12][((r28+-31708)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    r2 = f0;
                    r2 = r2 << 1;
                    r2 = r2 + 1;
                    writePages[(r28+-31724)>>>12][((r28+-31724)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31724)>>>12][((r28+-31724)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r28+-31720)>>>12][((r28+-31720)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r28+-32424)>>>12][((r28+-32424)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32420)>>>12][((r28+-32420)>>>2)&0x3ff];
                    f1 = readPages[(r28+-31712)>>>12][((r28+-31712)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31708)>>>12][((r28+-31708)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r28+-31704)>>>12][((r28+-31704)>>>2)&0x3ff] = f1;
                    writePages[(r28+-31700)>>>12][((r28+-31700)>>>2)&0x3ff] = f0;
                case 0x16714:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31728)>>>12][((r28+-31728)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31720)>>>12][((r28+-31720)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16784;
                        continue;
                    }
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x16784:
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31724)>>>12][((r28+-31724)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 >> 31;
                    r2 = r2 >>> 31;
                    r2 = r3 + r2;
                    r3 = r2 >> 1;
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16804;
                        run_16800(); return;
                    }
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r2 = r3 - r2;
                case 0x16800:
                    pc=0x16800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16800() throws ExecutionException { /* 0x16800 - 0x16a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16800:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x16804:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16848;
                        continue;
                    }
                    r4 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r28+-31732)>>>12][((r28+-31732)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x16848:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-31704)>>>12][((r28+-31704)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31700)>>>12][((r28+-31700)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x16880:
                    r29 = r29 + -72;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f13;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f12;
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f15;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f14;
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f12 = f2;
                    f13 = f3;
                    /* Next insn is delay slot */ 
                    f14 = f0;
                    f15 = f1;
                    r31=0x168cc;
                    pc=0x14c80;
                    run_14c00(); return;
                case 0x168cc:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x16900;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16a90;
                    run_16a00(); return;
                case 0x16900:
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f12 = f2;
                    f13 = f3;
                    /* Next insn is delay slot */ 
                    f14 = f0;
                    f15 = f1;
                    r31=0x1692c;
                    pc=0x14d0c;
                    run_14c00(); return;
                case 0x1692c:
                    f2 = f0;
                    f3 = f1;
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = f1;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = f0;
                case 0x16988:
                    f3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x169b4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16a90;
                    run_16a00(); return;
                case 0x169b4:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32408)>>>12][((r28+-32408)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32404)>>>12][((r28+-32404)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                case 0x16a00:
                    pc=0x16a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16a00() throws ExecutionException { /* 0x16a00 - 0x16c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16a00:
                    f2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32416)>>>12][((r28+-32416)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32412)>>>12][((r28+-32412)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = f0;
                    pc=0x16988;
                    run_16800(); return;
                case 0x16a90:
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x16aac:
                    r29 = r29 + -32;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r4;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r5;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r6;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r0;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x16af8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16b04;
                    continue;
                case 0x16af8:
                    r2 = r0 + 2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x16b04:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16b28;
                        continue;
                    }
                    r2 = r0 + 3;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x16b28:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16b60;
                        continue;
                    }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16b60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16b6c;
                    continue;
                case 0x16b60:
                    r2 = r0 + 4;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x16b6c:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16bbc;
                        continue;
                    }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16bbc;
                        continue;
                    }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16bbc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16bc8;
                    continue;
                case 0x16bbc:
                    r2 = r0 + 5;
                    /* Next insn is delay slot */ 
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x16bc8:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16bf8;
                        continue;
                    }
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16bf8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16c00;
                    run_16c00(); return;
                case 0x16bf8:
                    r2 = r0 + 6;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                case 0x16c00:
                    pc=0x16c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16c00() throws ExecutionException { /* 0x16c00 - 0x16e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16c00:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16c3c;
                        continue;
                    }
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = 5 << 16;
                    r2 = r2 + -22280;
                    r2 = r3 + r2;
                    r4 = 5 << 16;
                    r4 = r4 + -29516;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16c3c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x16c3c:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r30 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x16c54:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r4;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r5;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r6;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r7;
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -29484;
                    r31=0x16c80;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16c80:
                    r4 = 5 << 16;
                    r4 = r4 + -29448;
                    r5 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16c94;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16c94:
                    r4 = 5 << 16;
                    r4 = r4 + -29412;
                    r5 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16ca8;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16ca8:
                    r4 = 5 << 16;
                    r4 = r4 + -29376;
                    r5 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16cbc;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16cbc:
                    f0 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                     // CVS.S.W
                    f2=Float.floatToRawIntBits(((float)f0));
                    f0 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                     // CVS.S.W
                    f0=Float.floatToRawIntBits(((float)f0));
                    f2=Float.floatToRawIntBits((Float.intBitsToFloat(f2))/(Float.intBitsToFloat(f0)));
                    f0 = readPages[(r28+-32392)>>>12][((r28+-32392)>>>2)&0x3ff];
                    f2=Float.floatToRawIntBits((Float.intBitsToFloat(f2))*(Float.intBitsToFloat(f0)));
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                     // CVS.S.W
                    f0=Float.floatToRawIntBits(((float)f0));
                    f0=Float.floatToRawIntBits((Float.intBitsToFloat(f2))/(Float.intBitsToFloat(f0)));
                    { long l = Double.doubleToLongBits((float)(Float.intBitsToFloat(f0))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = 5 << 16;
                    r4 = r4 + -29340;
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x16d10;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16d10:
                    r4 = 5 << 16;
                    r4 = r4 + -29300;
                    r5 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16d24;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16d24:
                    r4 = 5 << 16;
                    r4 = r4 + -29264;
                    r5 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16d38;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16d38:
                    r4 = 5 << 16;
                    r4 = r4 + -29228;
                    r6 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r7 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16d50;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16d50:
                    r4 = 5 << 16;
                    r4 = r4 + -29192;
                    r6 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r7 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16d68;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16d68:
                    r4 = 5 << 16;
                    r4 = r4 + -29156;
                    r6 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r7 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16d80;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16d80:
                    r4 = r28 + -32396;
                    /* Next insn is delay slot */ 
                    r31=0x16d8c;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x16d8c:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r30 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x16da0:
                    r29 = r29 + -64;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r4;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r5;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-29120)>>>12][((r2+-29120)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-29116)>>>12][((r2+-29116)>>>2)&0x3ff];
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-29112)>>>12][((r2+-29112)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-29108)>>>12][((r2+-29108)>>>2)&0x3ff];
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r28+-32384)>>>12][((r28+-32384)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32380)>>>12][((r28+-32380)>>>2)&0x3ff];
                case 0x16e00:
                    pc=0x16e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_16e00() throws ExecutionException { /* 0x16e00 - 0x17000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x16e00:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = f1;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16e30;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -29104;
                    r31=0x16e28;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x16e28:
                    /* Next insn is delay slot */ 
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r0;
                    pc=0x16e5c;
                    continue;
                case 0x16e30:
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r4 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r5 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r30 + 24;
                    r31=0x16e58;
                    pc=0x16e74;
                    continue;
                case 0x16e58:
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                case 0x16e5c:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x16e74:
                    r29 = r29 + -184;
                    writePages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff] = r31;
                    writePages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff] = r30;
                    writePages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff] = r16;
                    r30 = r29 + r0;
                    writePages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff] = r4;
                    writePages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff] = r5;
                    writePages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff] = r6;
                    writePages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff] = r7;
                    addr=r30+56;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r0;
                    r31=0x16ea4;
                    pc=0x10cd8;
                    run_10c00(); return;
                case 0x16ea4:
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r3 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x16ebc;
                    pc=0x14dfc;
                    run_14c00(); return;
                case 0x16ebc:
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ef0;
                        continue;
                    }
                    r2 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    r3 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16ef0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16efc;
                    continue;
                case 0x16ef0:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff] = r2;
                case 0x16efc:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f2c;
                        continue;
                    }
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r3 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x16f38;
                    continue;
                case 0x16f2c:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff] = r2;
                case 0x16f38:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r3 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x16f5c;
                        continue;
                    }
                    r2 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    writePages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff] = r2;
                case 0x16f5c:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x17004;
                        run_17000(); return;
                    }
                    r3 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r2 = r0 + 1;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    f0 = readPages[(r30+204)>>>12][((r30+204)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17004;
                    pc=0x16c54;
                    run_16c00(); return;
                case 0x17000:
                    pc=0x17000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17000() throws ExecutionException { /* 0x17000 - 0x17200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17000:
                case 0x17004:
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f0;
                    r2 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r5 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    r6 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1705c;
                    pc=0x16aac;
                    run_16a00(); return;
                case 0x1705c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1706c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff] = r0;
                    pc=0x17bc8;
                    run_17a00(); return;
                case 0x1706c:
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f0)); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    f0 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32368)>>>12][((r28+-32368)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32364)>>>12][((r28+-32364)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x170bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x170f4;
                    continue;
                case 0x170bc:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x170dc;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -29068;
                    r31=0x170dc;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x170dc:
                    r2 = r0 + 1;
                    addr=r30+56;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x170f0;
                    pc=0x11a2c;
                    run_11a00(); return;
                case 0x170f0:
                    writePages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff] = r2;
                case 0x170f4:
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = r2;
                    r3 = r30 + 60;
                    r5 = r30 + 64;
                    r6 = r30 + 68;
                    r7 = r30 + 72;
                    r2 = r30 + 76;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r3 + r0;
                    r31=0x17128;
                    pc=0x1cc0c;
                    run_1cc00(); return;
                case 0x17128:
                    f0 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x1713c;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x1713c:
                    f2 = f0;
                    f3 = f1;
                    f1 = readPages[(r28+-31576)>>>12][((r28+-31576)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31572)>>>12][((r28+-31572)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff] = f1;
                    writePages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff] = f0;
                    f13 = readPages[(r28+-31576)>>>12][((r28+-31576)>>>2)&0x3ff];
                    f12 = readPages[(r28+-31572)>>>12][((r28+-31572)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17168;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x17168:
                    writePages[(r28+-31608)>>>12][((r28+-31608)>>>2)&0x3ff] = f1;
                    writePages[(r28+-31604)>>>12][((r28+-31604)>>>2)&0x3ff] = f0;
                    f13 = readPages[(r28+-31608)>>>12][((r28+-31608)>>>2)&0x3ff];
                    f12 = readPages[(r28+-31604)>>>12][((r28+-31604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17180;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x17180:
                    f2 = f0;
                    f3 = f1;
                    f1 = readPages[(r28+-31608)>>>12][((r28+-31608)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31604)>>>12][((r28+-31604)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r28+-31616)>>>12][((r28+-31616)>>>2)&0x3ff] = f1;
                    writePages[(r28+-31612)>>>12][((r28+-31612)>>>2)&0x3ff] = f0;
                    r4 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -29032;
                    r31=0x171b0;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x171b0:
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x171cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x171cc:
                    r4 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -29016;
                    r31=0x171e0;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x171e0:
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x171fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x171fc:
                    r4 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                case 0x17200:
                    pc=0x17200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17200() throws ExecutionException { /* 0x17200 - 0x17400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17200:
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -29000;
                    r31=0x17210;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17210:
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1722c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x1722c:
                    r4 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28984;
                    r31=0x17240;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17240:
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1725c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x1725c:
                    r4 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28968;
                    r31=0x17270;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17270:
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1728c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x1728c:
                    r4 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28952;
                    r31=0x172a0;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x172a0:
                    writePages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x172bc:
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28936;
                    r31=0x172d0;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x172d0:
                    writePages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x172ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x172ec:
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28920;
                    r31=0x17300;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17300:
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1731c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x1731c:
                    r4 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28904;
                    r31=0x17330;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17330:
                    writePages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1734c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x1734c:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r2 + r0;
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28888;
                    r31=0x1736c;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x1736c:
                    writePages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17388;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x17388:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r2 + r0;
                    r5 = r0 + 1;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28872;
                    r31=0x173a8;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x173a8:
                    writePages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x173c4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x173c4:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r2 + r0;
                    r5 = r0 + 1;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28860;
                    r31=0x173e4;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x173e4:
                    writePages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17400;
                        run_17400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x17400:
                    pc=0x17400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17400() throws ExecutionException { /* 0x17400 - 0x17600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17400:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r2 = r2 << 3;
                    r2 = r2 + 8;
                    r4 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r5 = r0 + 127;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x17420;
                    pc=0x2e5ec;
                    run_2e400(); return;
                case 0x17420:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 4;
                    r31=0x17438;
                    pc=0x1fc00;
                    run_1fc00(); return;
                case 0x17438:
                    writePages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17454;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x17454:
                    r2 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28848;
                    r31=0x17470;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17470:
                    writePages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1748c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17bb8;
                    run_17a00(); return;
                case 0x1748c:
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r30 + 104;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r30 + 96;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r5 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r6 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17510;
                    pc=0x18584;
                    run_18400(); return;
                case 0x17510:
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1754c;
                        continue;
                    }
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = 5 << 16;
                    r4 = r4 + -28832;
                    r5 = r2 + r0;
                    r6 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1754c;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x1754c:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17610;
                        run_17600(); return;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28764;
                    r31=0x17570;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x17570:
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r0;
                case 0x17574:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17594;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17610;
                    run_17600(); return;
                case 0x17594:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r5 = r2 + 1;
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r4 = 5 << 16;
                    r4 = r4 + -28724;
                    r7 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x175fc;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x175fc:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                case 0x17600:
                    pc=0x17600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17600() throws ExecutionException { /* 0x17600 - 0x17800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17600:
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                    pc=0x17574;
                    run_17400(); return;
                case 0x17610:
                    r2 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17630;
                        continue;
                    }
                    r4 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1762c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x1762c:
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r0;
                case 0x17630:
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17650;
                        continue;
                    }
                    r4 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1764c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x1764c:
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r0;
                case 0x17650:
                    r2 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17670;
                        continue;
                    }
                    r4 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1766c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x1766c:
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = r0;
                case 0x17670:
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17690;
                        continue;
                    }
                    r4 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1768c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x1768c:
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r0;
                case 0x17690:
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x176b0;
                        continue;
                    }
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x176ac;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x176ac:
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = r0;
                case 0x176b0:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x176d0;
                        continue;
                    }
                    r4 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x176cc;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x176cc:
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r0;
                case 0x176d0:
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x176f0;
                        continue;
                    }
                    r4 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x176ec;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x176ec:
                    writePages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff] = r0;
                case 0x176f0:
                    f1 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    f0 = readPages[(r30+204)>>>12][((r30+204)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f12 = f0;
                    f13 = f1;
                    f15 = readPages[(r28+-31616)>>>12][((r28+-31616)>>>2)&0x3ff];
                    f14 = readPages[(r28+-31612)>>>12][((r28+-31612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17714;
                    pc=0x14c80;
                    run_14c00(); return;
                case 0x17714:
                    writePages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+204)>>>12][((r30+204)>>>2)&0x3ff] = f0;
                    r31=0x17720;
                    pc=0x112c8;
                    run_11200(); return;
                case 0x17720:
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17748;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28696;
                    r31=0x17740;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x17740:
                    /* Next insn is delay slot */ 
                    pc=0x1796c;
                    run_17800(); return;
                case 0x17748:
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r3 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17774;
                    pc=0x10d3c;
                    run_10c00(); return;
                case 0x17774:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28664;
                    r31=0x17798;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17798:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r16 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r3 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x177b8;
                    pc=0x10d3c;
                    run_10c00(); return;
                case 0x177b8:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17804;
                        run_17800(); return;
                    }
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17804;
                        run_17800(); return;
                    }
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17818;
                        run_17800(); return;
                    }
                case 0x17800:
                    pc=0x17800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17800() throws ExecutionException { /* 0x17800 - 0x17a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17800:
                case 0x17804:
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28696;
                    r31=0x17810;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x17810:
                    /* Next insn is delay slot */ 
                    pc=0x1796c;
                    continue;
                case 0x17818:
                    f1 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    f0 = readPages[(r30+204)>>>12][((r30+204)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r5 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    r6 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17894;
                    pc=0x17db0;
                    run_17c00(); return;
                case 0x17894:
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17940;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28652;
                    r31=0x178bc;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x178bc:
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r28 + -32376;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x178d8;
                    pc=0x11dcc;
                    run_11c00(); return;
                case 0x178d8:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1796c;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28632;
                    r31=0x178fc;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x178fc:
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r5 = r28 + -32376;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 3;
                    r31=0x17914;
                    pc=0x13ae0;
                    run_13a00(); return;
                case 0x17914:
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28588;
                    r31=0x17920;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x17920:
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r5 = r28 + -32376;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 3;
                    r31=0x17938;
                    pc=0x13ae0;
                    run_13a00(); return;
                case 0x17938:
                    /* Next insn is delay slot */ 
                    pc=0x1796c;
                    continue;
                case 0x17940:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-20188)>>>12][((r2+-20188)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1796c;
                        continue;
                    }
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r4 = 5 << 16;
                    r4 = r4 + -28544;
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1796c;
                    pc=0x25c00;
                    run_25c00(); return;
                case 0x1796c:
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r0;
                case 0x17970:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r2 < 10 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1798c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17a08;
                    run_17a00(); return;
                case 0x1798c:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = r30 + 56;
                    r2 = r3 + r2;
                    r2 = r2 + 48;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x179f4;
                        continue;
                    }
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = r30 + 56;
                    r2 = r3 + r2;
                    r2 = r2 + 48;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x179d8;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x179d8:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = r30 + 56;
                    r2 = r3 + r2;
                    r2 = r2 + 48;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                case 0x179f4:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r2 + 1;
                case 0x17a00:
                    pc=0x17a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17a00() throws ExecutionException { /* 0x17a00 - 0x17c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17a00:
                    /* Next insn is delay slot */ 
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                    pc=0x17970;
                    run_17800(); return;
                case 0x17a08:
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17a28;
                        continue;
                    }
                    r4 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17a24;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x17a24:
                    writePages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff] = r0;
                case 0x17a28:
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17a48;
                        continue;
                    }
                    r4 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17a44;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x17a44:
                    writePages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff] = r0;
                case 0x17a48:
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17b20;
                        continue;
                    }
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r0;
                case 0x17a5c:
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r3 = r2 + 2;
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17a84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17b00;
                    continue;
                case 0x17a84:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17aec;
                        continue;
                    }
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17ad0;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x17ad0:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                case 0x17aec:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                    pc=0x17a5c;
                    continue;
                case 0x17b00:
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17b20;
                        continue;
                    }
                    r4 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17b1c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x17b1c:
                    writePages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff] = r0;
                case 0x17b20:
                    r2 = readPages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17b40;
                        continue;
                    }
                    r4 = readPages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17b3c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x17b3c:
                    writePages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff] = r0;
                case 0x17b40:
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ba8;
                        continue;
                    }
                    addr=r30+56;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17ba8;
                        continue;
                    }
                    r4 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17b6c;
                    pc=0x111d4;
                    run_11000(); return;
                case 0x17b6c:
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                case 0x17ba8:
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff] = r2;
                    pc=0x17bc8;
                    continue;
                case 0x17bb8:
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28508;
                    r31=0x17bc4;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x17bc4:
                    writePages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff] = r0;
                case 0x17bc8:
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+176)>>>12][((r29+176)>>>2)&0x3ff];
                    r30 = readPages[(r29+172)>>>12][((r29+172)>>>2)&0x3ff];
                    r16 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 184;
                    pc=r31;
                    return;
                case 0x17be4:
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r4;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r5;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r6;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                case 0x17c00:
                    pc=0x17c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17c00() throws ExecutionException { /* 0x17c00 - 0x17e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17c00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17c14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17da0;
                    continue;
                case 0x17c14:
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r0;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r0;
                case 0x17c3c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r3 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17c5c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17da0;
                    continue;
                case 0x17c5c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17c8c;
                        continue;
                    }
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r3;
                    pc=0x17cb4;
                    continue;
                case 0x17c8c:
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r3 - r2;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r3;
                case 0x17cb4:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x17d8c;
                        continue;
                    }
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = r2;
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                case 0x17d8c:
                    r2 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r2;
                    pc=0x17c3c;
                    continue;
                case 0x17da0:
                    r29 = r30 + r0;
                    r30 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x17db0:
                    r29 = r29 + -120;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r31;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r30;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r16;
                    r30 = r29 + r0;
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = r4;
                    writePages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff] = r5;
                    writePages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff] = r6;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r2 + 1;
                case 0x17e00:
                    pc=0x17e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_17e00() throws ExecutionException { /* 0x17e00 - 0x18000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x17e00:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28476;
                    r31=0x17e30;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17e30:
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28464;
                    r31=0x17e48;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x17e48:
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r2;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                case 0x17e50:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17e70;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x17eb8;
                    continue;
                case 0x17e70:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r28+-32360)>>>12][((r28+-32360)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32356)>>>12][((r28+-32356)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x17e50;
                    continue;
                case 0x17eb8:
                    r2 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17ed8;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x17ed8:
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r3 = r2 + 8;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r7 = r2 + 8;
                    r2 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r5 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x17f08;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x17f08:
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r5 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r6 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r7 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x17f2c;
                    pc=0x1bf80;
                    run_1be00(); return;
                case 0x17f2c:
                    r2 = readPages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f44;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r0;
                    pc=0x18568;
                    run_18400(); return;
                case 0x17f44:
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r0;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                case 0x17f64:
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x17f84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x181cc;
                    run_18000(); return;
                case 0x17f84:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    f0 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x18004;
                        run_18000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x181a8;
                    run_18000(); return;
                case 0x18000:
                    pc=0x18000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18000() throws ExecutionException { /* 0x18000 - 0x18200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18000:
                case 0x18004:
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    r3 = r2 + -1;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x181a8;
                        continue;
                    }
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                        pc=0x18058;
                        continue;
                    }
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                case 0x18058:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                case 0x1808c:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x180ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x180e0;
                    continue;
                case 0x180ac:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x1808c;
                    continue;
                case 0x180e0:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                case 0x180e4:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18104;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18198;
                    continue;
                case 0x18104:
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    r6 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r7 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1811c;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x1811c:
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18170;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x18170:
                    r3 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x180e4;
                    continue;
                case 0x18198:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                case 0x181a8:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    pc=0x17f64;
                    run_17e00(); return;
                case 0x181cc:
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x181ec;
                        continue;
                    }
                    r4 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x181e8;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x181e8:
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r0;
                case 0x181ec:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                case 0x18200:
                    pc=0x18200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18200() throws ExecutionException { /* 0x18200 - 0x18400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18200:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r3 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r3 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x18258;
                    pc=0x17be4;
                    run_17a00(); return;
                case 0x18258:
                    r16 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18274;
                    pc=0x14dfc;
                    run_14c00(); return;
                case 0x18274:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                case 0x1827c:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r3 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x182a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1853c;
                    run_18400(); return;
                case 0x182a0:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r7 = readPages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x182dc;
                    pc=0x15fa0;
                    run_15e00(); return;
                case 0x182dc:
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18320;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x18320:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x18398;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x18398:
                    f13 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f12 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x183a8;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x183a8:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r5 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x183d0;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x183d0:
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x183d8;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x183d8:
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                case 0x18400:
                    pc=0x18400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18400() throws ExecutionException { /* 0x18400 - 0x18600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18400:
                    r5 = r3 + r2;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r5 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1843c;
                    pc=0x16378;
                    run_16200(); return;
                case 0x1843c:
                    f3 = readPages[(r28+-32360)>>>12][((r28+-32360)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32356)>>>12][((r28+-32356)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    r5 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    r7 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x184ac;
                    pc=0x14e60;
                    run_14e00(); return;
                case 0x184ac:
                    f3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r4 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                    pc=0x1827c;
                    run_18200(); return;
                case 0x1853c:
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1855c;
                        continue;
                    }
                    r4 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18558;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x18558:
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r0;
                case 0x1855c:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r2;
                case 0x18568:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r30 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r16 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x18584:
                    r29 = r29 + -160;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r31;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff] = r4;
                    writePages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff] = r5;
                    writePages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff] = r6;
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r0;
                    writePages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    r2 = r2 + 24;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    r2 = r2 + 28;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    r2 = r2 + 32;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    r2 = r2 + 36;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x18600:
                    pc=0x18600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18600() throws ExecutionException { /* 0x18600 - 0x18800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18600:
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    r2 = r2 + 20;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r2;
                    r3 = r30 + 80;
                    r7 = r30 + 88;
                    r2 = readPages[(r30+208)>>>12][((r30+208)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r5 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r3 + r0;
                    r31=0x18644;
                    pc=0x1a2e4;
                    run_1a200(); return;
                case 0x18644:
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x18680;
                        continue;
                    }
                    r2 = readPages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18680;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18688;
                    continue;
                case 0x18680:
                    /* Next insn is delay slot */ 
                    writePages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff] = r0;
                    pc=0x18e00;
                    run_18e00(); return;
                case 0x18688:
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r0;
                    r2 = r0 + 1;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r2;
                    r4 = r0 + 8;
                    r5 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x186d4;
                    pc=0x14d98;
                    run_14c00(); return;
                case 0x186d4:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + r0;
                    r5 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x186f4;
                    pc=0x14dfc;
                    run_14c00(); return;
                case 0x186f4:
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r0;
                case 0x186fc:
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18714;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18dd0;
                    run_18c00(); return;
                case 0x18714:
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x18740;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18748;
                    continue;
                case 0x18740:
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = r0;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r0;
                case 0x18748:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = r30 + 96;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r30 + 108;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r30 + 80;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r2 = r30 + 88;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+208)>>>12][((r30+208)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r5 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r6 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r7 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x187bc;
                    pc=0x18e18;
                    run_18e00(); return;
                case 0x187bc:
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x187e4;
                        continue;
                    }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r2;
                    pc=0x187f4;
                    continue;
                case 0x187e4:
                    r2 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r2;
                case 0x187f4:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 1;
                case 0x18800:
                    pc=0x18800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18800() throws ExecutionException { /* 0x18800 - 0x18a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18800:
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    writePages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff] = r0;
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = r0;
                case 0x1883c:
                    r2 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1885c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18bfc;
                    run_18a00(); return;
                case 0x1885c:
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1887c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18bfc;
                    run_18a00(); return;
                case 0x1887c:
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = r2;
                case 0x18888:
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x188a8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x188fc;
                    continue;
                case 0x188a8:
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x188fc;
                        continue;
                    }
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = r2;
                    pc=0x18888;
                    continue;
                case 0x188fc:
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18920;
                        continue;
                    }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = r2;
                case 0x18920:
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    r4 = r2 + 1;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r7 = r3 + r0;
                    r31=0x18978;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x18978:
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r4 = r3 - r2;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r5 = r2 + 8;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 + 8;
                    r2 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r6 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r7 = r3 + r0;
                    r31=0x189d4;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x189d4:
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    r4 = r2 + 1;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r5 = r3 + r2;
                case 0x18a00:
                    pc=0x18a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18a00() throws ExecutionException { /* 0x18a00 - 0x18c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18a00:
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    r7 = r2 + r0;
                    r31=0x18a38;
                    pc=0x1b3fc;
                    run_1b200(); return;
                case 0x18a38:
                    r2 = readPages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b40;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -28452;
                    r5 = readPages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18a5c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x18a5c:
                    r4 = 5 << 16;
                    r4 = r4 + -28400;
                    r5 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r6 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18a74;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x18a74:
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r2;
                case 0x18a80:
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18aa0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18b40;
                    continue;
                case 0x18aa0:
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r6 = r3 + r2;
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f0;
                    r4 = 5 << 16;
                    r4 = r4 + -28380;
                    r5 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r7 = readPages[(r6+4)>>>12][((r6+4)>>>2)&0x3ff];
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18b2c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x18b2c:
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r2;
                    pc=0x18a80;
                    continue;
                case 0x18b40:
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r2;
                case 0x18b4c:
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18b6c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18bd8;
                    continue;
                case 0x18b6c:
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r2;
                    pc=0x18b4c;
                    continue;
                case 0x18bd8:
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = r2;
                    pc=0x1883c;
                    run_18800(); return;
                case 0x18bfc:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                case 0x18c00:
                    pc=0x18c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18c00() throws ExecutionException { /* 0x18c00 - 0x18e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18c00:
                    r3 = r2 + 1;
                    r2 = r3 >> 31;
                    r2 = r2 >>> 31;
                    r2 = r3 + r2;
                    r3 = r2 >> 1;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r3 + r0;
                    r5 = r2 + r0;
                    r6 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    r7 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18c3c;
                    pc=0x15894;
                    run_15800(); return;
                case 0x18c3c:
                    r3 = r30 + 108;
                    f1 = readPages[(r30+184)>>>12][((r30+184)>>>2)&0x3ff];
                    f0 = readPages[(r30+188)>>>12][((r30+188)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = f1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+192)>>>12][((r30+192)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+196)>>>12][((r30+196)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = f1;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    r4 = r3 + r0;
                    r6 = readPages[(r30+176)>>>12][((r30+176)>>>2)&0x3ff];
                    r7 = readPages[(r30+180)>>>12][((r30+180)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18ca0;
                    pc=0x1abb0;
                    run_1aa00(); return;
                case 0x18ca0:
                    writePages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+204)>>>12][((r30+204)>>>2)&0x3ff];
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d7c;
                        continue;
                    }
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18cfc;
                        continue;
                    }
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r2 + 9;
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff] = r2;
                    pc=0x18d64;
                    continue;
                case 0x18cfc:
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r4 = r3 - r2;
                    r3 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    { long hilo = (long)(r4) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    hi = r3%r2; lo = r3/r2;
                    r3 = lo;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18d40;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x18d40:
                    r2 = r3 + 1;
                    r4 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x18d50;
                    pc=0x14d98;
                    run_14c00(); return;
                case 0x18d50:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                case 0x18d64:
                    r4 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r5 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18d74;
                    pc=0x14dfc;
                    run_14c00(); return;
                case 0x18d74:
                    /* Next insn is delay slot */ 
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                    pc=0x18d84;
                    continue;
                case 0x18d7c:
                    r2 = r0 + 1;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r2;
                case 0x18d84:
                    writePages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18db8;
                        continue;
                    }
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18db8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x18dc0;
                    continue;
                case 0x18db8:
                    r2 = r0 + 1;
                    writePages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff] = r2;
                case 0x18dc0:
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r2;
                    pc=0x186fc;
                    run_18600(); return;
                case 0x18dd0:
                    r2 = readPages[(r30+200)>>>12][((r30+200)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r4 = readPages[(r30+208)>>>12][((r30+208)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18df4;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x18df4:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    writePages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff] = r2;
                case 0x18e00:
                    pc=0x18e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_18e00() throws ExecutionException { /* 0x18e00 - 0x19000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x18e00:
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r30 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 160;
                    pc=r31;
                    return;
                case 0x18e18:
                    r29 = r29 + -120;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = r4;
                    writePages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff] = r5;
                    writePages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff] = r6;
                    writePages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r2;
                case 0x18e7c:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18e9c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19974;
                    run_19800(); return;
                case 0x18e9c:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 + 8;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 + 12;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 16;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 + 16;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    r6 = r3 + r0;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18f74;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x18f74:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x18fbc;
                        continue;
                    }
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 16;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = r0 + 3;
                    r6 = r3 + r0;
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x18fbc;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x18fbc:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                case 0x19000:
                    pc=0x19000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19000() throws ExecutionException { /* 0x19000 - 0x19200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19000:
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1902c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x190a4;
                    continue;
                case 0x1902c:
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r5 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r6 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r7 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19044;
                    pc=0x1a698;
                    run_1a600(); return;
                case 0x19044:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1906c;
                        continue;
                    }
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                    pc=0x199b0;
                    run_19800(); return;
                case 0x1906c:
                    f3 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x19098;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x190a4;
                    continue;
                case 0x19098:
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x190a4:
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19114;
                        continue;
                    }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 + 8;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 + 4;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    pc=0x19974;
                    run_19800(); return;
                case 0x19114:
                    f3 = readPages[(r28+-32352)>>>12][((r28+-32352)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32348)>>>12][((r28+-32348)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r6 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r7 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19184;
                    pc=0x14f74;
                    run_14e00(); return;
                case 0x19184:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r6 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r7 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x191b8;
                    pc=0x14e60;
                    run_14e00(); return;
                case 0x191b8:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r4 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x191e0;
                    pc=0x15fa0;
                    run_15e00(); return;
                case 0x191e0:
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x19200:
                    pc=0x19200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19200() throws ExecutionException { /* 0x19200 - 0x19400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19200:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x19240;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x19240:
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19270;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x19270:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x19308;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x19308:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x193a8;
                        continue;
                    }
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32344)>>>12][((r28+-32344)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32340)>>>12][((r28+-32340)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x19398;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x193a8;
                    continue;
                case 0x19398:
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x193a8:
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r0;
                case 0x193ac:
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    r4 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x193c8;
                    pc=0x14dfc;
                    run_14c00(); return;
                case 0x193c8:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x193e8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19534;
                    run_19400(); return;
                case 0x193e8:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 20;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = r0 + 4;
                    r6 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                case 0x19400:
                    pc=0x19400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19400() throws ExecutionException { /* 0x19400 - 0x19600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19400:
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1940c;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x1940c:
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r3 = r2 + 20;
                    r7 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1943c;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1943c:
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 20;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    r6 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19468;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x19468:
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 20;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x194c8;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x194c8:
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r2;
                    pc=0x193ac;
                    run_19200(); return;
                case 0x19534:
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r7 = r2 + 16;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19564;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x19564:
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x195cc;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x195cc:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                case 0x19600:
                    pc=0x19600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19600() throws ExecutionException { /* 0x19600 - 0x19800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19600:
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x19610;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19660;
                    continue;
                case 0x19610:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                case 0x19660:
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19690;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x19690:
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x196f8;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x196f8:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r7 = r2 + 16;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19778;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x19778:
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r7 = r2 + 16;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x197a8;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x197a8:
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x197b0;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x197b0:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                case 0x19800:
                    pc=0x19800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19800() throws ExecutionException { /* 0x19800 - 0x19a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19800:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r28+-31608)>>>12][((r28+-31608)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31604)>>>12][((r28+-31604)>>>2)&0x3ff];
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f0;
                    r4 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r5 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r6 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r7 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19878;
                    pc=0x199c8;
                    continue;
                case 0x19878:
                    r3 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    r6 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r7 = r2 + 4;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 16;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 + 20;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = r30 + 72;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f1;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = f0;
                    r4 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1992c;
                    pc=0x19d98;
                    run_19c00(); return;
                case 0x1992c:
                    f3 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x19958;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19960;
                    continue;
                case 0x19958:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r0;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = r0;
                case 0x19960:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r2;
                    pc=0x18e7c;
                    run_18e00(); return;
                case 0x19974:
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r2;
                case 0x199b0:
                    r2 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r30 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x199c8:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r6;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x19a00;
                        run_19a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19d84;
                    run_19c00(); return;
                case 0x19a00:
                    pc=0x19a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19a00() throws ExecutionException { /* 0x19a00 - 0x19c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19a00:
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x19a2c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19d08;
                    run_19c00(); return;
                case 0x19a2c:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b24;
                        continue;
                    }
                    r5 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r3 = r2 + 8;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                case 0x19b24:
                    r2 = r0 + 1;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x19b2c:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 + -2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19b54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x19d08;
                    run_19c00(); return;
                case 0x19b54:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                case 0x19c00:
                    pc=0x19c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19c00() throws ExecutionException { /* 0x19c00 - 0x19e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19c00:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x19b2c;
                    run_19a00(); return;
                case 0x19d08:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r5 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19d58;
                    pc=0x15b40;
                    run_15a00(); return;
                case 0x19d58:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                case 0x19d84:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x19d98:
                    r29 = r29 + -96;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r4;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r5;
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r6;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 + 2;
                    r2 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19dfc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a2d0;
                    run_1a200(); return;
                case 0x19dfc:
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                case 0x19e00:
                    pc=0x19e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_19e00() throws ExecutionException { /* 0x19e00 - 0x1a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x19e00:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r3 - r2;
                    r4 = r2 + -1;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x19e34;
                    pc=0x15dbc;
                    run_15c00(); return;
                case 0x19e34:
                    r3 = r2 + r0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-31608)>>>12][((r28+-31608)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31604)>>>12][((r28+-31604)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x19e94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a2b8;
                    run_1a200(); return;
                case 0x19e94:
                    f3 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    f1 = readPages[(r28+-31608)>>>12][((r28+-31608)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31604)>>>12][((r28+-31604)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = r0;
                    r2 = r0 + 1;
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = r2;
                case 0x19ec0:
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a220;
                        run_1a200(); return;
                    }
                    r2 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19eec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a220;
                    run_1a200(); return;
                case 0x19eec:
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    f0 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x19f18;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a20c;
                    run_1a200(); return;
                case 0x19f18:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r0;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                case 0x19f34:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x19f54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a0a0;
                    run_1a000(); return;
                case 0x19f54:
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    r6 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r7 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19f6c;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x19f6c:
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19f8c;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x19f8c:
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = f1;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r6 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r7 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x19ffc;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x19ffc:
                    r2 = r0 + 1;
                case 0x1a000:
                    pc=0x1a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a000() throws ExecutionException { /* 0x1a000 - 0x1a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a000:
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a01c;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a01c:
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r6 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r7 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a08c;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x1a08c:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                    pc=0x19f34;
                    run_19e00(); return;
                case 0x1a0a0:
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a0c0;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1a0c0:
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a0e0;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a0e0:
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r6 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r7 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a150;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x1a150:
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a170;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1a170:
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r5 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a190;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a190:
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x1a198;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x1a198:
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1a1cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a20c;
                    run_1a200(); return;
                case 0x1a1cc:
                    f3 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1a208;
                        run_1a200(); return;
                    }
                case 0x1a200:
                    pc=0x1a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a200() throws ExecutionException { /* 0x1a200 - 0x1a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a200:
                    /* Next insn is delay slot */ 
                    pc=0x1a20c;
                    continue;
                case 0x1a208:
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = r0;
                case 0x1a20c:
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = r2;
                    pc=0x19ec0;
                    run_19e00(); return;
                case 0x1a220:
                    r2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                case 0x1a22c:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = readPages[(r30+132)>>>12][((r30+132)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a24c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a2b8;
                    continue;
                case 0x1a24c:
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+128)>>>12][((r30+128)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r28+-31592)>>>12][((r28+-31592)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31588)>>>12][((r28+-31588)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r2;
                    pc=0x1a22c;
                    continue;
                case 0x1a2b8:
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                case 0x1a2d0:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r30 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x1a2e4:
                    r29 = r29 + -72;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r31;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r4;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = r5;
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = r6;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 + 24;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r5 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    r7 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a334;
                    pc=0x1a698;
                    run_1a600(); return;
                case 0x1a334:
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1a684;
                        run_1a600(); return;
                    }
                    r2 = readPages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a684;
                        run_1a600(); return;
                    }
                    f3 = readPages[(r28+-32336)>>>12][((r28+-32336)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32332)>>>12][((r28+-32332)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r6 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r7 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a3e0;
                    pc=0x14f74;
                    run_14e00(); return;
                case 0x1a3e0:
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                case 0x1a400:
                    pc=0x1a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a400() throws ExecutionException { /* 0x1a400 - 0x1a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a400:
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r6 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r7 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a414;
                    pc=0x14e60;
                    run_14e00(); return;
                case 0x1a414:
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r3 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r4 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a43c;
                    pc=0x15fa0;
                    run_15e00(); return;
                case 0x1a43c:
                    r3 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a46c;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a46c:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x1a4e4;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x1a4e4:
                    r3 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a514;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a514:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x1a57c;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x1a57c:
                    r3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = f1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r7 = r2 + 16;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a5d8;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1a5d8:
                    r3 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r7 = r2 + 16;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                case 0x1a600:
                    pc=0x1a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a600() throws ExecutionException { /* 0x1a600 - 0x1a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a600:
                    /* Next insn is delay slot */ 
                    r31=0x1a608;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a608:
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x1a610;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x1a610:
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f3 = readPages[(r28+-31608)>>>12][((r28+-31608)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31604)>>>12][((r28+-31604)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                case 0x1a684:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r30 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x1a698:
                    r29 = r29 + -88;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r31;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = r4;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = r5;
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r6;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r7;
                    r3 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r7 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a6e0;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a6e0:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = 14 << 16;
                    r2 = r2 | 769;
                    r2 = r3 + r2;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r0;
                case 0x1a714:
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a730;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a8d8;
                    run_1a800(); return;
                case 0x1a730:
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a77c;
                        continue;
                    }
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a77c;
                        continue;
                    }
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1a77c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a7e0;
                    continue;
                case 0x1a77c:
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r0;
                case 0x1a780:
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r3 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a7a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a7e0;
                    continue;
                case 0x1a7a0:
                    r2 = r30 + 56;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x1a7ac;
                    pc=0x1659c;
                    run_16400(); return;
                case 0x1a7ac:
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    pc=0x1a780;
                    continue;
                case 0x1a7e0:
                    r3 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                case 0x1a800:
                    pc=0x1a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1a800() throws ExecutionException { /* 0x1a800 - 0x1aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1a800:
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a810;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1a810:
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r2 + 12;
                    r3 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r4 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = readPages[(r28+-31600)>>>12][((r28+-31600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a838;
                    pc=0x15fa0;
                    run_15e00(); return;
                case 0x1a838:
                    r3 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a868;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1a868:
                    r3 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a898;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a898:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1a8d8;
                        continue;
                    }
                    r2 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = r2;
                    pc=0x1a714;
                    run_1a600(); return;
                case 0x1a8d8:
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1a904;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1a924;
                    continue;
                case 0x1a904:
                    r2 = r0 + 8192;
                    writePages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r28+-32328)>>>12][((r28+-32328)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32324)>>>12][((r28+-32324)>>>2)&0x3ff];
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    pc=0x1ab94;
                    run_1aa00(); return;
                case 0x1a924:
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab7c;
                        run_1aa00(); return;
                    }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r0;
                case 0x1a938:
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1a958;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1aa24;
                    run_1aa00(); return;
                case 0x1a958:
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r2 + 20;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = r0 + 2;
                    r6 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r7 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a97c;
                    pc=0x1d31c;
                    run_1d200(); return;
                case 0x1a97c:
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r3 = r2 + 12;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r7 = r2 + 20;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1a9b4;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1a9b4:
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r2 + 20;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                case 0x1aa00:
                    pc=0x1aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1aa00() throws ExecutionException { /* 0x1aa00 - 0x1ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1aa00:
                    r6 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r7 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1aa10;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x1aa10:
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    pc=0x1a938;
                    run_1a800(); return;
                case 0x1aa24:
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r3 = r2 + 16;
                    r7 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1aa54;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1aa54:
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x1aabc;
                    pc=0x1562c;
                    run_15600(); return;
                case 0x1aabc:
                    r3 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r7 = r2 + 12;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1aaec;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1aaec:
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r3 = r2 + 12;
                    r7 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1ab1c;
                    pc=0x153c0;
                    run_15200(); return;
                case 0x1ab1c:
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r28+-31576)>>>12][((r28+-31576)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31572)>>>12][((r28+-31572)>>>2)&0x3ff];
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1ab60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ab68;
                    continue;
                case 0x1ab60:
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r0;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r0;
                case 0x1ab68:
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                case 0x1ab7c:
                    f13 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f12 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1ab8c;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x1ab8c:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                case 0x1ab94:
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r30 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 88;
                    pc=r31;
                    return;
                case 0x1abb0:
                    r29 = r29 + -64;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r4;
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = r6;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r2 + r0;
                    r5 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x1abe8;
                    pc=0x15dbc;
                    run_15c00(); return;
                case 0x1abe8:
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = r3 >> 31;
                case 0x1ac00:
                    pc=0x1ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ac00() throws ExecutionException { /* 0x1ac00 - 0x1ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ac00:
                    r2 = r2 >>> 31;
                    r2 = r3 + r2;
                    r2 = r2 >> 1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x1ac10:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 + 1;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ac38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ae60;
                    run_1ae00(); return;
                case 0x1ac38:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + -8;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-31616)>>>12][((r28+-31616)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31612)>>>12][((r28+-31612)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1acd8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ae4c;
                    run_1ae00(); return;
                case 0x1acd8:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad1c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ae4c;
                    run_1ae00(); return;
                case 0x1ad1c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1ad64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ae4c;
                    run_1ae00(); return;
                case 0x1ad64:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + -8;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x1ae00:
                    pc=0x1ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ae00() throws ExecutionException { /* 0x1ae00 - 0x1b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ae00:
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x1ae08;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x1ae08:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                case 0x1ae4c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x1ac10;
                    run_1ac00(); return;
                case 0x1ae60:
                    r2 = r0 + 1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                case 0x1ae68:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 + -1;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ae90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b0b8;
                    run_1b000(); return;
                case 0x1ae90:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-31616)>>>12][((r28+-31616)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31612)>>>12][((r28+-31612)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1af30;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b0a4;
                    run_1b000(); return;
                case 0x1af30:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1af74;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b0a4;
                    run_1b000(); return;
                case 0x1af74:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1afbc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b0a4;
                    run_1b000(); return;
                case 0x1afbc:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                case 0x1b000:
                    pc=0x1b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b000() throws ExecutionException { /* 0x1b000 - 0x1b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b000:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    f12 = f0;
                    f13 = f1;
                    r31=0x1b060;
                    pc=0x1ec00;
                    run_1ec00(); return;
                case 0x1b060:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                case 0x1b0a4:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x1ae68;
                    run_1ae00(); return;
                case 0x1b0b8:
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x1b0fc:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b11c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b3e4;
                    run_1b200(); return;
                case 0x1b11c:
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = f1;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b19c;
                        continue;
                    }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                case 0x1b19c:
                    f13 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f12 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    f15 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f14 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b1b4;
                    pc=0x14d0c;
                    run_14c00(); return;
                case 0x1b1b4:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = f1;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1b200;
                        run_1b200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b278;
                    run_1b200(); return;
                case 0x1b200:
                    pc=0x1b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b200() throws ExecutionException { /* 0x1b200 - 0x1b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b200:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r5 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = f1;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = f0;
                case 0x1b278:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    f3 = readPages[(r28+-31576)>>>12][((r28+-31576)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31572)>>>12][((r28+-31572)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32320)>>>12][((r28+-32320)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32316)>>>12][((r28+-32316)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1b2f8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b3d0;
                    continue;
                case 0x1b2f8:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b3d0;
                        continue;
                    }
                    r2 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1b374;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b3c0;
                    continue;
                case 0x1b374:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1b3b8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b3c0;
                    continue;
                case 0x1b3b8:
                    r3 = r0 + 1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r3;
                case 0x1b3c0:
                    r3 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x1b3d0:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x1b0fc;
                    run_1b000(); return;
                case 0x1b3e4:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r29 = r30 + r0;
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x1b3fc:
                    r29 = r29 + -136;
                case 0x1b400:
                    pc=0x1b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b400() throws ExecutionException { /* 0x1b400 - 0x1b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b400:
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r31;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r30;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = f21;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = f20;
                    r30 = r29 + r0;
                    writePages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff] = r4;
                    writePages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff] = r5;
                    writePages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff] = r6;
                    writePages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff] = r7;
                    r3 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b440;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1bf60;
                    run_1be00(); return;
                case 0x1b440:
                    writePages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32312)>>>12][((r28+-32312)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32308)>>>12][((r28+-32308)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x1b474:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b494;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b510;
                    continue;
                case 0x1b494:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + -8;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    pc=0x1b474;
                    continue;
                case 0x1b510:
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r0;
                case 0x1b534:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b554;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1bf60;
                    run_1be00(); return;
                case 0x1b554:
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                case 0x1b558:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 < 31 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b574;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1bf4c;
                    run_1be00(); return;
                case 0x1b574:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x1b580:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+136)>>>12][((r30+136)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b5a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b6b0;
                    run_1b600(); return;
                case 0x1b5a0:
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b5c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b6b0;
                    run_1b600(); return;
                case 0x1b5c0:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                case 0x1b600:
                    pc=0x1b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b600() throws ExecutionException { /* 0x1b600 - 0x1b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b600:
                    r2 = r2 + 8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1b67c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b684;
                    continue;
                case 0x1b67c:
                    r2 = r0 + 1;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                case 0x1b684:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b69c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b6b0;
                    continue;
                case 0x1b69c:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x1b580;
                    run_1b400(); return;
                case 0x1b6b0:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = f1;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = f1;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bd94;
                        run_1bc00(); return;
                    }
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r0 + 30;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1b740;
                        continue;
                    }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1bf60;
                    run_1be00(); return;
                case 0x1b740:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r28+-32312)>>>12][((r28+-32312)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32308)>>>12][((r28+-32308)>>>2)&0x3ff];
                    f13 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f12 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    f14 = f0;
                    f15 = f1;
                    r31=0x1b7d0;
                    pc=0x16880;
                    run_16800(); return;
                case 0x1b7d0:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                case 0x1b800:
                    pc=0x1b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1b800() throws ExecutionException { /* 0x1b800 - 0x1ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1b800:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r16 = r3 + r2;
                    f13 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f12 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    f15 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f14 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b838;
                    pc=0x14b74;
                    run_14a00(); return;
                case 0x1b838:
                    f2 = f0;
                    f3 = f1;
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    f0 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r28+-32312)>>>12][((r28+-32312)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32308)>>>12][((r28+-32308)>>>2)&0x3ff];
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r28+-32312)>>>12][((r28+-32312)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32308)>>>12][((r28+-32308)>>>2)&0x3ff];
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = r0;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = r0;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x1b8ac:
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bc68;
                        run_1bc00(); return;
                    }
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1b8dc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1bc68;
                    run_1bc00(); return;
                case 0x1b8dc:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = f1;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    f13 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f12 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    f15 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f14 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1b964;
                    pc=0x16880;
                    run_16800(); return;
                case 0x1b964:
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1b9c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1b9d4;
                    continue;
                case 0x1b9c8:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    pc=0x1b8ac;
                    continue;
                case 0x1b9d4:
                    f3 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                case 0x1ba00:
                    pc=0x1ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ba00() throws ExecutionException { /* 0x1ba00 - 0x1bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ba00:
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = f1;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = f1;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r4 = r3 + r2;
                case 0x1bc00:
                    pc=0x1bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1bc00() throws ExecutionException { /* 0x1bc00 - 0x1be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1bc00:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    pc=0x1b8ac;
                    run_1b800(); return;
                case 0x1bc68:
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bcf4;
                        continue;
                    }
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    pc=0x1b558;
                    run_1b400(); return;
                case 0x1bcf4:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+144)>>>12][((r30+144)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    pc=0x1b558;
                    run_1b400(); return;
                case 0x1bd94:
                    r2 = r0 + 1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bed4;
                        run_1be00(); return;
                    }
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                case 0x1bdb8:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bed4;
                        run_1be00(); return;
                    }
                    r3 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bde0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1bed4;
                    run_1be00(); return;
                case 0x1bde0:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                case 0x1be00:
                    pc=0x1be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1be00() throws ExecutionException { /* 0x1be00 - 0x1c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1be00:
                    f2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1be28;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1becc;
                    continue;
                case 0x1be28:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + -8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    pc=0x1bdb8;
                    run_1bc00(); return;
                case 0x1becc:
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r0;
                    pc=0x1bdb8;
                    run_1bc00(); return;
                case 0x1bed4:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1bee8;
                        continue;
                    }
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r0;
                case 0x1bee8:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+140)>>>12][((r30+140)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+148)>>>12][((r30+148)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = r0 + 31;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x1b558;
                    run_1b400(); return;
                case 0x1bf4c:
                    r2 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    pc=0x1b534;
                    run_1b400(); return;
                case 0x1bf60:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r30 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    f21 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f20 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 136;
                    pc=r31;
                    return;
                case 0x1bf80:
                    r29 = r29 + -152;
                    writePages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff] = r31;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r30;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r16;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = f21;
                    writePages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff] = f20;
                    r30 = r29 + r0;
                    writePages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff] = r4;
                    writePages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff] = r5;
                    writePages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff] = r6;
                    writePages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff] = r7;
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1bfc4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cbec;
                    run_1ca00(); return;
                case 0x1bfc4:
                    writePages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = r2;
                    r2 = r0 + 1;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                case 0x1bfe0:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c000;
                        run_1c000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c05c;
                    run_1c000(); return;
                case 0x1c000:
                    pc=0x1c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c000() throws ExecutionException { /* 0x1c000 - 0x1c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c000:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + -8;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x1bfe0;
                    run_1be00(); return;
                case 0x1c05c:
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = readPages[(r30+152)>>>12][((r30+152)>>>2)&0x3ff];
                    { long hilo = (long)(r3) * ((long)r2); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = lo;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = r2;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r0;
                case 0x1c098:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c0b8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c930;
                    run_1c800(); return;
                case 0x1c0b8:
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r0;
                case 0x1c0bc:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 < 31 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c0d8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c91c;
                    run_1c800(); return;
                case 0x1c0d8:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                case 0x1c0e4:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c104;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c214;
                    run_1c200(); return;
                case 0x1c104:
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r0;
                    r3 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c124;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c214;
                    run_1c200(); return;
                case 0x1c124:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(Math.abs((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1c1e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c1e8;
                    continue;
                case 0x1c1e0:
                    r2 = r0 + 1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r2;
                case 0x1c1e8:
                    r2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c200;
                        run_1c200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c214;
                    run_1c200(); return;
                case 0x1c200:
                    pc=0x1c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c200() throws ExecutionException { /* 0x1c200 - 0x1c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c200:
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = r2;
                    pc=0x1c0e4;
                    run_1c000(); return;
                case 0x1c214:
                    r3 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c91c;
                        run_1c800(); return;
                    }
                    r3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r0 + 30;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1c24c;
                        continue;
                    }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    writePages[(r28+-31584)>>>12][((r28+-31584)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x1cbec;
                    run_1ca00(); return;
                case 0x1c24c:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = f1;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r28+-32304)>>>12][((r28+-32304)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    f13 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f12 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    f14 = f0;
                    f15 = f1;
                    r31=0x1c308;
                    pc=0x16880;
                    run_16800(); return;
                case 0x1c308:
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r16 = r3 + r2;
                    f13 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f12 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    f15 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f14 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c370;
                    pc=0x14b74;
                    run_14a00(); return;
                case 0x1c370:
                    f2 = f0;
                    f3 = f1;
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    f0 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r28+-32304)>>>12][((r28+-32304)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = f1;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r28+-32304)>>>12][((r28+-32304)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32300)>>>12][((r28+-32300)>>>2)&0x3ff];
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = f1;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = f0;
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = r0;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r0;
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                case 0x1c3e4:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c7f0;
                        run_1c600(); return;
                    }
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                case 0x1c400:
                    pc=0x1c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c400() throws ExecutionException { /* 0x1c400 - 0x1c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c400:
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c414;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c7f0;
                    run_1c600(); return;
                case 0x1c414:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = f1;
                    writePages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f13 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    f12 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    f15 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f14 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1c49c;
                    pc=0x16880;
                    run_16800(); return;
                case 0x1c49c:
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1c500;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c50c;
                    continue;
                case 0x1c500:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = r2;
                    pc=0x1c3e4;
                    run_1c200(); return;
                case 0x1c50c:
                    f3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    f2 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff] = f1;
                    writePages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = f1;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f0 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f1 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = f1;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                case 0x1c600:
                    pc=0x1c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c600() throws ExecutionException { /* 0x1c600 - 0x1c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c600:
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = f1;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    f1 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    f0 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f0 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r0;
                case 0x1c684:
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c6a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1c7dc;
                    continue;
                case 0x1c6a4:
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff] = f1;
                    writePages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f3 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    f1 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    f0 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f3 = readPages[(r30+96)>>>12][((r30+96)>>>2)&0x3ff];
                    f2 = readPages[(r30+100)>>>12][((r30+100)>>>2)&0x3ff];
                    f1 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    f0 = readPages[(r30+124)>>>12][((r30+124)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    pc=0x1c684;
                    continue;
                case 0x1c7dc:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    pc=0x1c3e4;
                    run_1c200(); return;
                case 0x1c7f0:
                    r2 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c87c;
                        run_1c800(); return;
                    }
                case 0x1c800:
                    pc=0x1c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1c800() throws ExecutionException { /* 0x1c800 - 0x1ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1c800:
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r4 = r2 + 8;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    pc=0x1c0bc;
                    run_1c000(); return;
                case 0x1c87c:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f0 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+164)>>>12][((r30+164)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r0;
                    pc=0x1c0bc;
                    run_1c000(); return;
                case 0x1c91c:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x1c098;
                    run_1c000(); return;
                case 0x1c930:
                    r2 = r0 + 1;
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                case 0x1c938:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c958;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cbec;
                    run_1ca00(); return;
                case 0x1c958:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = f1;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                case 0x1c9ac:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1c9cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ca5c;
                    run_1ca00(); return;
                case 0x1c9cc:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                case 0x1ca00:
                    pc=0x1ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ca00() throws ExecutionException { /* 0x1ca00 - 0x1cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ca00:
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1ca10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ca48;
                    continue;
                case 0x1ca10:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = f1;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = f0;
                case 0x1ca48:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x1c9ac;
                    run_1c800(); return;
                case 0x1ca5c:
                    r3 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1cbd8;
                        continue;
                    }
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r3 = r2 << 3;
                    r2 = readPages[(r30+160)>>>12][((r30+160)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r0;
                case 0x1cae4:
                    r2 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r3 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cb04;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cbd8;
                    continue;
                case 0x1cb04:
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = f1;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r4 = r3 + r2;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = f1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 << 3;
                    r2 = readPages[(r30+168)>>>12][((r30+168)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    f1 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    f0 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = readPages[(r30+156)>>>12][((r30+156)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    /* Next insn is delay slot */ 
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    pc=0x1cae4;
                    continue;
                case 0x1cbd8:
                    r2 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = r2;
                    pc=0x1c938;
                    run_1c800(); return;
                case 0x1cbec:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r30 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r16 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f21 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                case 0x1cc00:
                    pc=0x1cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1cc00() throws ExecutionException { /* 0x1cc00 - 0x1ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1cc00:
                    f20 = readPages[(r29+148)>>>12][((r29+148)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 152;
                    pc=r31;
                    return;
                case 0x1cc0c:
                    r29 = r29 + -104;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff] = r4;
                    writePages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff] = r5;
                    writePages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff] = r6;
                    writePages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff] = r7;
                    f1 = readPages[(r28+-32296)>>>12][((r28+-32296)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32292)>>>12][((r28+-32292)>>>2)&0x3ff];
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = f1;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff] = f1;
                    writePages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = f1;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                case 0x1cca4:
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1cce0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cd64;
                    continue;
                case 0x1cce0:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    pc=0x1cca4;
                    continue;
                case 0x1cd64:
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = r0;
                case 0x1cd7c:
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1cd94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1ce20;
                    run_1ce00(); return;
                case 0x1cd94:
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                case 0x1ce00:
                    pc=0x1ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ce00() throws ExecutionException { /* 0x1ce00 - 0x1d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ce00:
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff] = f0;
                    /* Next insn is delay slot */ 
                    pc=0x1cd7c;
                    run_1cc00(); return;
                case 0x1ce20:
                    r3 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    r2 = readPages[(r30+92)>>>12][((r30+92)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r30+104)>>>12][((r30+104)>>>2)&0x3ff];
                    f0 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = f1;
                    writePages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                case 0x1ce80:
                    f3 = readPages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff];
                    f2 = readPages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1cebc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cf3c;
                    continue;
                case 0x1cebc:
                    r3 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f2 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+80)>>>12][((r30+80)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+84)>>>12][((r30+84)>>>2)&0x3ff] = f0;
                    pc=0x1ce80;
                    continue;
                case 0x1cf3c:
                    r2 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    f3 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f2 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    f1 = readPages[(r30+56)>>>12][((r30+56)>>>2)&0x3ff];
                    f0 = readPages[(r30+60)>>>12][((r30+60)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff] = f1;
                    writePages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1cfc4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1cfd0;
                    continue;
                case 0x1cfc4:
                    r3 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x1cfd0:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff] = f1;
                    writePages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f2 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    f1 = readPages[(r30+16)>>>12][((r30+16)>>>2)&0x3ff];
                    f0 = readPages[(r30+20)>>>12][((r30+20)>>>2)&0x3ff];
                case 0x1d000:
                    pc=0x1d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d000() throws ExecutionException { /* 0x1d000 - 0x1d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d000:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d070;
                        continue;
                    }
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+72)>>>12][((r30+72)>>>2)&0x3ff];
                    f0 = readPages[(r30+76)>>>12][((r30+76)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1d064;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d070;
                    continue;
                case 0x1d064:
                    r3 = readPages[(r30+112)>>>12][((r30+112)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x1d070:
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + 3;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff] = f1;
                    writePages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff] = f0;
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = r0;
                case 0x1d0c4:
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r3 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d0e8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d11c;
                    continue;
                case 0x1d0e8:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+8)>>>12][((r30+8)>>>2)&0x3ff];
                    f0 = readPages[(r30+12)>>>12][((r30+12)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    r2 = readPages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+88)>>>12][((r30+88)>>>2)&0x3ff] = r2;
                    pc=0x1d0c4;
                    continue;
                case 0x1d11c:
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff] = f1;
                    writePages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                case 0x1d150:
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1d18c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d1ec;
                    continue;
                case 0x1d18c:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    pc=0x1d150;
                    continue;
                case 0x1d1ec:
                    r3 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r30+120)>>>12][((r30+120)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                case 0x1d200:
                    pc=0x1d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d200() throws ExecutionException { /* 0x1d200 - 0x1d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d200:
                    r2 = r0 - r2;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r2 = readPages[(r30+108)>>>12][((r30+108)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 - r2;
                    r2 = r2 + -3;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    f1 = readPages[(r30+32)>>>12][((r30+32)>>>2)&0x3ff];
                    f0 = readPages[(r30+36)>>>12][((r30+36)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                case 0x1d25c:
                    f3 = readPages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff];
                    f2 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    f1 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f0 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    f0 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1d298;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d2f8;
                    continue;
                case 0x1d298:
                    f3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f2 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    f1 = readPages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff];
                    f0 = readPages[(r30+4)>>>12][((r30+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = f1;
                    writePages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff] = f0;
                    r3 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r2 = readPages[(r30+116)>>>12][((r30+116)>>>2)&0x3ff];
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    f3 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    f2 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = f1;
                    /* Next insn is delay slot */ 
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = f0;
                    pc=0x1d25c;
                    continue;
                case 0x1d2f8:
                    f1 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    f0 = readPages[(r30+28)>>>12][((r30+28)>>>2)&0x3ff];
                    writePages[(r28+-31576)>>>12][((r28+-31576)>>>2)&0x3ff] = f1;
                    writePages[(r28+-31572)>>>12][((r28+-31572)>>>2)&0x3ff] = f0;
                    r29 = r30 + r0;
                    r30 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 104;
                    pc=r31;
                    return;
                case 0x1d31c:
                    r29 = r29 + -40;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r30;
                    r30 = r29 + r0;
                    writePages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff] = r4;
                    writePages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff] = r5;
                    writePages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff] = r6;
                    writePages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r30+44)>>>12][((r30+44)>>>2)&0x3ff];
                    writePages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff] = r2;
                    r2 = r0 + 2;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d490;
                        run_1d400(); return;
                    }
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    r2 = r3 < 3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d38c;
                        continue;
                    }
                    r2 = r0 + 1;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d3bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d6a0;
                    run_1d600(); return;
                case 0x1d38c:
                    r2 = r0 + 3;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d51c;
                        run_1d400(); return;
                    }
                    r2 = r0 + 4;
                    r3 = readPages[(r30+24)>>>12][((r30+24)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1d604;
                        run_1d600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x1d6a0;
                    run_1d600(); return;
                case 0x1d3bc:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d44c;
                        run_1d400(); return;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28356;
                    r31=0x1d3fc;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x1d3fc:
                    r4 = r2 + r0;
                case 0x1d400:
                    pc=0x1d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d400() throws ExecutionException { /* 0x1d400 - 0x1d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d400:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d44c;
                        continue;
                    }
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r4 = 5 << 16;
                    r4 = r4 + -28344;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1d44c;
                    pc=0x13f68;
                    run_13e00(); return;
                case 0x1d44c:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 + 8;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d488;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1d488:
                    /* Next insn is delay slot */ 
                    pc=0x1d6a0;
                    run_1d600(); return;
                case 0x1d490:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = r2 + 8;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d4d8;
                        continue;
                    }
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 + 2;
                    r4 = 5 << 16;
                    r4 = r4 + -28300;
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    r31=0x1d4d8;
                    pc=0x13f68;
                    run_13e00(); return;
                case 0x1d4d8:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r3 = r2 + 8;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d514;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1d514:
                    /* Next insn is delay slot */ 
                    pc=0x1d6a0;
                    run_1d600(); return;
                case 0x1d51c:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d544;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28240;
                    r31=0x1d53c;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1d53c:
                    /* Next insn is delay slot */ 
                    pc=0x1d6a0;
                    run_1d600(); return;
                case 0x1d544:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5c4;
                        continue;
                    }
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    r6 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r6 + -28356;
                    r31=0x1d580;
                    pc=0x13d90;
                    run_13c00(); return;
                case 0x1d580:
                    r4 = r2 + r0;
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d5c4;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -28344;
                    r5 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d5c4;
                    pc=0x13f68;
                    run_13e00(); return;
                case 0x1d5c4:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d5fc;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1d5fc:
                    /* Next insn is delay slot */ 
                    pc=0x1d6a0;
                    run_1d600(); return;
                case 0x1d600:
                    pc=0x1d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d600() throws ExecutionException { /* 0x1d600 - 0x1d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d600:
                case 0x1d604:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d62c;
                        continue;
                    }
                    r4 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + -28192;
                    r31=0x1d624;
                    pc=0x13ed0;
                    run_13e00(); return;
                case 0x1d624:
                    /* Next insn is delay slot */ 
                    pc=0x1d6a0;
                    continue;
                case 0x1d62c:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r2 = r3 + r2;
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d668;
                        continue;
                    }
                    r4 = 5 << 16;
                    r4 = r4 + -28144;
                    r5 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d668;
                    pc=0x13f68;
                    run_13e00(); return;
                case 0x1d668:
                    r2 = readPages[(r30+48)>>>12][((r30+48)>>>2)&0x3ff];
                    r3 = r2 << 2;
                    r2 = readPages[(r28+-31568)>>>12][((r28+-31568)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r2 = r0 + 1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r30+40)>>>12][((r30+40)>>>2)&0x3ff];
                    r5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r0 + 1;
                    r7 = readPages[(r30+52)>>>12][((r30+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x1d6a0;
                    pc=0x151b4;
                    run_15000(); return;
                case 0x1d6a0:
                    r29 = r30 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x1d6b4:
                    r29 = r29 + -32;
                    r2 = 4 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = r2 + 29188;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r3 = r0 + -1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + -4;
                        pc=0x1d6fc;
                        continue;
                    }
                    r16 = r2 + -4;
                    r3 = r4 + r0;
                    r17 = r0 + -1;
                case 0x1d6e4:
                    /* Next insn is delay slot */ 
                    r16 = r16 + -4;
                    pc=r3;
                    r31=0x1d6ec;
                    return;
                case 0x1d6ec:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x1d6e4;
                        continue;
                    }
                    r3 = r2 + r0;
                case 0x1d6fc:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x1d710:
                    r2 = r4 + 1;
                case 0x1d714:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x1d714;
                        continue;
                    }
                    r4 = r4 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r4 - r2;
                    pc=r31;
                    return;
                case 0x1d728:
                    r29 = r29 + -32;
                    r2 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = r16 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x1d750;
                    return;
                case 0x1d750:
                    r3 = r2 + r0;
                    r2 = r0 + 2;
                    pc = 0x1d758;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x1d75c;
                        return;
                    }
                case 0x1d75c:
                    r2 = r0 + 1;
                    r3 = r0 + 1;
                    pc = 0x1d764;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x1d768;
                        return;
                    }
                case 0x1d768:
                    r29 = r29 + -8;
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r17;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r16;
                    r8 = r6 + r0;
                    r10 = r4 + r0;
                    r9 = r7 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r14 = r5 + r0;
                        pc=0x1db70;
                        run_1da00(); return;
                    }
                    r14 = r5 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 | 65535;
                        pc=0x1d8fc;
                        run_1d800(); return;
                    }
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 + r0;
                        pc=0x1d8e0;
                        run_1d800(); return;
                    }
                    r3 = r7 + r0;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r6 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r6 = r6 << 3;
                case 0x1d7ac:
                    r2 = r3 >>> (r6&0x1f);
                    r3 = 5 << 16;
                    r3 = r3 + -22552;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r6;
                    r7 = r2 - r4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 - r7;
                        pc=0x1d7e8;
                        continue;
                    }
                    r2 = r2 - r7;
                    r2 = r14 >>> (r2&0x1f);
                    r3 = r10 << (r7&0x1f);
                    r10 = r3 | r2;
                    r14 = r14 << (r7&0x1f);
                    r9 = r9 << (r7&0x1f);
                case 0x1d7e8:
                    r7 = r9 >>> 16;
                    if(r7!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r12 = r9 & 65535;
                    r4 = r14 >>> 16;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d804;
                        run_1d800(); return;
                    }
                case 0x1d800:
                    pc=0x1d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1d800() throws ExecutionException { /* 0x1d800 - 0x1da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1d800:
                    throw new ExecutionException("Break");
                case 0x1d804:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r6 = r2 | r4;
                    r11 = lo;
                    { long hilo = (long)(r3) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x1d858;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r6 = r6 + r9;
                    r2 = ((r6 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r11 + -1;
                        pc=0x1d858;
                        continue;
                    }
                    r11 = r11 + -1;
                    r2 = ((r6 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d858;
                        continue;
                    }
                    r11 = r11 + -1;
                    r6 = r6 + r9;
                case 0x1d858:
                    r6 = r6 - r5;
                    if(r7!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r4 = r14 & 65535;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d870;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1d870:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    r8 = lo;
                    { long hilo = (long)(r3) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r7!=0) {
                        hi = (int)((r6 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r7 & 0xffffffffL));
                        }
                        pc=0x1d8c0;
                        continue;
                    }
                    if(r7!=0) {
                    hi = (int)((r6 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r6 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r4 = r4 + r9;
                    r2 = ((r4 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + -1;
                        pc=0x1d8c0;
                        continue;
                    }
                    r8 = r8 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 << 16;
                        pc=0x1d8c4;
                        continue;
                    }
                    r2 = r11 << 16;
                    r8 = r8 + -1;
                case 0x1d8c0:
                    r2 = r11 << 16;
                case 0x1d8c4:
                    r3 = r2 | r8;
                case 0x1d8c8:
                    r6 = r0 + r0;
                case 0x1d8cc:
                    r17 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r16 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    r2 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x1d8e0:
                    r2 = 255 << 16;
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 16;
                        pc=0x1d7ac;
                        run_1d600(); return;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x1d7ac;
                    run_1d600(); return;
                case 0x1d8fc:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                        pc=0x1d924;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r6!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d918;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1d918:
                    r9 = lo;
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                case 0x1d924:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x1db58;
                        run_1da00(); return;
                    }
                    r2 = 255 << 16;
                    r2 = (r9&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x1d938:
                    r3 = 5 << 16;
                    r2 = r9 >>> (r5&0x1f);
                    r3 = r3 + -22552;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 - r7;
                        pc=0x1da4c;
                        run_1da00(); return;
                    }
                    r5 = r2 - r7;
                    r10 = r10 - r9;
                    r6 = r0 + 1;
                    r8 = r9 >>> 16;
                    r16 = r9 & 65535;
                case 0x1d970:
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r14 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d984;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1d984:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r7 = r2 | r4;
                    r11 = lo;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r7 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1d9d8;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r7 = r7 + r9;
                    r2 = ((r7 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r11 + -1;
                        pc=0x1d9d8;
                        continue;
                    }
                    r11 = r11 + -1;
                    r2 = ((r7 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9d8;
                        continue;
                    }
                    r11 = r11 + -1;
                    r7 = r7 + r9;
                case 0x1d9d8:
                    r7 = r7 - r5;
                    if(r8!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r14 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d9f0;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1d9f0:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                case 0x1da00:
                    pc=0x1da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1da00() throws ExecutionException { /* 0x1da00 - 0x1dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1da00:
                    r10 = lo;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1da40;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r4 + r9;
                    r2 = ((r4 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r10 + -1;
                        pc=0x1da40;
                        continue;
                    }
                    r10 = r10 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 << 16;
                        pc=0x1da44;
                        continue;
                    }
                    r2 = r11 << 16;
                    r10 = r10 + -1;
                case 0x1da40:
                    r2 = r11 << 16;
                case 0x1da44:
                    /* Next insn is delay slot */ 
                    r3 = r2 | r10;
                    pc=0x1d8cc;
                    run_1d800(); return;
                case 0x1da4c:
                    r9 = r9 << (r7&0x1f);
                    r8 = r9 >>> 16;
                    r12 = r10 >>> (r5&0x1f);
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r16 = r9 & 65535;
                    r3 = r14 >>> (r5&0x1f);
                    r2 = r10 << (r7&0x1f);
                    r10 = r2 | r3;
                    r5 = r10 >>> 16;
                    r14 = r14 << (r7&0x1f);
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1da80;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1da80:
                    r11 = r8 + r0;
                    r17 = r16 + r0;
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r7 = r4 | r5;
                    r15 = lo;
                    { long hilo = (long)(r6) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1dadc;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r7 = r7 + r9;
                    r2 = ((r7 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r6 + -1;
                        pc=0x1dadc;
                        continue;
                    }
                    r15 = r6 + -1;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dadc;
                        continue;
                    }
                    r15 = r15 + -1;
                    r7 = r7 + r9;
                case 0x1dadc:
                    r7 = r7 - r13;
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1daf4;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1daf4:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    r6 = lo;
                    { long hilo = (long)(r3) * ((long)r17); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r11!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                        }
                        pc=0x1db48;
                        continue;
                    }
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r4 + r9;
                    r2 = ((r4 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x1db48;
                        continue;
                    }
                    r6 = r6 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r15 << 16;
                        pc=0x1db4c;
                        continue;
                    }
                    r2 = r15 << 16;
                    r6 = r6 + -1;
                    r4 = r4 + r9;
                case 0x1db48:
                    r2 = r15 << 16;
                case 0x1db4c:
                    r6 = r2 | r6;
                    /* Next insn is delay slot */ 
                    r10 = r4 - r13;
                    pc=0x1d970;
                    run_1d800(); return;
                case 0x1db58:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x1d938;
                        run_1d800(); return;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x1d938;
                    run_1d800(); return;
                case 0x1db70:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1d8c8;
                        run_1d800(); return;
                    }
                    r3 = r0 + r0;
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x1dd24;
                        run_1dc00(); return;
                    }
                    r2 = 255 << 16;
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x1db98:
                    r3 = 5 << 16;
                    r2 = r8 >>> (r5&0x1f);
                    r3 = r3 + -22552;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dbe0;
                        continue;
                    }
                    r2 = ((r8 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 1;
                        pc=0x1d8c8;
                        run_1d800(); return;
                    }
                    r3 = r0 + 1;
                    r2 = ((r14 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x1d8c8;
                        run_1d800(); return;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r0 + 1;
                    pc=0x1d8c8;
                    run_1d800(); return;
                case 0x1dbe0:
                    r5 = r2 - r7;
                    r2 = r9 >>> (r5&0x1f);
                    r3 = r8 << (r7&0x1f);
                    r8 = r3 | r2;
                    r11 = r8 >>> 16;
                    r12 = r10 >>> (r5&0x1f);
                    if(r11!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r16 = r8 & 65535;
                case 0x1dc00:
                    pc=0x1dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1dc00() throws ExecutionException { /* 0x1dc00 - 0x1de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1dc00:
                    r3 = r14 >>> (r5&0x1f);
                    r2 = r10 << (r7&0x1f);
                    r10 = r2 | r3;
                    r5 = r10 >>> 16;
                    r14 = r14 << (r7&0x1f);
                    r9 = r9 << (r7&0x1f);
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc24;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1dc24:
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r7 = r4 | r5;
                    r15 = lo;
                    { long hilo = (long)(r6) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r11!=0) {
                        hi = (int)((r12 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r11 & 0xffffffffL));
                        }
                        pc=0x1dc78;
                        continue;
                    }
                    if(r11!=0) {
                    hi = (int)((r12 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r12 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r7 = r7 + r8;
                    r2 = ((r7 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r6 + -1;
                        pc=0x1dc78;
                        continue;
                    }
                    r15 = r6 + -1;
                    r2 = ((r7 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc78;
                        continue;
                    }
                    r15 = r15 + -1;
                    r7 = r7 + r8;
                case 0x1dc78:
                    r7 = r7 - r13;
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dc90;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1dc90:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    r6 = lo;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r11!=0) {
                        hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                        }
                        pc=0x1dce4;
                        continue;
                    }
                    if(r11!=0) {
                    hi = (int)((r7 & 0xffffffffL) % (r11 & 0xffffffffL)); lo = (int)((r7 & 0xffffffffL) / (r11 & 0xffffffffL));
                    }
                    r4 = r4 + r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x1dce4;
                        continue;
                    }
                    r6 = r6 + -1;
                    r2 = ((r4 & 0xffffffffL) < (r13 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r15 << 16;
                        pc=0x1dce8;
                        continue;
                    }
                    r2 = r15 << 16;
                    r4 = r4 + r8;
                    r6 = r6 + -1;
                case 0x1dce4:
                    r2 = r15 << 16;
                case 0x1dce8:
                    r3 = r2 | r6;
                    r4 = r4 - r13;
                    { long hilo = (r3 & 0xffffffffL) * (r9 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r5 = hi;
                    r2 = ((r4 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dd1c;
                        continue;
                    }
                    if(r5 != r4) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x1d8cc;
                        run_1d800(); return;
                    }
                    r6 = r0 + r0;
                    r4 = lo;
                    r2 = ((r14 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1d8cc;
                        run_1d800(); return;
                    }
                case 0x1dd1c:
                    /* Next insn is delay slot */ 
                    r3 = r3 + -1;
                    pc=0x1d8c8;
                    run_1d800(); return;
                case 0x1dd24:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x1db98;
                        run_1da00(); return;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x1db98;
                    run_1da00(); return;
                case 0x1dd3c:
                    r29 = r29 + -24;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r19;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r17;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r16;
                    r8 = r6 + r0;
                    r19 = r29 + r0;
                    r11 = r7 + r0;
                    r15 = r5 + r0;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 + r0;
                        pc=0x1e0ec;
                        run_1e000(); return;
                    }
                    r10 = r4 + r0;
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 | 65535;
                        pc=0x1ded4;
                        run_1de00(); return;
                    }
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r7 + r0;
                        pc=0x1deb8;
                        run_1de00(); return;
                    }
                    r3 = r7 + r0;
                    r2 = (r7&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r6 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r6 = r6 << 3;
                case 0x1dd8c:
                    r2 = r3 >>> (r6&0x1f);
                    r3 = 5 << 16;
                    r3 = r3 + -22552;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r6;
                    r7 = r2 - r4;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r11 >>> 16;
                        pc=0x1ddd0;
                        continue;
                    }
                    r6 = r11 >>> 16;
                    r2 = r2 - r7;
                    r2 = r15 >>> (r2&0x1f);
                    r3 = r10 << (r7&0x1f);
                    r10 = r3 | r2;
                    r11 = r11 << (r7&0x1f);
                    r15 = r15 << (r7&0x1f);
                    r6 = r11 >>> 16;
                case 0x1ddd0:
                    if(r6!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r9 = r11 & 65535;
                    r4 = r15 >>> 16;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dde8;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1dde8:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r5 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r8 = lo;
                case 0x1de00:
                    pc=0x1de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1de00() throws ExecutionException { /* 0x1de00 - 0x1e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1de00:
                    r3 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x1de28;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r5 = r5 + r11;
                    r2 = ((r5 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                        pc=0x1de28;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de28;
                        continue;
                    }
                    r5 = r5 + r11;
                case 0x1de28:
                    r5 = r5 - r8;
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r4 = r15 & 65535;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1de40;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1de40:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r8 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r6!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                        }
                        pc=0x1de80;
                        continue;
                    }
                    if(r6!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    r4 = r4 + r11;
                    r2 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r4 - r8;
                        pc=0x1de84;
                        continue;
                    }
                    r15 = r4 - r8;
                    r2 = ((r4 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + r11;
                        pc=0x1de84;
                        continue;
                    }
                    r4 = r4 + r11;
                case 0x1de80:
                    r15 = r4 - r8;
                case 0x1de84:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = r15 >>> (r7&0x1f);
                        pc=0x1de98;
                        continue;
                    }
                    r25 = r15 >>> (r7&0x1f);
                    r24 = r0 + r0;
                case 0x1de90:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r24;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r25;
                case 0x1de98:
                    r2 = readPages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff];
                    r19 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r18 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r17 = readPages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff];
                    r16 = readPages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x1deb8:
                    r2 = 255 << 16;
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 16;
                        pc=0x1dd8c;
                        run_1dc00(); return;
                    }
                    r6 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 24;
                    pc=0x1dd8c;
                    run_1dc00(); return;
                case 0x1ded4:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                        pc=0x1defc;
                        continue;
                    }
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r2 = r0 + 1;
                    if(r6!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r6 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r6 & 0xffffffffL));
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1def0;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1def0:
                    r11 = lo;
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                case 0x1defc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x1e0d4;
                        run_1e000(); return;
                    }
                    r2 = 255 << 16;
                    r2 = (r11&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x1df10:
                    r3 = 5 << 16;
                    r2 = r11 >>> (r5&0x1f);
                    r3 = r3 + -22552;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 - r7;
                        pc=0x1dff8;
                        continue;
                    }
                    r16 = r2 - r7;
                    r10 = r10 - r11;
                    r8 = r11 >>> 16;
                    r14 = r11 & 65535;
                case 0x1df44:
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r15 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1df58;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1df58:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r5 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1df98;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r10 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r10 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r5 = r5 + r11;
                    r2 = ((r5 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x1df98;
                        continue;
                    }
                    r2 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1df98;
                        continue;
                    }
                    r5 = r5 + r11;
                case 0x1df98:
                    r5 = r5 - r6;
                    if(r8!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r15 & 65535;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1dfb0;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1dfb0:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r5 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1dff0;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r5 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r5 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r4 = r4 + r11;
                    r2 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r15 = r4 - r6;
                        pc=0x1de84;
                        continue;
                    }
                    r15 = r4 - r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + r11;
                        pc=0x1de84;
                        continue;
                    }
                    r4 = r4 + r11;
                case 0x1dff0:
                    /* Next insn is delay slot */ 
                    r15 = r4 - r6;
                    pc=0x1de84;
                    continue;
                case 0x1dff8:
                    r11 = r11 << (r7&0x1f);
                    r8 = r11 >>> 16;
                case 0x1e000:
                    pc=0x1e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e000() throws ExecutionException { /* 0x1e000 - 0x1e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e000:
                    r13 = r10 >>> (r16&0x1f);
                    if(r8!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r14 = r11 & 65535;
                    r3 = r15 >>> (r16&0x1f);
                    r2 = r10 << (r7&0x1f);
                    r10 = r2 | r3;
                    r5 = r10 >>> 16;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e028;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1e028:
                    r12 = r8 + r0;
                    r15 = r15 << (r7&0x1f);
                    r16 = r14 + r0;
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r9 = r4 | r5;
                    { long hilo = (long)(r6) * ((long)r14); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r2 = ((r9 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r8!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r8 & 0xffffffffL));
                        }
                        pc=0x1e074;
                        continue;
                    }
                    if(r8!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r8 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r8 & 0xffffffffL));
                    }
                    r9 = r9 + r11;
                    r2 = ((r9 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = ((r9 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                        pc=0x1e074;
                        continue;
                    }
                    r2 = ((r9 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e074;
                        continue;
                    }
                    r9 = r9 + r11;
                case 0x1e074:
                    r9 = r9 - r6;
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e08c;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1e08c:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r4 = r2 | r4;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r6 = lo;
                    r3 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r12!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                        }
                        pc=0x1e0cc;
                        continue;
                    }
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r4 = r4 + r11;
                    r2 = ((r4 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r10 = r4 - r6;
                        pc=0x1df44;
                        run_1de00(); return;
                    }
                    r10 = r4 - r6;
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + r11;
                        pc=0x1df44;
                        run_1de00(); return;
                    }
                    r4 = r4 + r11;
                case 0x1e0cc:
                    /* Next insn is delay slot */ 
                    r10 = r4 - r6;
                    pc=0x1df44;
                    run_1de00(); return;
                case 0x1e0d4:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x1df10;
                        run_1de00(); return;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x1df10;
                    run_1de00(); return;
                case 0x1e0ec:
                    r2 = ((r4 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 | 65535;
                        pc=0x1e10c;
                        continue;
                    }
                    r2 = r0 | 65535;
                    r25 = r5 + r0;
                    r24 = r4 + r0;
                    writePages[(r29+0)>>>12][((r29+0)>>>2)&0x3ff] = r24;
                    /* Next insn is delay slot */ 
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r25;
                    pc=0x1de98;
                    run_1de00(); return;
                case 0x1e10c:
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = 255 << 16;
                        pc=0x1e2f4;
                        run_1e200(); return;
                    }
                    r2 = 255 << 16;
                    r2 = (r6&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    r5 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r5 = r5 << 3;
                case 0x1e124:
                    r3 = 5 << 16;
                    r2 = r8 >>> (r5&0x1f);
                    r3 = r3 + -22552;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + 32;
                    r4 = r4 + r5;
                    r7 = r2 - r4;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 - r7;
                        pc=0x1e184;
                        continue;
                    }
                    r16 = r2 - r7;
                    r2 = ((r8 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r15 - r11;
                        pc=0x1e164;
                        continue;
                    }
                    r4 = r15 - r11;
                    r2 = ((r15 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e174;
                        continue;
                    }
                case 0x1e164:
                    r2 = ((r15 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r3 = r10 - r8;
                    r10 = r3 - r2;
                    r15 = r4 + r0;
                case 0x1e174:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r25 = r15 + r0;
                        pc=0x1de98;
                        run_1de00(); return;
                    }
                    r25 = r15 + r0;
                    /* Next insn is delay slot */ 
                    r24 = r10 + r0;
                    pc=0x1de90;
                    run_1de00(); return;
                case 0x1e184:
                    r2 = r11 >>> (r16&0x1f);
                    r3 = r8 << (r7&0x1f);
                    r8 = r3 | r2;
                    r12 = r8 >>> 16;
                    r13 = r10 >>> (r16&0x1f);
                    if(r12!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r18 = r8 & 65535;
                    r2 = r15 >>> (r16&0x1f);
                    r3 = r10 << (r7&0x1f);
                    r10 = r3 | r2;
                    r5 = r10 >>> 16;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e1bc;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1e1bc:
                    r11 = r11 << (r7&0x1f);
                    r15 = r15 << (r7&0x1f);
                    r6 = lo;
                    r4 = hi;
                    r4 = r4 << 16;
                    r9 = r4 | r5;
                    r17 = lo;
                    { long hilo = (long)(r6) * ((long)r18); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r14 = lo;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        if(r12!=0) {
                        hi = (int)((r13 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r12 & 0xffffffffL));
                        }
                        pc=0x1e218;
                        run_1e200(); return;
                    }
                    if(r12!=0) {
                    hi = (int)((r13 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r13 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r9 = r9 + r8;
                    r2 = ((r9 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r6 + -1;
                        pc=0x1e218;
                        run_1e200(); return;
                    }
                case 0x1e200:
                    pc=0x1e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e200() throws ExecutionException { /* 0x1e200 - 0x1e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e200:
                    r17 = r6 + -1;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e218;
                        continue;
                    }
                    r17 = r17 + -1;
                    r9 = r9 + r8;
                case 0x1e218:
                    r9 = r9 - r14;
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r4 = r10 & 65535;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e230;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x1e230:
                    r3 = lo;
                    r2 = hi;
                    r2 = r2 << 16;
                    r5 = r2 | r4;
                    r6 = lo;
                    { long hilo = (long)(r3) * ((long)r18); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r14 = lo;
                    r3 = ((r5 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        if(r12!=0) {
                        hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                        }
                        pc=0x1e284;
                        continue;
                    }
                    if(r12!=0) {
                    hi = (int)((r9 & 0xffffffffL) % (r12 & 0xffffffffL)); lo = (int)((r9 & 0xffffffffL) / (r12 & 0xffffffffL));
                    }
                    r5 = r5 + r8;
                    r2 = ((r5 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x1e284;
                        continue;
                    }
                    r6 = r6 + -1;
                    r2 = ((r5 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r17 << 16;
                        pc=0x1e288;
                        continue;
                    }
                    r2 = r17 << 16;
                    r6 = r6 + -1;
                    r5 = r5 + r8;
                case 0x1e284:
                    r2 = r17 << 16;
                case 0x1e288:
                    r2 = r2 | r6;
                    r5 = r5 - r14;
                    { long hilo = (r2 & 0xffffffffL) * (r11 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r6 = hi;
                    r3 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    r9 = lo;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r9 - r11;
                        pc=0x1e2e0;
                        continue;
                    }
                    r4 = r9 - r11;
                    if(r6 == r5) {
                        /* Next insn is delay slot */ 
                        r2 = ((r15 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                        pc=0x1e2d8;
                        continue;
                    }
                    r2 = ((r15 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                case 0x1e2b0:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r15 - r9;
                        pc=0x1de98;
                        run_1de00(); return;
                    }
                    r3 = r15 - r9;
                    r4 = r5 - r6;
                    r2 = ((r15 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    r10 = r4 - r2;
                    r5 = r10 << (r16&0x1f);
                    r3 = r3 >>> (r7&0x1f);
                    r25 = r5 | r3;
                    /* Next insn is delay slot */ 
                    r24 = r10 >>> (r7&0x1f);
                    pc=0x1de90;
                    run_1de00(); return;
                case 0x1e2d8:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r9 - r11;
                        pc=0x1e2b0;
                        continue;
                    }
                    r4 = r9 - r11;
                case 0x1e2e0:
                    r2 = ((r9 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r3 = r6 - r8;
                    r6 = r3 - r2;
                    /* Next insn is delay slot */ 
                    r9 = r4 + r0;
                    pc=0x1e2b0;
                    continue;
                case 0x1e2f4:
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 16;
                        pc=0x1e124;
                        run_1e000(); return;
                    }
                    r5 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 24;
                    pc=0x1e124;
                    run_1e000(); return;
                case 0x1e400:
                    pc=0x1e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e400() throws ExecutionException { /* 0x1e400 - 0x1e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    if(r28 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r4 + r0;
                        pc=0x1e41c;
                        continue;
                    }
                    r16 = r4 + r0;
                    r2 = 5 << 16;
                    r28 = r2 + 12496;
                case 0x1e41c:
                    r1 = 5 << 16;
                    writePages[(r1+-19248)>>>12][((r1+-19248)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    r31=0x1e42c;
                    pc=0x10000;
                    run_10000(); return;
                case 0x1e42c:
                    r4 = 1 << 16;
                    /* Next insn is delay slot */ 
                    r4 = r4 + 56;
                    r31=0x1e438;
                    pc=0x1f600;
                    run_1f600(); return;
                case 0x1e438:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e460;
                        continue;
                    }
                    r3 = r16 + r0;
                case 0x1e44c:
                    r3 = r3 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e44c;
                        continue;
                    }
                case 0x1e460:
                    r6 = 5 << 16;
                    r6 = readPages[(r6+-19248)>>>12][((r6+-19248)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x1e470;
                    pc=0x10320;
                    run_10200(); return;
                case 0x1e470:
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x1e478;
                    pc=0x20200;
                    run_20200(); return;
                case 0x1e478:
                case 0x1e600:
                    pc=0x1e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e600() throws ExecutionException { /* 0x1e600 - 0x1e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e600:
                    r3 = f12;
                    r2 = f13;
                    r29 = r29 + -32;
                    r4 = 32767 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r4 = r4 | 65535;
                    r17 = r2 + r0;
                    r2 = 17423 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = r2 | 65535;
                    r16 = r17 & r4;
                    r2 = r2 < r16 ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        f8 = f12;
                        f9 = f13;
                        pc=0x1e6a4;
                        continue;
                    }
                    f8 = f12;
                    f9 = f13;
                    r4 = 32752 << 16;
                    r3 = f12;
                    r2 = f13;
                    r2 = r4 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e69c;
                        continue;
                    }
                    if(r16 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1e694;
                        continue;
                    }
                case 0x1e65c:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e680;
                        continue;
                    }
                    f1 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                case 0x1e66c:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x1e680:
                    f1 = readPages[(r28+-32272)>>>12][((r28+-32272)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32268)>>>12][((r28+-32268)>>>2)&0x3ff];
                case 0x1e68c:
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    pc=0x1e66c;
                    continue;
                case 0x1e694:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e65c;
                        continue;
                    }
                case 0x1e69c:
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))+(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    pc=0x1e66c;
                    continue;
                case 0x1e6a4:
                    r2 = 16347 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e814;
                        run_1e800(); return;
                    }
                    r2 = 15903 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6f8;
                        continue;
                    }
                    f1 = readPages[(r28+-32264)>>>12][((r28+-32264)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32260)>>>12][((r28+-32260)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32256)>>>12][((r28+-32256)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f13&0xffffffffL) << 32) | (f12&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1e6f8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    f0 = f12;
                    f1 = f13;
                    pc=0x1e66c;
                    continue;
                case 0x1e6f8:
                    r3 = r0 + -1;
                case 0x1e6fc:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    f3 = readPages[(r28+-32224)>>>12][((r28+-32224)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32220)>>>12][((r28+-32220)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32216)>>>12][((r28+-32216)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32212)>>>12][((r28+-32212)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32208)>>>12][((r28+-32208)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32204)>>>12][((r28+-32204)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32200)>>>12][((r28+-32200)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32196)>>>12][((r28+-32196)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32192)>>>12][((r28+-32192)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32188)>>>12][((r28+-32188)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32184)>>>12][((r28+-32184)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32180)>>>12][((r28+-32180)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-32176)>>>12][((r28+-32176)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32172)>>>12][((r28+-32172)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32168)>>>12][((r28+-32168)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32164)>>>12][((r28+-32164)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32160)>>>12][((r28+-32160)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32156)>>>12][((r28+-32156)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32152)>>>12][((r28+-32152)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32148)>>>12][((r28+-32148)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-32144)>>>12][((r28+-32144)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32140)>>>12][((r28+-32140)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                        pc=0x1e804;
                        run_1e800(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = 5 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = 5 << 16;
                    r3 = r3 << 3;
                    r4 = r4 + -28080;
                    r2 = r2 + -28048;
                    r4 = r3 + r4;
                    r3 = r3 + r2;
                    f3 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                        pc=0x1e66c;
                        continue;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    pc=0x1e68c;
                    continue;
                case 0x1e800:
                    pc=0x1e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1e800() throws ExecutionException { /* 0x1e800 - 0x1ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1e800:
                case 0x1e804:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    pc=0x1e66c;
                    run_1e600(); return;
                case 0x1e814:
                    /* Next insn is delay slot */ 
                    r31=0x1e81c;
                    pc=0x1ea00;
                    run_1ea00(); return;
                case 0x1e81c:
                    r2 = 16370 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        f8 = f0;
                        f9 = f1;
                        pc=0x1e888;
                        continue;
                    }
                    f8 = f0;
                    f9 = f1;
                    r2 = 16357 << 16;
                    r2 = r2 | 65535;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e86c;
                        continue;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    f3 = readPages[(r28+-32256)>>>12][((r28+-32256)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    f1 = readPages[(r28+-32248)>>>12][((r28+-32248)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32244)>>>12][((r28+-32244)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r3 = r0 + r0;
                case 0x1e864:
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f9 = (int)(l >>> 32); f8 = (int)l; }
                    pc=0x1e6fc;
                    run_1e600(); return;
                case 0x1e86c:
                    f1 = readPages[(r28+-32256)>>>12][((r28+-32256)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f9 = (int)(l >>> 32); f8 = (int)l; }
                    pc=0x1e6fc;
                    run_1e600(); return;
                case 0x1e888:
                    r2 = 16387 << 16;
                    r2 = r2 | 32767;
                    r2 = r2 < r16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1e8c0;
                        continue;
                    }
                    f1 = readPages[(r28+-32240)>>>12][((r28+-32240)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32236)>>>12][((r28+-32236)>>>2)&0x3ff];
                    f3 = readPages[(r28+-32256)>>>12][((r28+-32256)>>>2)&0x3ff];
                    f2 = readPages[(r28+-32252)>>>12][((r28+-32252)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r3 = r0 + 2;
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    pc=0x1e864;
                    continue;
                case 0x1e8c0:
                    f1 = readPages[(r28+-32232)>>>12][((r28+-32232)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32228)>>>12][((r28+-32228)>>>2)&0x3ff];
                    r3 = r0 + 3;
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f9&0xffffffffL) << 32) | (f8&0xffffffffL)))); f9 = (int)(l >>> 32); f8 = (int)l; }
                    pc=0x1e6fc;
                    run_1e600(); return;
                case 0x1ea00:
                    pc=0x1ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ea00() throws ExecutionException { /* 0x1ea00 - 0x1ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ea00:
                    r3 = f12;
                    r2 = f13;
                    r6 = 32767 << 16;
                    r5 = f12;
                    r4 = f13;
                    r6 = r6 | 65535;
                    r4 = r6 & r2;
                    f0 = r5;
                    f1 = r4;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1ec00:
                    pc=0x1ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ec00() throws ExecutionException { /* 0x1ec00 - 0x1ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ec00:
                    r29 = r29 + -80;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r16;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = f23;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = f22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f21;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    f22 = f12;
                    f23 = f13;
                    /* Next insn is delay slot */ 
                    r31=0x1ec28;
                    pc=0x1ee00;
                    run_1ee00(); return;
                case 0x1ec28:
                    r16 = readPages[(r28+-32096)>>>12][((r28+-32096)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        f20 = f0;
                        f21 = f1;
                        pc=0x1ed20;
                        continue;
                    }
                    f20 = f0;
                    f21 = f1;
                    /* Next insn is delay slot */ 
                    f12 = f22;
                    f13 = f23;
                    r31=0x1ec40;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x1ec40:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed20;
                        continue;
                    }
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed20;
                        continue;
                    }
                    r2 = 5 << 16;
                    r3 = r0 + 1;
                    r2 = r2 + -19640;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = f23;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = f22;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = f23;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f22;
                        pc=0x1ec98;
                        continue;
                    }
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = f22;
                    f1 = readPages[(r28+-32128)>>>12][((r28+-32128)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32124)>>>12][((r28+-32124)>>>2)&0x3ff];
                case 0x1ec98:
                    r3 = readPages[(r28+-32096)>>>12][((r28+-32096)>>>2)&0x3ff];
                    r2 = r0 + 2;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = f1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                        pc=0x1ed0c;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = f0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 16;
                    r31=0x1ecb4;
                    pc=0x1f400;
                    run_1f400(); return;
                case 0x1ecb4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ed0c;
                        continue;
                    }
                case 0x1ecbc:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ecf4;
                        continue;
                    }
                case 0x1eccc:
                    f1 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    f0 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                case 0x1ecd4:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    f23 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    f22 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    f21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    f20 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 80;
                    pc=r31;
                    return;
                case 0x1ecf4:
                    /* Next insn is delay slot */ 
                    r31=0x1ecfc;
                    pc=0x20000;
                    run_20000(); return;
                case 0x1ecfc:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    pc=0x1eccc;
                    continue;
                case 0x1ed0c:
                    /* Next insn is delay slot */ 
                    r31=0x1ed14;
                    pc=0x20000;
                    run_20000(); return;
                case 0x1ed14:
                    r3 = r0 + 33;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    pc=0x1ecbc;
                    continue;
                case 0x1ed20:
                    /* Next insn is delay slot */ 
                    f0 = f20;
                    f1 = f21;
                    pc=0x1ecd4;
                    continue;
                case 0x1ee00:
                    pc=0x1ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1ee00() throws ExecutionException { /* 0x1ee00 - 0x1f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1ee00:
                    r3 = f12;
                    r2 = f13;
                    r4 = 32752 << 16;
                    r5 = r2 + r0;
                    r2 = r5 & r4;
                    r11 = 32768 << 16;
                    r7 = r3 + r0;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x1f054;
                        run_1f000(); return;
                    }
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f028;
                        run_1f000(); return;
                    }
                case 0x1ee2c:
                    r10 = r5 >> 20;
                    if(r10 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee90;
                        continue;
                    }
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee54;
                        continue;
                    }
                case 0x1ee40:
                    r2 = r7 >>> 11;
                    r5 = r5 | r2;
                    r10 = r10 + -21;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 << 21;
                        pc=0x1ee40;
                        continue;
                    }
                    r7 = r7 << 21;
                case 0x1ee54:
                    r2 = 16 << 16;
                    r2 = r5 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x1ee78;
                        continue;
                    }
                    r4 = r0 + r0;
                    r3 = 16 << 16;
                case 0x1ee68:
                    r5 = r5 << 1;
                    r2 = r5 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x1ee68;
                        continue;
                    }
                    r4 = r4 + 1;
                case 0x1ee78:
                    r2 = r0 - r4;
                    r2 = r7 >>> (r2&0x1f);
                    r3 = r10 - r4;
                    r10 = r3 + 1;
                    r5 = r5 | r2;
                    r7 = r7 << (r4&0x1f);
                case 0x1ee90:
                    r2 = 15 << 16;
                    r10 = r10 + -1023;
                    r2 = r2 | 65535;
                    r2 = r5 & r2;
                    r3 = 16 << 16;
                    r4 = r10 & 1;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 | r3;
                        pc=0x1eec4;
                        continue;
                    }
                    r5 = r2 | r3;
                    r2 = r7 & r11;
                    r2 = r2 >>> 31;
                    r2 = r5 + r2;
                    r5 = r5 + r2;
                    r7 = r7 << 1;
                case 0x1eec4:
                    r2 = r7 & r11;
                    r2 = r2 >>> 31;
                    r2 = r5 + r2;
                    r10 = r10 >> 1;
                    r5 = r5 + r2;
                    r7 = r7 << 1;
                    r12 = r0 + r0;
                    r4 = r0 + r0;
                    r13 = r0 + r0;
                    r14 = r0 + r0;
                    r6 = 32 << 16;
                case 0x1eef0:
                    r3 = r4 + r6;
                    r2 = r5 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef0c;
                        continue;
                    }
                    r4 = r3 + r6;
                    r5 = r5 - r3;
                    r14 = r14 + r6;
                case 0x1ef0c:
                    r2 = r7 & r11;
                    r2 = r2 >>> 31;
                    r2 = r5 + r2;
                    r6 = r6 >>> 1;
                    r5 = r5 + r2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 << 1;
                        pc=0x1eef0;
                        continue;
                    }
                    r7 = r7 << 1;
                    r6 = 32768 << 16;
                    r9 = r4 + r0;
                case 0x1ef30:
                    r4 = r12 + r6;
                    r2 = r9 < r5 ? 1 : 0;
                    r3 = r9 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                        pc=0x1eff0;
                        continue;
                    }
                    r8 = ((r7 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r9 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x1efe8;
                        continue;
                    }
                case 0x1ef4c:
                    r2 = r7 & r11;
                    r2 = r2 >>> 31;
                    r2 = r5 + r2;
                    r6 = r6 >>> 1;
                    r5 = r5 + r2;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 << 1;
                        pc=0x1ef30;
                        continue;
                    }
                    r7 = r7 << 1;
                    r2 = r5 | r7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1efa4;
                        continue;
                    }
                    f1 = readPages[(r28+-32104)>>>12][((r28+-32104)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32100)>>>12][((r28+-32100)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x1efa4;
                        continue;
                    }
                    r2 = r0 + -1;
                    if(r13 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x1efdc;
                        continue;
                    }
                    r2 = r13 & 1;
                    r13 = r13 + r2;
                case 0x1efa4:
                    r2 = r14 >> 1;
                    r3 = 16352 << 16;
                    r5 = r2 + r3;
                    r2 = r14 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r13 >>> 1;
                        pc=0x1efc0;
                        continue;
                    }
                    r7 = r13 >>> 1;
                    r7 = r7 | r11;
                case 0x1efc0:
                    r2 = r10 << 20;
                    r24 = r5 + r2;
                    r25 = r7 + r0;
                    f0 = r25;
                    f1 = r24;
                case 0x1efd4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1efdc:
                    r13 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r14 = r14 + 1;
                    pc=0x1efa4;
                    continue;
                case 0x1efe8:
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ef4c;
                        continue;
                    }
                case 0x1eff0:
                    r2 = r4 & r11;
                    if(r2 == r11) {
                        /* Next insn is delay slot */ 
                        r12 = r4 + r6;
                        pc=0x1f014;
                        run_1f000(); return;
                    }
                    r12 = r4 + r6;
                case 0x1effc:
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 - r3;
                        pc=0x1f008;
                        run_1f000(); return;
                    }
                case 0x1f000:
                    pc=0x1f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f000() throws ExecutionException { /* 0x1f000 - 0x1f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f000:
                    r5 = r5 - r3;
                    r5 = r5 + -1;
                case 0x1f008:
                    r7 = r7 - r4;
                    /* Next insn is delay slot */ 
                    r13 = r13 + r6;
                    pc=0x1ef4c;
                    run_1ee00(); return;
                case 0x1f014:
                    r2 = r12 & r11;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1effc;
                        run_1ee00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r9 = r9 + 1;
                    pc=0x1effc;
                    run_1ee00(); return;
                case 0x1f028:
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    r2 = r5 & r2;
                    r2 = r2 | r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        f0 = f12;
                        f1 = f13;
                        pc=0x1efd4;
                        run_1ee00(); return;
                    }
                    f0 = f12;
                    f1 = f13;
                    if(r5 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ee2c;
                        run_1ee00(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f13&0xffffffffL) << 32) | (f12&0xffffffffL)))-(Double.longBitsToDouble(((f13&0xffffffffL) << 32) | (f12&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    pc=r31;
                    return;
                case 0x1f054:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f13&0xffffffffL) << 32) | (f12&0xffffffffL)))*(Double.longBitsToDouble(((f13&0xffffffffL) << 32) | (f12&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f13&0xffffffffL) << 32) | (f12&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    pc=r31;
                    return;
                case 0x1f200:
                    pc=0x1f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f200() throws ExecutionException { /* 0x1f200 - 0x1f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f200:
                    r5 = f12;
                    r4 = f13;
                    r2 = 32767 << 16;
                    r3 = r0 - r5;
                    r3 = r3 | r5;
                    r2 = r2 | 65535;
                    r2 = r2 & r4;
                    r3 = r3 >>> 31;
                    r2 = r2 | r3;
                    r4 = 32752 << 16;
                    r2 = r4 - r2;
                    /* Next insn is delay slot */ 
                    r2 = r2 >>> 31;
                    pc=r31;
                    return;
                case 0x1f400:
                    pc=0x1f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f400() throws ExecutionException { /* 0x1f400 - 0x1f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f400:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x1f600:
                    pc=0x1f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f600() throws ExecutionException { /* 0x1f600 - 0x1f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f600:
                    r29 = r29 + -24;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f694;
                        continue;
                    }
                case 0x1f624:
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r3 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1f660;
                        continue;
                    }
                case 0x1f638:
                    r2 = r3 << 2;
                    r2 = r2 + r4;
                    r3 = r3 + 1;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r16;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    r2 = r0 + r0;
                case 0x1f650:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x1f660:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 268;
                    r31=0x1f668;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x1f668:
                    r4 = r2 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + -1;
                        pc=0x1f650;
                        continue;
                    }
                    r2 = r0 + -1;
                    r3 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r3+328)>>>12][((r3+328)>>>2)&0x3ff];
                    writePages[(r4+264)>>>12][((r4+264)>>>2)&0x3ff] = r0;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+328)>>>12][((r3+328)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x1f638;
                    continue;
                case 0x1f694:
                    r4 = r2 + 332;
                    /* Next insn is delay slot */ 
                    writePages[(r2+328)>>>12][((r2+328)>>>2)&0x3ff] = r4;
                    pc=0x1f624;
                    continue;
                case 0x1f800:
                    pc=0x1f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1f800() throws ExecutionException { /* 0x1f800 - 0x1fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1f800:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1f814;
                    pc=0x28c00;
                    run_28c00(); return;
                case 0x1f814:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fa00:
                    pc=0x1fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fa00() throws ExecutionException { /* 0x1fa00 - 0x1fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fa00:
                    r29 = r29 + -24;
                    r5 = r0 + r0;
                    r6 = r0 + 10;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1fa18;
                    pc=0x29200;
                    run_29200(); return;
                case 0x1fa18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fc00:
                    pc=0x1fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fc00() throws ExecutionException { /* 0x1fc00 - 0x1fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fc00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x1fc20;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x1fc20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x1fe00:
                    pc=0x1fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_1fe00() throws ExecutionException { /* 0x1fe00 - 0x20000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x1fe00:
                    { long hilo = (long)(r5) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    r19 = r0 + -4;
                    r16 = lo;
                    /* Next insn is delay slot */ 
                    r31=0x1fe38;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x1fe38:
                    r2 = 5 << 16;
                    r18 = readPages[(r2+-21336)>>>12][((r2+-21336)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r21 = r3 & r19;
                    r31=0x1fe54;
                    pc=0x24200;
                    run_24200(); return;
                case 0x1fe54:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x1ff28;
                        continue;
                    }
                    r17 = r2 + r0;
                    r3 = r2 + -8;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r3 == r18) {
                        /* Next insn is delay slot */ 
                        r16 = r2 & r19;
                        pc=0x1ff14;
                        continue;
                    }
                    r16 = r2 & r19;
                case 0x1fe70:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1fe78;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x1fe78:
                    r6 = r16 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1ff00;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r17 + r0;
                        pc=0x1fec8;
                        continue;
                    }
                    r3 = r17 + r0;
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r0;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r17 + 8;
                        pc=0x1fec8;
                        continue;
                    }
                    r3 = r17 + 8;
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r0;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r17 + 16;
                        pc=0x1fec8;
                        continue;
                    }
                    r3 = r17 + 16;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r0;
                    writePages[(r17+20)>>>12][((r17+20)>>>2)&0x3ff] = r0;
                    r3 = r17 + 24;
                case 0x1fec8:
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    r3 = r3 + 4;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r0;
                case 0x1fed8:
                    r2 = r17 + r0;
                case 0x1fedc:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x1ff00:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x1ff0c;
                    pc=0x2e5ec;
                    run_2e400(); return;
                case 0x1ff0c:
                    /* Next insn is delay slot */ 
                    pc=0x1fed8;
                    continue;
                case 0x1ff14:
                    r2 = ((r21 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x1fe70;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r16 = r21 + r0;
                    pc=0x1fe70;
                    continue;
                case 0x1ff28:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x1ff30;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x1ff30:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x1fedc;
                    continue;
                case 0x20000:
                    pc=0x20000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20000() throws ExecutionException { /* 0x20000 - 0x20200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20000:
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x20200:
                    pc=0x20200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20200() throws ExecutionException { /* 0x20200 - 0x20400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20200:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r20 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = readPages[(r4+328)>>>12][((r4+328)>>>2)&0x3ff];
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202b0;
                        continue;
                    }
                    r21 = r0 + 1;
                case 0x2023c:
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        r18 = r21 << (r16&0x1f);
                        pc=0x202f0;
                        continue;
                    }
                    r18 = r21 << (r16&0x1f);
                case 0x20250:
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20298;
                        continue;
                    }
                    r2 = r16 << 2;
                    r2 = r2 + r19;
                    r17 = r2 + 8;
                case 0x20264:
                    r2 = readPages[(r19+264)>>>12][((r19+264)>>>2)&0x3ff];
                    r2 = r2 & r18;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202d8;
                        continue;
                    }
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r5 = readPages[(r17+128)>>>12][((r17+128)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    pc=r2;
                    r31=0x20288;
                    return;
                case 0x20288:
                    r16 = r16 + -1;
                    r17 = r17 + -4;
                    if(r16 >= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r18 >> 1;
                        pc=0x20264;
                        continue;
                    }
                    r18 = r18 >> 1;
                case 0x20298:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2023c;
                        continue;
                    }
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                case 0x202b0:
                    r2 = readPages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x202c8;
                        continue;
                    }
                case 0x202c0:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x202c8;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x202c8:
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x202d0;
                    return;
                case 0x202d0:
                    /* Next insn is delay slot */ 
                    pc=0x202c0;
                    continue;
                case 0x202d8:
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x202e8;
                    return;
                case 0x202e8:
                    /* Next insn is delay slot */ 
                    pc=0x20288;
                    continue;
                case 0x202f0:
                    /* Next insn is delay slot */ 
                    r18 = r0 + r0;
                    pc=0x20250;
                    continue;
                case 0x20400:
                    pc=0x20400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20400() throws ExecutionException { /* 0x20400 - 0x20600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20400:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x204d0;
                        continue;
                    }
                    r4 = r0 + r0;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2043c;
                        continue;
                    }
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x2043c:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20540;
                        continue;
                    }
                case 0x2044c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x204d0;
                        continue;
                    }
                    r4 = r0 + r0;
                    r2 = r3 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x20530;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x20468:
                    r2 = readPages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20514;
                        continue;
                    }
                case 0x20478:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x204fc;
                        continue;
                    }
                case 0x2048c:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x204b8;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x204b4;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x204b4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x204b4:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x204b8:
                    r5 = readPages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff];
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x204e8;
                        continue;
                    }
                case 0x204c8:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r17 + r0;
                case 0x204d0:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x204e8:
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x204f4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x204f4:
                    /* Next insn is delay slot */ 
                    writePages[(r16+68)>>>12][((r16+68)>>>2)&0x3ff] = r0;
                    pc=0x204c8;
                    continue;
                case 0x204fc:
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2050c;
                    pc=0x22000;
                    run_22000(); return;
                case 0x2050c:
                    /* Next insn is delay slot */ 
                    pc=0x2048c;
                    continue;
                case 0x20514:
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r2;
                    r31=0x20520;
                    return;
                case 0x20520:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20478;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r17 = r0 + -1;
                    pc=0x20478;
                    continue;
                case 0x20530:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x20538;
                    pc=0x20600;
                    run_20600(); return;
                case 0x20538:
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    pc=0x20468;
                    continue;
                case 0x20540:
                    /* Next insn is delay slot */ 
                    r31=0x20548;
                    pc=0x21400;
                    run_21400(); return;
                case 0x20548:
                    /* Next insn is delay slot */ 
                    pc=0x2044c;
                    continue;
                case 0x20600:
                    pc=0x20600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20600() throws ExecutionException { /* 0x20600 - 0x20800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20600:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20708;
                        continue;
                    }
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20640;
                        continue;
                    }
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r18+84)>>>12][((r18+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x20640:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206f8;
                        continue;
                    }
                case 0x20650:
                    addr=r18+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r3 = tmp;
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206c4;
                        continue;
                    }
                    r17 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x206c4;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r17;
                    r16 = r2 - r17;
                    r2 = r3 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x20694;
                        continue;
                    }
                    r3 = r0 + r0;
                    r3 = readPages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff];
                case 0x20694:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r3;
                        pc=0x206c4;
                        continue;
                    }
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r3;
                case 0x2069c:
                    r2 = readPages[(r18+36)>>>12][((r18+36)>>>2)&0x3ff];
                    r4 = readPages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    pc=r2;
                    r31=0x206b0;
                    return;
                case 0x206b0:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x206e0;
                        continue;
                    }
                    r16 = r16 - r2;
                    if(r16 > 0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + r2;
                        pc=0x2069c;
                        continue;
                    }
                    r17 = r17 + r2;
                case 0x206c4:
                    r2 = r0 + r0;
                case 0x206c8:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x206e0:
                    addr=r18+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r18+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r2 = r0 + -1;
                    pc=0x206c8;
                    continue;
                case 0x206f8:
                    /* Next insn is delay slot */ 
                    r31=0x20700;
                    pc=0x21400;
                    run_21400(); return;
                case 0x20700:
                    /* Next insn is delay slot */ 
                    pc=0x20650;
                    continue;
                case 0x20708:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = 2 << 16;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1536;
                    r31=0x20718;
                    pc=0x23000;
                    run_23000(); return;
                case 0x20718:
                    /* Next insn is delay slot */ 
                    pc=0x206c8;
                    continue;
                case 0x20800:
                    pc=0x20800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20800() throws ExecutionException { /* 0x20800 - 0x20a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20800:
                    r29 = r29 + -48;
                    r2 = r5 < 2 ? 1 : 0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r21 = r4 + r0;
                    r18 = r6 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x208b4;
                        continue;
                    }
                    r3 = r0 + r0;
                    r20 = r4 + r0;
                    r17 = r5 + -1;
                case 0x2083c:
                    r16 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20910;
                        continue;
                    }
                case 0x2084c:
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    r19 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20860;
                        continue;
                    }
                    r16 = r17 + r0;
                case 0x20860:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x20870;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x20870:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x208dc;
                        continue;
                    }
                    r3 = r2 + r0;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r2 = r2 - r16;
                    r3 = r3 + r16;
                    r4 = r20 + r0;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r3;
                    r5 = r19 + r0;
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r17 - r16;
                    r31=0x208a4;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x208a4:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r20 = r20 + r16;
                        pc=0x2083c;
                        continue;
                    }
                    r20 = r20 + r16;
                case 0x208ac:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x208b0:
                    r3 = r21 + r0;
                case 0x208b4:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x208dc:
                    r3 = r3 + 1;
                    r2 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r16 = r3 - r19;
                    r2 = r2 - r16;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r3;
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r2;
                    r4 = r20 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x20904;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x20904:
                    r3 = r20 + r16;
                    /* Next insn is delay slot */ 
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x208b0;
                    continue;
                case 0x20910:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x20918;
                    pc=0x26000;
                    run_26000(); return;
                case 0x20918:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2092c;
                        continue;
                    }
                    r16 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2084c;
                    continue;
                case 0x2092c:
                    if(r20 != r21) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x208ac;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x208b4;
                    continue;
                case 0x20a00:
                    pc=0x20a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20a00() throws ExecutionException { /* 0x20a00 - 0x20c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20a00:
                    r2 = 2 << 16;
                    r3 = 2 << 16;
                    r2 = r2 + 26112;
                    r3 = r3 + 26624;
                    writePages[(r4+32)>>>12][((r4+32)>>>2)&0x3ff] = r2;
                    writePages[(r4+36)>>>12][((r4+36)>>>2)&0x3ff] = r3;
                    r2 = 2 << 16;
                    r3 = 2 << 16;
                    r2 = r2 + 27136;
                    r3 = r3 + 27648;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r0;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r0;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r6&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r0;
                    writePages[(r4+20)>>>12][((r4+20)>>>2)&0x3ff] = r0;
                    writePages[(r4+24)>>>12][((r4+24)>>>2)&0x3ff] = r0;
                    writePages[(r4+28)>>>12][((r4+28)>>>2)&0x3ff] = r4;
                    writePages[(r4+40)>>>12][((r4+40)>>>2)&0x3ff] = r2;
                    writePages[(r4+44)>>>12][((r4+44)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff] = r7;
                    pc=r31;
                    return;
                case 0x20c00:
                    pc=0x20c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20c00() throws ExecutionException { /* 0x20c00 - 0x20e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20c00:
                    r2 = r5 << 1;
                    r2 = r2 + r5;
                    r2 = r2 << 3;
                    r29 = r29 + -32;
                    r2 = r2 - r5;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r2 << 2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = r5 + r0;
                    r5 = r18 + 12;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x20c38;
                    pc=0x24200;
                    run_24200(); return;
                case 0x20c38:
                    r16 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x20c64;
                        continue;
                    }
                    r2 = r0 + r0;
                    r4 = r16 + 12;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r17;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r4;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x20c60;
                    pc=0x2e5ec;
                    run_2e400(); return;
                case 0x20c60:
                    r2 = r16 + r0;
                case 0x20c64:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x20e00:
                    pc=0x20e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_20e00() throws ExecutionException { /* 0x20e00 - 0x21000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x20e00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20eec;
                        continue;
                    }
                case 0x20e20:
                    r16 = r17 + 604;
                case 0x20e24:
                    r4 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + -1;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e5c;
                        continue;
                    }
                    r3 = r5 + 12;
                case 0x20e3c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20ea8;
                        continue;
                    }
                    r4 = r4 + -1;
                    r5 = r5 + 92;
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 92;
                        pc=0x20e3c;
                        continue;
                    }
                    r3 = r3 + 92;
                case 0x20e5c:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x20e74;
                        continue;
                    }
                case 0x20e6c:
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    pc=0x20e24;
                    continue;
                case 0x20e74:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 4;
                    r31=0x20e80;
                    pc=0x20c00;
                    run_20c00(); return;
                case 0x20e80:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                        pc=0x20e6c;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + 12;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    r2 = r0 + r0;
                case 0x20e94:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x20ea8:
                    r2 = r0 + 1;
                    addr=r5+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r0 + -1;
                    addr=r5+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r0;
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r0;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r0;
                    writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r0;
                    writePages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff] = r0;
                    writePages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff] = r0;
                    writePages[(r5+48)>>>12][((r5+48)>>>2)&0x3ff] = r0;
                    writePages[(r5+52)>>>12][((r5+52)>>>2)&0x3ff] = r0;
                    writePages[(r5+68)>>>12][((r5+68)>>>2)&0x3ff] = r0;
                    writePages[(r5+72)>>>12][((r5+72)>>>2)&0x3ff] = r0;
                    writePages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r2 = r5 + r0;
                    pc=0x20e94;
                    continue;
                case 0x20eec:
                    /* Next insn is delay slot */ 
                    r31=0x20ef4;
                    pc=0x21400;
                    run_21400(); return;
                case 0x20ef4:
                    /* Next insn is delay slot */ 
                    pc=0x20e20;
                    continue;
                case 0x21000:
                    pc=0x21000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21000() throws ExecutionException { /* 0x21000 - 0x21200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21000:
                    r5 = 2 << 16;
                    r29 = r29 + -24;
                    r5 = r5 + 1536;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x21018;
                    pc=0x23000;
                    run_23000(); return;
                case 0x21018:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21200:
                    pc=0x21200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21200() throws ExecutionException { /* 0x21200 - 0x21400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21200:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x21214;
                    pc=0x21000;
                    run_21000(); return;
                case 0x21214:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21400:
                    pc=0x21400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21400() throws ExecutionException { /* 0x21400 - 0x21600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21400:
                    r2 = 2 << 16;
                    r29 = r29 + -24;
                    r2 = r2 + 4096;
                    r3 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r4+60)>>>12][((r4+60)>>>2)&0x3ff] = r2;
                    writePages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff] = r3;
                    r2 = r0 + 3;
                    r3 = r4 + 616;
                    r16 = r4 + r0;
                    writePages[(r4+608)>>>12][((r4+608)>>>2)&0x3ff] = r2;
                    writePages[(r4+612)>>>12][((r4+612)>>>2)&0x3ff] = r3;
                    writePages[(r4+604)>>>12][((r4+604)>>>2)&0x3ff] = r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r7 = r16 + r0;
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x2144c;
                    pc=0x20a00;
                    run_20a00(); return;
                case 0x2144c:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r7 = r16 + r0;
                    r5 = r0 + 8;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x21460;
                    pc=0x20a00;
                    run_20a00(); return;
                case 0x21460:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r7 = r16 + r0;
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 2;
                    r31=0x21474;
                    pc=0x20a00;
                    run_20a00(); return;
                case 0x21474:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x21600:
                    pc=0x21600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21600() throws ExecutionException { /* 0x21600 - 0x21800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21600:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    r18 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r16 = r4 + r0;
                    r31=0x21628;
                    pc=0x3e000;
                    run_3e000(); return;
                case 0x21628:
                    r17 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x216ac;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2163c;
                    pc=0x20e00;
                    run_20e00(); return;
                case 0x2163c:
                    r16 = r2 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x216ac;
                        continue;
                    }
                    r2 = r0 + r0;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r6 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 438;
                    r31=0x2165c;
                    pc=0x2de20;
                    run_2de00(); return;
                case 0x2165c:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x216dc;
                        continue;
                    }
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 2 << 16;
                    r2 = r2 + 26112;
                    r3 = 2 << 16;
                    r3 = r3 + 26624;
                    writePages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff] = r2;
                    r2 = 2 << 16;
                    r2 = r2 + 27136;
                    writePages[(r16+36)>>>12][((r16+36)>>>2)&0x3ff] = r3;
                    r3 = 2 << 16;
                    writePages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff] = r2;
                    r3 = r3 + 27648;
                    r2 = r17 & 256;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r3;
                        pc=0x216c4;
                        continue;
                    }
                    writePages[(r16+44)>>>12][((r16+44)>>>2)&0x3ff] = r3;
                case 0x216a8:
                    r2 = r16 + r0;
                case 0x216ac:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x216c4:
                    r4 = r16 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 2;
                    r31=0x216d4;
                    pc=0x22a00;
                    run_22a00(); return;
                case 0x216d4:
                    /* Next insn is delay slot */ 
                    pc=0x216a8;
                    continue;
                case 0x216dc:
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x216ac;
                    continue;
                case 0x21800:
                    pc=0x21800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21800() throws ExecutionException { /* 0x21800 - 0x21a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x21820;
                    pc=0x21600;
                    run_21600(); return;
                case 0x21820:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21a00:
                    pc=0x21a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21a00() throws ExecutionException { /* 0x21a00 - 0x21c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21a00:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -24;
                    r6 = r29 + 32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x21a1c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x21a1c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x21c00:
                    pc=0x21c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21c00() throws ExecutionException { /* 0x21c00 - 0x21e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r3 = r2 + -1;
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r3;
                        pc=0x21c4c;
                        continue;
                    }
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r3;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r2 + 1;
                case 0x21c38:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                case 0x21c3c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x21c4c:
                    r2 = readPages[(r5+24)>>>12][((r5+24)>>>2)&0x3ff];
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21c90;
                        continue;
                    }
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r0 + 10;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x21c8c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r4 + 1;
                    pc=0x21c38;
                    continue;
                case 0x21c8c:
                    r4 = r0 + 10;
                case 0x21c90:
                    /* Next insn is delay slot */ 
                    r31=0x21c98;
                    pc=0x2da00;
                    run_2da00(); return;
                case 0x21c98:
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x21c3c;
                    continue;
                case 0x21e00:
                    pc=0x21e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_21e00() throws ExecutionException { /* 0x21e00 - 0x22000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x21e00:
                    { long hilo = (long)(r6) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r5 + r0;
                    r21 = r6 + r0;
                    r17 = lo;
                    r19 = r7 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x21ed8;
                        continue;
                    }
                    r2 = r0 + r0;
                    r6 = readPages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff];
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f20;
                        continue;
                    }
                case 0x21e50:
                    r2 = ((r6 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r22 = r17 + r0;
                    r18 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r6 + r0;
                        pc=0x21eac;
                        continue;
                    }
                    r16 = r6 + r0;
                case 0x21e64:
                    r5 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x21e74;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x21e74:
                    r3 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r3 = r3 + r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r3;
                    r18 = r18 + r16;
                    /* Next insn is delay slot */ 
                    r17 = r17 - r16;
                    r31=0x21e90;
                    pc=0x26000;
                    run_26000(); return;
                case 0x21e90:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f00;
                        continue;
                    }
                    r16 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21e64;
                        continue;
                    }
                case 0x21eac:
                    r5 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x21ebc;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x21ebc:
                    r3 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r3 = r3 - r17;
                    r2 = r2 + r17;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = r21 + r0;
                case 0x21ed8:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x21f00:
                    r2 = r22 - r17;
                    if(r20!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r20 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r20 & 0xffffffffL));
                    }
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x21f14;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x21f14:
                    r2 = lo;
                    /* Next insn is delay slot */ 
                    pc=0x21ed8;
                    continue;
                case 0x21f20:
                    writePages[(r7+4)>>>12][((r7+4)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=0x21e50;
                    continue;
                case 0x22000:
                    pc=0x22000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22000() throws ExecutionException { /* 0x22000 - 0x22200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22000:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2214c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x22028;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x22028:
                    r9 = r16 + -8;
                    r5 = readPages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r7 = r5 & r2;
                    r4 = r9 + r7;
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r12 = 5 << 16;
                    r2 = r0 + -4;
                    r10 = r12 + -21344;
                    r8 = r3 & r2;
                    r2 = readPages[(r10+8)>>>12][((r10+8)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2229c;
                        run_22200(); return;
                    }
                    r2 = r5 & 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r0 + r0;
                        pc=0x2209c;
                        continue;
                    }
                    r11 = r0 + r0;
                    r5 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r2 = r10 + 8;
                    r9 = r9 - r5;
                    r3 = readPages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff];
                    r7 = r7 + r5;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22294;
                        run_22200(); return;
                    }
                    r6 = readPages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                case 0x2209c:
                    r3 = r4 + r8;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x220e0;
                        continue;
                    }
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + r8;
                        pc=0x22288;
                        run_22200(); return;
                    }
                    r7 = r7 + r8;
                    r2 = 5 << 16;
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r2 + -21336;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22270;
                        run_22200(); return;
                    }
                case 0x220d0:
                    r6 = readPages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff];
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r6;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r3;
                case 0x220e0:
                    r2 = r7 | 1;
                    r3 = r9 + r7;
                    writePages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff] = r2;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r7;
                        pc=0x22144;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r7;
                    r2 = (r7&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22168;
                        continue;
                    }
                    r8 = r7 >>> 3;
                    r5 = r12 + -21344;
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        r4 = r8 + r0;
                        pc=0x22160;
                        continue;
                    }
                    r4 = r8 + r0;
                case 0x22110:
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = r4 >> 2;
                    r3 = r0 + 1;
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    r3 = r8 << 3;
                    r6 = r3 + r5;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r5 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                case 0x22134:
                    writePages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff] = r6;
                    writePages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff] = r5;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r9;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r9;
                case 0x22144:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x2214c;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x2214c:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x22160:
                    /* Next insn is delay slot */ 
                    r4 = r8 + 3;
                    pc=0x22110;
                    continue;
                case 0x22168:
                    r3 = r7 >>> 9;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r7 >>> 3;
                        pc=0x22188;
                        continue;
                    }
                    r8 = r7 >>> 3;
                    r2 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2221c;
                        run_22200(); return;
                    }
                    r2 = r7 >>> 6;
                    r8 = r2 + 56;
                case 0x22188:
                    r2 = r8 << 3;
                    r10 = r12 + -21344;
                    r6 = r2 + r10;
                    r5 = readPages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff];
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x221f0;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x221e4;
                        continue;
                    }
                case 0x221bc:
                    r5 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x221e4;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x221bc;
                        continue;
                    }
                case 0x221e4:
                    r6 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x22134;
                    continue;
                case 0x221f0:
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r8 + r0;
                        pc=0x22214;
                        run_22200(); return;
                    }
                    r2 = r8 + r0;
                case 0x221f8:
                    r4 = r2 >> 2;
                    r3 = r0 + 1;
                case 0x22200:
                    pc=0x22200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22200() throws ExecutionException { /* 0x22200 - 0x22400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22200:
                    r2 = readPages[(r10+4)>>>12][((r10+4)>>>2)&0x3ff];
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    writePages[(r10+4)>>>12][((r10+4)>>>2)&0x3ff] = r2;
                    pc=0x22134;
                    run_22000(); return;
                case 0x22214:
                    /* Next insn is delay slot */ 
                    r2 = r8 + 3;
                    pc=0x221f8;
                    run_22000(); return;
                case 0x2221c:
                    r2 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + 91;
                        pc=0x22188;
                        run_22000(); return;
                    }
                    r8 = r3 + 91;
                    r2 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22240;
                        continue;
                    }
                    r2 = r7 >>> 12;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 110;
                    pc=0x22188;
                    run_22000(); return;
                case 0x22240:
                    r2 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22258;
                        continue;
                    }
                    r2 = r7 >>> 15;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 119;
                    pc=0x22188;
                    run_22000(); return;
                case 0x22258:
                    r2 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 126;
                        pc=0x22188;
                        run_22000(); return;
                    }
                    r8 = r0 + 126;
                    r2 = r7 >>> 18;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 124;
                    pc=0x22188;
                    run_22000(); return;
                case 0x22270:
                    r11 = r0 + 1;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r9;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r9;
                    writePages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff] = r3;
                    pc=0x220e0;
                    run_22000(); return;
                case 0x22288:
                    r3 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x220d0;
                    run_22000(); return;
                case 0x22294:
                    /* Next insn is delay slot */ 
                    r11 = r0 + 1;
                    pc=0x2209c;
                    run_22000(); return;
                case 0x2229c:
                    r2 = r5 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + r8;
                        pc=0x222cc;
                        continue;
                    }
                    r7 = r7 + r8;
                    r5 = readPages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff];
                    r9 = r9 - r5;
                    r6 = readPages[(r9+12)>>>12][((r9+12)>>>2)&0x3ff];
                    r7 = r7 + r5;
                    r5 = readPages[(r9+8)>>>12][((r9+8)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r6;
                    writePages[(r6+8)>>>12][((r6+8)>>>2)&0x3ff] = r5;
                case 0x222cc:
                    r2 = r7 | 1;
                    writePages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32068)>>>12][((r28+-32068)>>>2)&0x3ff];
                    writePages[(r10+8)>>>12][((r10+8)>>>2)&0x3ff] = r9;
                    r2 = ((r7 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22144;
                        run_22000(); return;
                    }
                    r5 = readPages[(r28+-31684)>>>12][((r28+-31684)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x222f4;
                    pc=0x22400;
                    run_22400(); return;
                case 0x222f4:
                    /* Next insn is delay slot */ 
                    pc=0x22144;
                    run_22000(); return;
                case 0x22400:
                    pc=0x22400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22400() throws ExecutionException { /* 0x22400 - 0x22600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22400:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x2242c;
                    pc=0x2e180;
                    run_2e000(); return;
                case 0x2242c:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    r31=0x22438;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x22438:
                    r2 = 5 << 16;
                    r20 = r2 + -21344;
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22458;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x22458:
                    r18 = r4 & r2;
                    r16 = r18 - r16;
                    r16 = r16 + r17;
                    r16 = r16 + -17;
                    if(r17!=0) {
                    hi = (int)((r16 & 0xffffffffL) % (r17 & 0xffffffffL)); lo = (int)((r16 & 0xffffffffL) / (r17 & 0xffffffffL));
                    }
                    r16 = lo;
                    r16 = r16 + -1;
                    { long hilo = (long)(r16) * ((long)r17); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r16 = lo;
                    r17 = r16 < r17 ? 1 : 0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x224b0;
                        continue;
                    }
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x22498;
                    pc=0x2df20;
                    run_2de00(); return;
                case 0x22498:
                    r3 = r2 + r0;
                    r2 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x224dc;
                        continue;
                    }
                case 0x224b0:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x224b8;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x224b8:
                    r2 = r0 + r0;
                case 0x224bc:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x224dc:
                    r5 = r0 - r16;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x224e8;
                    pc=0x2df20;
                    run_2de00(); return;
                case 0x224e8:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22524;
                        continue;
                    }
                    r4 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = r18 - r16;
                    r2 = r2 | 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    r3 = 5 << 16;
                    r2 = readPages[(r3+-18776)>>>12][((r3+-18776)>>>2)&0x3ff];
                    r4 = r19 + r0;
                    r2 = r2 - r16;
                    /* Next insn is delay slot */ 
                    writePages[(r3+-18776)>>>12][((r3+-18776)>>>2)&0x3ff] = r2;
                    r31=0x2251c;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x2251c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + 1;
                    pc=0x224bc;
                    continue;
                case 0x22524:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x22530;
                    pc=0x2df20;
                    run_2de00(); return;
                case 0x22530:
                    r5 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r3 = r2 + r0;
                    r18 = r2 - r5;
                    r2 = r18 < 16 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x224b0;
                        continue;
                    }
                    r2 = readPages[(r28+-32064)>>>12][((r28+-32064)>>>2)&0x3ff];
                    r4 = r18 | 1;
                    r2 = r3 - r2;
                    r3 = 5 << 16;
                    writePages[(r3+-18776)>>>12][((r3+-18776)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r4;
                    pc=0x224b0;
                    continue;
                case 0x22600:
                    pc=0x22600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22600() throws ExecutionException { /* 0x22600 - 0x22800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22600:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r2 = r4 + r0;
                    r29 = r29 + -24;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r7 = r29 + 32;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2262c;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x2262c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22800:
                    pc=0x22800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22800() throws ExecutionException { /* 0x22800 - 0x22a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22800:
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -24;
                    r7 = r29 + 36;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x22818;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x22818:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x22a00:
                    pc=0x22a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22a00() throws ExecutionException { /* 0x22a00 - 0x22c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22a00:
                    r29 = r29 + -120;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r22;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r31;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r23;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r21;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r20;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r19;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r22 = r5 + r0;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x22a4c;
                        continue;
                    }
                    r18 = r6 + r0;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff] = r2;
                    r17 = r2 + r0;
                case 0x22a4c:
                    r2 = readPages[(r17+56)>>>12][((r17+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ef0;
                        run_22e00(); return;
                    }
                case 0x22a5c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + 264;
                    r2 = r2 & 264;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22ee0;
                        run_22e00(); return;
                    }
                case 0x22a70:
                    r20 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r0 + 29;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22aa8;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22e20;
                        run_22e00(); return;
                    }
                    r2 = r18 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e10;
                        run_22e00(); return;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22ae0;
                        continue;
                    }
                case 0x22aa4:
                    r2 = r0 + 22;
                case 0x22aa8:
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                case 0x22aac:
                    r3 = r0 + -1;
                case 0x22ab0:
                    r31 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r23 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r22 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r21 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r20 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r19 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x22ae0:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r23 = r0 + r0;
                case 0x22ae8:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e00;
                        run_22e00(); return;
                    }
                case 0x22af0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r3 = r4 & 65535;
                    r2 = r3 & 2074;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b2c;
                        continue;
                    }
                    r2 = r3 & 1024;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22c00;
                        run_22c00(); return;
                    }
                    r2 = 2 << 16;
                    r2 = r2 + 27136;
                    if(r20 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22ba8;
                        continue;
                    }
                case 0x22b24:
                    r2 = r4 | 2048;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22b2c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x22b34;
                    pc=0x20600;
                    run_20600(); return;
                case 0x22b34:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22aac;
                        continue;
                    }
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r5 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    pc=r20;
                    r31=0x22b4c;
                    return;
                case 0x22b4c:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22aac;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b84;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22b80;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22b80;
                    pc=0x22000;
                    run_22000(); return;
                case 0x22b80:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x22b84:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                case 0x22b9c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22ba0:
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x22ab0;
                    continue;
                case 0x22ba8:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b24;
                        continue;
                    }
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 16;
                    r31=0x22bc4;
                    pc=0x2df60;
                    run_2de00(); return;
                case 0x22bc4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22be0;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 | 32768;
                    r2 = r2 & 61440;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22bec;
                        continue;
                    }
                case 0x22be0:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x22b24;
                    continue;
                case 0x22bec:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + 1024;
                    r2 = r2 | 1024;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x22c00:
                    pc=0x22c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22c00() throws ExecutionException { /* 0x22c00 - 0x22e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22c00:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r22 + r0;
                        pc=0x22dd8;
                        continue;
                    }
                    r21 = r22 + r0;
                case 0x22c08:
                    if(r23 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22dc4;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r2 = r4 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d98;
                        continue;
                    }
                    r19 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x22c28:
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r19 = r19 - r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d7c;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r19 = r19 - r2;
                case 0x22c48:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22d7c;
                        continue;
                    }
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r19 = r19 + r6;
                    r17 = r2 - r3;
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r19 = r19 - r17;
                    r17 = r17 + r2;
                case 0x22c6c:
                    r2 = r4 & 8192;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cd4;
                        continue;
                    }
                    r2 = r21 < r19 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cd4;
                        continue;
                    }
                    r2 = r19 + r17;
                    r2 = ((r21 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22cd4;
                        continue;
                    }
                    r2 = r21 - r19;
                    r3 = r3 + r2;
                    r2 = r17 - r2;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                        pc=0x22ccc;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22cc8;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22cc4;
                    pc=0x22000;
                    run_22000(); return;
                case 0x22cc4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                case 0x22cc8:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x22ccc:
                    /* Next insn is delay slot */ 
                    r2 = r4 & 65503;
                    pc=0x22b9c;
                    run_22a00(); return;
                case 0x22cd4:
                    r2 = readPages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff];
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r2 = r0 - r2;
                    r19 = r21 & r2;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=r20;
                    r31=0x22cf0;
                    return;
                case 0x22cf0:
                    r3 = r0 + -1;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x22b2c;
                        run_22a00(); return;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                        pc=0x22d2c;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22d28;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x22d28;
                    pc=0x22000;
                    run_22000(); return;
                case 0x22d28:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x22d2c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r17 = r21 - r19;
                    r2 = r2 & 65503;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r16+12;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x22ba0;
                        run_22a00(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x22d48;
                    pc=0x26000;
                    run_26000(); return;
                case 0x22d48:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b2c;
                        run_22a00(); return;
                    }
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b2c;
                        run_22a00(); return;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r3 - r17;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    pc=0x22ba0;
                    run_22a00(); return;
                case 0x22d7c:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r17 = r2 - r3;
                    r19 = r19 - r17;
                    /* Next insn is delay slot */ 
                    r17 = r17 + r6;
                    pc=0x22c6c;
                    continue;
                case 0x22d98:
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    pc=r20;
                    r31=0x22da8;
                    return;
                case 0x22da8:
                    r19 = r2 + r0;
                    r2 = r0 + -1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x22b2c;
                        run_22a00(); return;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x22c28;
                    continue;
                case 0x22dc4:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x22c48;
                    continue;
                case 0x22dd8:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r29 + 16;
                    r31=0x22de8;
                    pc=0x2df60;
                    run_2de00(); return;
                case 0x22de8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22b2c;
                        run_22a00(); return;
                    }
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r21 = r2 + r22;
                    pc=0x22c08;
                    continue;
                case 0x22e00:
                    pc=0x22e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_22e00() throws ExecutionException { /* 0x22e00 - 0x23000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x22e00:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x22e08;
                    pc=0x23800;
                    run_23800(); return;
                case 0x22e08:
                    /* Next insn is delay slot */ 
                    pc=0x22af0;
                    run_22a00(); return;
                case 0x22e10:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22ae0;
                        run_22a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x22aa4;
                    run_22a00(); return;
                case 0x22e20:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x22e28;
                    pc=0x20600;
                    run_20600(); return;
                case 0x22e28:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r2 = r4 & 4096;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22eb4;
                        continue;
                    }
                    r19 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                case 0x22e40:
                    r3 = r4 & 65535;
                    r2 = r3 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e84;
                        continue;
                    }
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r19 = r19 - r6;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e70;
                        continue;
                    }
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    r19 = r19 - r2;
                case 0x22e70:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x22e74:
                    r22 = r22 + r19;
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r0 + 1;
                    pc=0x22ae8;
                    run_22a00(); return;
                case 0x22e84:
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e70;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x22e70;
                        continue;
                    }
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    /* Next insn is delay slot */ 
                    r19 = r19 + r2;
                    pc=0x22e74;
                    continue;
                case 0x22eb4:
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    pc=r20;
                    r31=0x22ec4;
                    return;
                case 0x22ec4:
                    r19 = r2 + r0;
                    r2 = r0 + -1;
                    if(r19 == r2) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x22ab0;
                        run_22a00(); return;
                    }
                    r3 = r0 + -1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x22e40;
                    continue;
                case 0x22ee0:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x22ee8;
                    pc=0x20600;
                    run_20600(); return;
                case 0x22ee8:
                    /* Next insn is delay slot */ 
                    pc=0x22a70;
                    run_22a00(); return;
                case 0x22ef0:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x22ef8;
                    pc=0x21400;
                    run_21400(); return;
                case 0x22ef8:
                    r17 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x22a5c;
                    run_22a00(); return;
                case 0x23000:
                    pc=0x23000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23000() throws ExecutionException { /* 0x23000 - 0x23200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23000:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + 604;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r21 = r5 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r0 + r0;
                        pc=0x23078;
                        continue;
                    }
                    r20 = r0 + r0;
                case 0x23030:
                    r17 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r18 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r17 = r17 + -1;
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23068;
                        continue;
                    }
                    r16 = r18 + 12;
                case 0x23048:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x230a0;
                        continue;
                    }
                case 0x23058:
                    r17 = r17 + -1;
                    r18 = r18 + 92;
                    if(r17 >= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 92;
                        pc=0x23048;
                        continue;
                    }
                    r16 = r16 + 92;
                case 0x23068:
                    r19 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23030;
                        continue;
                    }
                case 0x23078:
                    r2 = r20 + r0;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x230a0:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    pc=r21;
                    r31=0x230a8;
                    return;
                case 0x230a8:
                    /* Next insn is delay slot */ 
                    r20 = r20 | r2;
                    pc=0x23058;
                    continue;
                case 0x23200:
                    pc=0x23200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23200() throws ExecutionException { /* 0x23200 - 0x23400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23200:
                    { long hilo = (long)(r6) * ((long)r5); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -56;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    r18 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r29 + 32;
                    r3 = r0 + 1;
                    r4 = r7 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r17 = lo;
                    r16 = r6 + r0;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x2324c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x2324c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23270;
                        continue;
                    }
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23264;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x23264:
                    r2 = r17 - r2;
                    if(r18!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r18 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r18 & 0xffffffffL));
                    }
                    r16 = lo;
                case 0x23270:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x23400:
                    pc=0x23400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23400() throws ExecutionException { /* 0x23400 - 0x23600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23400:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19196)>>>12][((r2+-19196)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = r4 + r0;
                    r18 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r6 + r0;
                        pc=0x23448;
                        continue;
                    }
                    r17 = r6 + r0;
                    r4 = readPages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x234dc;
                        continue;
                    }
                case 0x23448:
                    r3 = readPages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19196)>>>12][((r1+-19196)>>>2)&0x3ff] = r0;
                    r2 = r3 < r19 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23484;
                        continue;
                    }
                    r2 = r3 << 2;
                    r2 = r2 + r18;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    writePages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff] = r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r6 = r4 + r0;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x234b4;
                        continue;
                    }
                case 0x23484:
                    r2 = 5 << 16;
                    r4 = r2 + -19588;
                    r3 = r0 + -1;
                    writePages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff] = r4;
                case 0x23494:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x234b4:
                    addr=r4+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x234dc;
                        continue;
                    }
                    r4 = r4 + 1;
                    writePages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff] = r4;
                    addr=r6+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2369c;
                        run_23600(); return;
                    }
                case 0x234dc:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    r16 = r0 + 58;
                    r4 = r4 + 1;
                    writePages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff] = r4;
                    r1 = 5 << 16;
                    writePages[(r1+-19200)>>>12][((r1+-19200)>>>2)&0x3ff] = r5;
                    if(r5 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x23628;
                        run_23600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x23504;
                    pc=0x27000;
                    run_27000(); return;
                case 0x23504:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23628;
                        run_23600(); return;
                    }
                    addr=r2+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r5 = tmp;
                    if(r5 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x23558;
                        continue;
                    }
                    r2 = readPages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19192)>>>12][((r1+-19192)>>>2)&0x3ff] = r0;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23548;
                        continue;
                    }
                    r2 = readPages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff];
                    r8 = r2 + 1;
                    writePages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff] = r8;
                case 0x23548:
                    r3 = 5 << 16;
                    r3 = readPages[(r3+-19200)>>>12][((r3+-19200)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23494;
                    continue;
                case 0x23558:
                    r3 = readPages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23598;
                        continue;
                    }
                    r8 = readPages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff];
                case 0x23574:
                    r1 = 5 << 16;
                    writePages[(r1+-19192)>>>12][((r1+-19192)>>>2)&0x3ff] = r3;
                    r2 = 5 << 16;
                    r2 = r2 + -19588;
                    r3 = r8 + 1;
                    writePages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff] = r2;
                    writePages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    pc=0x23548;
                    continue;
                case 0x23598:
                    r8 = readPages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff];
                    r8 = r8 + 1;
                    r2 = r8 < r19 ? 1 : 0;
                    writePages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff] = r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23614;
                        run_23600(); return;
                    }
                    r2 = 5 << 16;
                    r4 = r2 + -19588;
                    writePages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff] = r4;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 58;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x23494;
                        continue;
                    }
                    r2 = readPages[(r28+-32092)>>>12][((r28+-32092)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x235e8;
                        continue;
                    }
                case 0x235e0:
                    /* Next insn is delay slot */ 
                    r3 = r0 + 63;
                    pc=0x23494;
                    continue;
                case 0x235e8:
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r7 = 5 << 16;
                    r7 = readPages[(r7+-19200)>>>12][((r7+-19200)>>>2)&0x3ff];
                case 0x23600:
                    pc=0x23600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23600() throws ExecutionException { /* 0x23600 - 0x23800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23600:
                    r5 = r5 + -27928;
                case 0x23604:
                    /* Next insn is delay slot */ 
                    r31=0x2360c;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x2360c:
                    /* Next insn is delay slot */ 
                    pc=0x235e0;
                    run_23400(); return;
                case 0x23614:
                    r2 = r8 << 2;
                    r2 = r2 + r18;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x23574;
                    run_23400(); return;
                case 0x23628:
                    r7 = 5 << 16;
                    r7 = readPages[(r7+-19200)>>>12][((r7+-19200)>>>2)&0x3ff];
                    r2 = r0 + 45;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x23494;
                        run_23400(); return;
                    }
                    r3 = r0 + -1;
                    r2 = readPages[(r28+-32080)>>>12][((r28+-32080)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23664;
                        continue;
                    }
                    r2 = readPages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff];
                    r8 = r2 + 1;
                    writePages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff] = r8;
                case 0x23664:
                    r2 = readPages[(r28+-32092)>>>12][((r28+-32092)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x235e0;
                        run_23400(); return;
                    }
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x235e0;
                        run_23400(); return;
                    }
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -27888;
                    pc=0x23604;
                    continue;
                case 0x2369c:
                    r8 = r3 + 1;
                    writePages[(r28+-32088)>>>12][((r28+-32088)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    pc=0x23484;
                    run_23400(); return;
                case 0x23800:
                    pc=0x23800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23800() throws ExecutionException { /* 0x23800 - 0x23a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23800:
                    r29 = r29 + -96;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r31;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r16 = r4 + r0;
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2390c;
                        continue;
                    }
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2394c;
                        continue;
                    }
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 16;
                    r31=0x23844;
                    pc=0x2df60;
                    run_2de00(); return;
                case 0x23844:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x23948;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r17 = r0 + 1024;
                    r2 = r2 & 61440;
                    r3 = r2 ^ 8192;
                    r18 = (r3&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = r0 | 32768;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x23924;
                        continue;
                    }
                case 0x2386c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 2048;
                case 0x23878:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1024;
                    r31=0x23888;
                    pc=0x24200;
                    run_24200(); return;
                case 0x23888:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 + r0;
                        pc=0x238fc;
                        continue;
                    }
                    r5 = r2 + r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r2 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r3 = 2 << 16;
                    r3 = r3 + 4096;
                    r4 = r4 | 128;
                    writePages[(r2+60)>>>12][((r2+60)>>>2)&0x3ff] = r3;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r4&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r5;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r5;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r17;
                        pc=0x238d4;
                        continue;
                    }
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r17;
                case 0x238bc:
                    r31 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r18 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x238d4:
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r31=0x238e0;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x238e0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x238bc;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x238bc;
                    continue;
                case 0x238fc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2390c:
                    r3 = r16 + 67;
                    r2 = r0 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r2;
                    pc=0x238bc;
                    continue;
                case 0x23924:
                    r2 = 2 << 16;
                    r3 = readPages[(r16+40)>>>12][((r16+40)>>>2)&0x3ff];
                    r2 = r2 + 27136;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2386c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r2 = r2 | 1024;
                    pc=0x23878;
                    continue;
                case 0x23948:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                case 0x2394c:
                    r18 = r0 + r0;
                    r17 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r2 = r3 | 2048;
                    pc=0x23878;
                    continue;
                case 0x23a00:
                    pc=0x23a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23a00() throws ExecutionException { /* 0x23a00 - 0x23c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23a00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x23a18;
                    pc=0x24200;
                    run_24200(); return;
                case 0x23a18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23c00:
                    pc=0x23c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23c00() throws ExecutionException { /* 0x23c00 - 0x23e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23c00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x23c18;
                    pc=0x22000;
                    run_22000(); return;
                case 0x23c18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x23e00:
                    pc=0x23e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_23e00() throws ExecutionException { /* 0x23e00 - 0x24000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x23e00:
                    r29 = r29 + -56;
                    r2 = 5 << 16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    r23 = r2 + -21344;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r20 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r30;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r3 = readPages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r22 = r3 & r2;
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19188)>>>12][((r2+-19188)>>>2)&0x3ff];
                    r30 = r4 + r0;
                    r5 = r5 + r2;
                    /* Next insn is delay slot */ 
                    r17 = r5 + 16;
                    r31=0x23e5c;
                    pc=0x2e180;
                    run_2e000(); return;
                case 0x23e5c:
                    r19 = r2 + r0;
                    r2 = readPages[(r28+-32064)>>>12][((r28+-32064)>>>2)&0x3ff];
                    r21 = r0 + -1;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        r18 = r20 + r22;
                        pc=0x23e80;
                        continue;
                    }
                    r18 = r20 + r22;
                    r2 = r17 + r19;
                    r2 = r2 + -1;
                    r3 = r0 - r19;
                    r17 = r2 & r3;
                case 0x23e80:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x23e8c;
                    pc=0x2df20;
                    run_2de00(); return;
                case 0x23e8c:
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x23ea8;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ed8;
                        continue;
                    }
                    if(r20 == r23) {
                        /* Next insn is delay slot */ 
                        pc=0x23ed8;
                        continue;
                    }
                case 0x23ea8:
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r30 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x23ed8:
                    r21 = 5 << 16;
                    r2 = readPages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff];
                    r5 = r19 + -1;
                    r2 = r2 + r17;
                    if(r16 == r18) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff] = r2;
                        pc=0x24044;
                        run_24000(); return;
                    }
                    writePages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff] = r2;
                case 0x23ef0:
                    r3 = readPages[(r28+-32064)>>>12][((r28+-32064)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24038;
                        run_24000(); return;
                    }
                    r2 = readPages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff];
                    r3 = r16 - r18;
                    r2 = r2 + r3;
                    writePages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff] = r2;
                case 0x23f10:
                    r3 = r16 & 7;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x23f28;
                        continue;
                    }
                    r18 = r0 + r0;
                    r2 = r0 + 8;
                    r18 = r2 - r3;
                    r16 = r16 + r18;
                case 0x23f28:
                    r2 = r16 + r17;
                    r2 = r2 & r5;
                    r2 = r19 - r2;
                    r18 = r18 + r2;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r18 + r0;
                    r31=0x23f44;
                    pc=0x2df20;
                    run_2de00(); return;
                case 0x23f44:
                    r3 = r2 + r0;
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2402c;
                        run_24000(); return;
                    }
                case 0x23f54:
                    r2 = readPages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff];
                    r2 = r2 + r18;
                    writePages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r4 = r2 + -21344;
                    r2 = r3 - r16;
                    r2 = r2 + r18;
                    r3 = r2 | 1;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r16;
                    if(r20 == r4) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                        pc=0x23fd0;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    r2 = (r22&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23f9c;
                        continue;
                    }
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    pc=0x23ea8;
                    continue;
                case 0x23f9c:
                    r2 = readPages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff];
                    r4 = r22 + -12;
                    r3 = r0 + -8;
                    r22 = r4 & r3;
                    r2 = r2 & 1;
                    r2 = r2 | r22;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r4 = r20 + r22;
                    r3 = r0 + 5;
                    r2 = (r22&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r3;
                        pc=0x24018;
                        run_24000(); return;
                    }
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r3;
                case 0x23fd0:
                    r3 = readPages[(r21+-18776)>>>12][((r21+-18776)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19184)>>>12][((r2+-19184)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ff4;
                        continue;
                    }
                    r1 = 5 << 16;
                    writePages[(r1+-19184)>>>12][((r1+-19184)>>>2)&0x3ff] = r3;
                case 0x23ff4:
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19180)>>>12][((r2+-19180)>>>2)&0x3ff];
                case 0x24000:
                    pc=0x24000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24000() throws ExecutionException { /* 0x24000 - 0x24200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24000:
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ea8;
                        run_23e00(); return;
                    }
                    r1 = 5 << 16;
                    /* Next insn is delay slot */ 
                    writePages[(r1+-19180)>>>12][((r1+-19180)>>>2)&0x3ff] = r3;
                    pc=0x23ea8;
                    run_23e00(); return;
                case 0x24018:
                    r5 = r20 + 8;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x24024;
                    pc=0x22000;
                    run_22000(); return;
                case 0x24024:
                    /* Next insn is delay slot */ 
                    pc=0x23fd0;
                    run_23e00(); return;
                case 0x2402c:
                    r18 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r16 + r0;
                    pc=0x23f54;
                    run_23e00(); return;
                case 0x24038:
                    writePages[(r28+-32064)>>>12][((r28+-32064)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x23f10;
                    run_23e00(); return;
                case 0x24044:
                    r2 = r16 & r5;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x23ef0;
                        run_23e00(); return;
                    }
                    r2 = r17 + r22;
                    r3 = readPages[(r23+8)>>>12][((r23+8)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    /* Next insn is delay slot */ 
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    pc=0x23fd0;
                    run_23e00(); return;
                case 0x24200:
                    pc=0x24200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24200() throws ExecutionException { /* 0x24200 - 0x24400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24200:
                    r5 = r5 + 11;
                    r29 = r29 + -40;
                    r2 = (r5&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + 16;
                        pc=0x24238;
                        continue;
                    }
                    r17 = r0 + 16;
                    r2 = r0 + -8;
                    r17 = r5 & r2;
                case 0x24238:
                    if(r17 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x242b0;
                        continue;
                    }
                    r2 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x24248;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x24248:
                    r2 = (r17&0xffffffffL) < (504&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2473c;
                        run_24600(); return;
                    }
                    r20 = 5 << 16;
                    r2 = r20 + -21344;
                    r5 = r17 + r2;
                    r16 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r8 = r17 >>> 3;
                    if(r16 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x242d0;
                        continue;
                    }
                case 0x24270:
                    r3 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r4 = r3 & r2;
                case 0x2427c:
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r7;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r5;
                case 0x24290:
                    r3 = r16 + r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                case 0x242a0:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x242a4:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x242ac;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x242ac:
                    r2 = r16 + 8;
                case 0x242b0:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x242d0:
                    r5 = r16 + 8;
                    r16 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    if(r16 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x24270;
                        continue;
                    }
                    r8 = r8 + 2;
                case 0x242e8:
                    r14 = 5 << 16;
                    r7 = r14 + -21336;
                    r16 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r16 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x24378;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r4 = r2 & r3;
                    r6 = r4 - r17;
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2470c;
                        run_24600(); return;
                    }
                    writePages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff] = r7;
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r7;
                        pc=0x24290;
                        continue;
                    }
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r7;
                    r2 = (r4&0xffffffffL) < (512&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24604;
                        run_24600(); return;
                    }
                    r6 = r4 >>> 3;
                    r5 = r7 + -8;
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        r4 = r6 + r0;
                        pc=0x245fc;
                        run_24400(); return;
                    }
                    r4 = r6 + r0;
                case 0x24344:
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = r4 >> 2;
                    r3 = r0 + 1;
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    r3 = r6 << 3;
                    r7 = r3 + r5;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                    r5 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                case 0x24368:
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r7;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r5;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r16;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r16;
                case 0x24378:
                    if(r8 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r8 + r0;
                        pc=0x245f4;
                        run_24400(); return;
                    }
                    r3 = r8 + r0;
                case 0x24380:
                    r3 = r3 >> 2;
                    r2 = r0 + 1;
                    r20 = 5 << 16;
                    r7 = r2 << (r3&0x1f);
                    r2 = r20 + -21344;
                    r4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x244d8;
                        run_24400(); return;
                    }
                    r2 = r7 & r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x243e4;
                        continue;
                    }
                    r2 = r0 + -4;
                    r2 = r8 & r2;
                    r7 = r7 << 1;
                    r8 = r2 + 4;
                    r2 = r7 & r4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x243e4;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x243d4:
                    r7 = r7 << 1;
                    r2 = r7 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 4;
                        pc=0x243d4;
                        continue;
                    }
                    r8 = r8 + 4;
                case 0x243e4:
                    r2 = 5 << 16;
                    r13 = r2 + -21344;
                    r12 = r8 << 3;
                    r15 = r13 + r0;
                case 0x243f4:
                    r5 = r12 + r13;
                    r11 = r8 + r0;
                    r3 = r5 + r0;
                case 0x24400:
                    pc=0x24400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24400() throws ExecutionException { /* 0x24400 - 0x24600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24400:
                    r10 = r5 + 12;
                case 0x24404:
                    r16 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2444c;
                        continue;
                    }
                    r9 = r0 + -4;
                case 0x24418:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & r9;
                    r6 = r4 - r17;
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x245b0;
                        continue;
                    }
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2458c;
                        continue;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x24418;
                        continue;
                    }
                case 0x2444c:
                    r8 = r8 + 1;
                    r2 = r8 & 3;
                    r3 = r3 + 8;
                    r10 = r10 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r12 = r12 + 8;
                        pc=0x24404;
                        continue;
                    }
                    r12 = r12 + 8;
                    r3 = r5 + 8;
                case 0x24468:
                    r2 = r11 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24578;
                        continue;
                    }
                    r3 = r3 + -8;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r5 = r5 + -8;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        r11 = r11 + -1;
                        pc=0x24468;
                        continue;
                    }
                    r11 = r11 + -1;
                case 0x24488:
                    r20 = 5 << 16;
                    r2 = r20 + -21344;
                    r2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r7 = r7 << 1;
                    r3 = ((r2 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x244d8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x244d8;
                        continue;
                    }
                    r2 = r7 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x243f4;
                        run_24200(); return;
                    }
                    r3 = readPages[(r15+4)>>>12][((r15+4)>>>2)&0x3ff];
                case 0x244bc:
                    r7 = r7 << 1;
                    r2 = r7 & r3;
                    r8 = r8 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r12 = r12 + 32;
                        pc=0x244bc;
                        continue;
                    }
                    r12 = r12 + 32;
                    /* Next insn is delay slot */ 
                    pc=0x243f4;
                    run_24200(); return;
                case 0x244d8:
                    r19 = r20 + -21344;
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r16 = r0 + -4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 & r16;
                    r6 = r2 - r17;
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2450c;
                        continue;
                    }
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24558;
                        continue;
                    }
                case 0x2450c:
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x24518;
                    pc=0x23e00;
                    run_23e00(); return;
                case 0x24518:
                    r3 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 & r16;
                    r6 = r2 - r17;
                    r2 = ((r2 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24548;
                        continue;
                    }
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24558;
                        continue;
                    }
                case 0x24548:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x24550;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x24550:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x242b0;
                    run_24200(); return;
                case 0x24558:
                    r4 = r20 + -21344;
                    r16 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    r2 = r17 | 1;
                    r3 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r2 = r6 | 1;
                    pc=0x242a0;
                    run_24200(); return;
                case 0x24578:
                    r2 = readPages[(r13+4)>>>12][((r13+4)>>>2)&0x3ff];
                    r3 = ~(r0 | r7);
                    r2 = r2 & r3;
                    /* Next insn is delay slot */ 
                    writePages[(r13+4)>>>12][((r13+4)>>>2)&0x3ff] = r2;
                    pc=0x24488;
                    continue;
                case 0x2458c:
                    r3 = r16 + r4;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r7;
                    /* Next insn is delay slot */ 
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r5;
                    pc=0x242a4;
                    run_24200(); return;
                case 0x245b0:
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r2 = r17 | 1;
                    r4 = r16 + r17;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r14 + -21336;
                    writePages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff] = r7;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r5;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r4;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r3 = r6 | 1;
                    r2 = r4 + r6;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r6;
                    pc=0x242a4;
                    run_24200(); return;
                case 0x245f4:
                    /* Next insn is delay slot */ 
                    r3 = r8 + 3;
                    pc=0x24380;
                    run_24200(); return;
                case 0x245fc:
                    /* Next insn is delay slot */ 
                    r4 = r6 + 3;
                    pc=0x24344;
                    run_24200(); return;
                case 0x24600:
                    pc=0x24600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24600() throws ExecutionException { /* 0x24600 - 0x24800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24600:
                    r4 = r6 + 3;
                case 0x24604:
                    r3 = r4 >>> 9;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r4 >>> 3;
                        pc=0x24624;
                        continue;
                    }
                    r6 = r4 >>> 3;
                    r2 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x246b8;
                        continue;
                    }
                    r2 = r4 >>> 6;
                    r6 = r2 + 56;
                case 0x24624:
                    r2 = r6 << 3;
                    r9 = r20 + -21344;
                    r7 = r2 + r9;
                    r5 = readPages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff];
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x2468c;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24680;
                        continue;
                    }
                case 0x24658:
                    r5 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r5 == r7) {
                        /* Next insn is delay slot */ 
                        pc=0x24680;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r2 & r3;
                    r2 = ((r4 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24658;
                        continue;
                    }
                case 0x24680:
                    r7 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x24368;
                    run_24200(); return;
                case 0x2468c:
                    if(r6 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r6 + r0;
                        pc=0x246b0;
                        continue;
                    }
                    r2 = r6 + r0;
                case 0x24694:
                    r4 = r2 >> 2;
                    r3 = r0 + 1;
                    r2 = readPages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff];
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    /* Next insn is delay slot */ 
                    writePages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff] = r2;
                    pc=0x24368;
                    run_24200(); return;
                case 0x246b0:
                    /* Next insn is delay slot */ 
                    r2 = r6 + 3;
                    pc=0x24694;
                    continue;
                case 0x246b8:
                    r2 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r3 + 91;
                        pc=0x24624;
                        continue;
                    }
                    r6 = r3 + 91;
                    r2 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x246dc;
                        continue;
                    }
                    r2 = r4 >>> 12;
                    /* Next insn is delay slot */ 
                    r6 = r2 + 110;
                    pc=0x24624;
                    continue;
                case 0x246dc:
                    r2 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x246f4;
                        continue;
                    }
                    r2 = r4 >>> 15;
                    /* Next insn is delay slot */ 
                    r6 = r2 + 119;
                    pc=0x24624;
                    continue;
                case 0x246f4:
                    r2 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + 126;
                        pc=0x24624;
                        continue;
                    }
                    r6 = r0 + 126;
                    r2 = r4 >>> 18;
                    /* Next insn is delay slot */ 
                    r6 = r2 + 124;
                    pc=0x24624;
                    continue;
                case 0x2470c:
                    r4 = r16 + r17;
                    r2 = r17 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r3 = r4 + r6;
                    r2 = r6 | 1;
                    writePages[(r7+12)>>>12][((r7+12)>>>2)&0x3ff] = r4;
                    writePages[(r7+8)>>>12][((r7+8)>>>2)&0x3ff] = r4;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r7;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r7;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r6;
                    pc=0x242a4;
                    run_24200(); return;
                case 0x2473c:
                    r3 = r17 >>> 9;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r17 >>> 3;
                        pc=0x2475c;
                        continue;
                    }
                    r8 = r17 >>> 3;
                    r2 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x247c4;
                        continue;
                    }
                    r2 = r17 >>> 6;
                    r8 = r2 + 56;
                case 0x2475c:
                    r20 = 5 << 16;
                    r3 = r8 << 3;
                    r2 = r20 + -21344;
                    r3 = r3 + r2;
                    r16 = readPages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff];
                    if(r16 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x247b4;
                        continue;
                    }
                    r5 = r0 + -4;
                case 0x24780:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r4 = r2 & r5;
                    r6 = r4 - r17;
                    r2 = r6 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x247bc;
                        continue;
                    }
                    if(r6 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2427c;
                        run_24200(); return;
                    }
                    r16 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    if(r16 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x24780;
                        continue;
                    }
                case 0x247b4:
                    /* Next insn is delay slot */ 
                    r8 = r8 + 1;
                    pc=0x242e8;
                    run_24200(); return;
                case 0x247bc:
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x247b4;
                    continue;
                case 0x247c4:
                    r2 = (r3&0xffffffffL) < (21&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r3 + 91;
                        pc=0x2475c;
                        continue;
                    }
                    r8 = r3 + 91;
                    r2 = (r3&0xffffffffL) < (85&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x247e8;
                        continue;
                    }
                    r2 = r17 >>> 12;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 110;
                    pc=0x2475c;
                    continue;
                case 0x247e8:
                    r2 = (r3&0xffffffffL) < (341&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24800;
                        run_24800(); return;
                    }
                    r2 = r17 >>> 15;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 119;
                    pc=0x2475c;
                    continue;
                case 0x24800:
                    pc=0x24800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24800() throws ExecutionException { /* 0x24800 - 0x24a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24800:
                    r2 = (r3&0xffffffffL) < (1365&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r0 + 126;
                        pc=0x2475c;
                        run_24600(); return;
                    }
                    r8 = r0 + 126;
                    r2 = r17 >>> 18;
                    /* Next insn is delay slot */ 
                    r8 = r2 + 124;
                    pc=0x2475c;
                    run_24600(); return;
                case 0x24a00:
                    pc=0x24a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24a00() throws ExecutionException { /* 0x24a00 - 0x24c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24a00:
                    r7 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 & 255;
                        pc=0x24ac4;
                        continue;
                    }
                    r5 = r5 & 255;
                    r2 = r4 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ac4;
                        continue;
                    }
                    r10 = r4 + r0;
                    r11 = r0 + r0;
                    r3 = r0 + r0;
                case 0x24a24:
                    r2 = r11 << 8;
                    r3 = r3 + 1;
                    r11 = r2 + r5;
                    r2 = (r3&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24a24;
                        continue;
                    }
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24ac0;
                        continue;
                    }
                    r13 = 65278 << 16;
                    r12 = 32896 << 16;
                    r13 = r13 | 65279;
                    r12 = r12 | 32896;
                    r9 = r10 + r0;
                case 0x24a58:
                    r2 = readPages[(r9+0)>>>12][((r9+0)>>>2)&0x3ff];
                    r2 = r2 ^ r11;
                    r3 = r2 + r13;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r12;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x24aac;
                        continue;
                    }
                    r4 = r10 + r0;
                    r8 = r0 + r0;
                    r3 = r10 + r0;
                case 0x24a88:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r4 + r0;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x24b00;
                        continue;
                    }
                    r8 = r8 + 1;
                    r2 = (r8&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r4 = r4 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x24a88;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x24aac:
                    r6 = r6 + -4;
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r10 = r10 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r9 + 4;
                        pc=0x24a58;
                        continue;
                    }
                    r9 = r9 + 4;
                case 0x24ac0:
                    r4 = r10 + r0;
                case 0x24ac4:
                    r6 = r6 + -1;
                    r2 = r0 + -1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x24afc;
                        continue;
                    }
                    r8 = r0 + -1;
                    r3 = r4 + r0;
                case 0x24adc:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r4 + r0;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x24b00;
                        continue;
                    }
                    r6 = r6 + -1;
                    r4 = r4 + 1;
                    if(r6 != r8) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x24adc;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x24afc:
                    r7 = r0 + r0;
                case 0x24b00:
                    /* Next insn is delay slot */ 
                    r2 = r7 + r0;
                    pc=r31;
                    return;
                case 0x24c00:
                    pc=0x24c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24c00() throws ExecutionException { /* 0x24c00 - 0x24e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24c00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x24e00:
                    pc=0x24e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_24e00() throws ExecutionException { /* 0x24e00 - 0x25000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x24e00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25000:
                    pc=0x25000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25000() throws ExecutionException { /* 0x25000 - 0x25200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2502c;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25068;
                        continue;
                    }
                case 0x2502c:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x25038;
                    pc=0x27400;
                    run_27400(); return;
                case 0x25038:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2504c;
                        continue;
                    }
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    r31=0x2504c;
                    pc=0x3e200;
                    run_3e200(); return;
                case 0x2504c:
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r0 + 10;
                    r31=0x25058;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x25058:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x25068:
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x25074;
                    pc=0x3e200;
                    run_3e200(); return;
                case 0x25074:
                    r4 = 5 << 16;
                    r5 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r4 + -19564;
                    r31=0x25084;
                    pc=0x3e200;
                    run_3e200(); return;
                case 0x25084:
                    /* Next insn is delay slot */ 
                    pc=0x2502c;
                    continue;
                case 0x25200:
                    pc=0x25200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25200() throws ExecutionException { /* 0x25200 - 0x25400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x25218;
                    pc=0x25000;
                    run_25000(); return;
                case 0x25218:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25400:
                    pc=0x25400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25400() throws ExecutionException { /* 0x25400 - 0x25600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25400:
                    r29 = r29 + -128;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r30;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r23;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r22;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r21;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f31;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f30;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = f29;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = f28;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = f27;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = f26;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = f25;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = f24;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = f23;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = f22;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = f21;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = f20;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r4;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r5;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 114;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x254f4;
                        continue;
                    }
                    r2 = r0 + 119;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x254f4;
                        continue;
                    }
                case 0x25480:
                    /* Next insn is delay slot */ 
                    r31=0x25488;
                    pc=0x20000;
                    run_20000(); return;
                case 0x25488:
                    r3 = r0 + 22;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x25490:
                    r2 = r0 + r0;
                case 0x25494:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r30 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r23 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r22 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    f31 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    f30 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    f29 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    f28 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    f27 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    f26 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    f25 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    f24 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    f23 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    f22 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    f21 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    f20 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 128;
                    pc=r31;
                    return;
                case 0x254f4:
                    r3 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25480;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r0 + 12;
                    r31=0x25514;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x25514:
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25494;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r29 + 24;
                    r31=0x25530;
                    pc=0x31600;
                    run_31600(); return;
                case 0x25530:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x25694;
                        run_25600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x25540;
                    pc=0x33600;
                    run_33600(); return;
                case 0x25540:
                    r17 = r2 + r0;
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2567c;
                        run_25600(); return;
                    }
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x255d0;
                        continue;
                    }
                    r2 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 114;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x255b4;
                        continue;
                    }
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r5 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x25580;
                    pc=0x3de00;
                    run_3de00(); return;
                case 0x25580:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                case 0x25584:
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x2558c;
                    pc=0x29400;
                    run_29400(); return;
                case 0x2558c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r2 = readPages[(r2+-19176)>>>12][((r2+-19176)>>>2)&0x3ff];
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r16;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r17;
                    r1 = 5 << 16;
                    writePages[(r1+-19176)>>>12][((r1+-19176)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r2 = r16 + r0;
                    pc=0x25494;
                    continue;
                case 0x255b4:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x255c4;
                    pc=0x3de00;
                    run_3de00(); return;
                case 0x255c4:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x25584;
                    continue;
                case 0x255d0:
                    r2 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 114;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2564c;
                        run_25600(); return;
                    }
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25630;
                        run_25600(); return;
                    }
                case 0x255f8:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                case 0x255fc:
                    /* Next insn is delay slot */ 
                    r31=0x25604;
                    pc=0x29400;
                    run_29400(); return;
                case 0x25600:
                    pc=0x25600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25600() throws ExecutionException { /* 0x25600 - 0x25800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25600:
                case 0x25604:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r6 = 5 << 16;
                    r7 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r4 = r4 + -19560;
                    r5 = r5 + -19552;
                    r6 = r6 + -19548;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    r31=0x25628;
                    pc=0x3da00;
                    run_3da00(); return;
                case 0x25628:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 127;
                    r31=0x25630;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x25630:
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x25638;
                    pc=0x31800;
                    run_31800(); return;
                case 0x25638:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x25644;
                    pc=0x29400;
                    run_29400(); return;
                case 0x25644:
                    /* Next insn is delay slot */ 
                    pc=0x255f8;
                    run_25400(); return;
                case 0x2564c:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x25670;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1;
                    r31=0x25664;
                    pc=0x31800;
                    run_31800(); return;
                case 0x25664:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x25670;
                    pc=0x29400;
                    run_29400(); return;
                case 0x25670:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x255fc;
                    run_25400(); return;
                case 0x2567c:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x25688;
                    pc=0x29400;
                    run_29400(); return;
                case 0x25688:
                    r4 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x25694;
                    pc=0x29400;
                    run_29400(); return;
                case 0x25694:
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x256a0;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x256a0:
                    /* Next insn is delay slot */ 
                    pc=0x25490;
                    run_25400(); return;
                case 0x25800:
                    pc=0x25800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25800() throws ExecutionException { /* 0x25800 - 0x25a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25800:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r17 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x25828;
                    pc=0x20400;
                    run_20400(); return;
                case 0x25828:
                    r16 = 5 << 16;
                    r16 = readPages[(r16+-19176)>>>12][((r16+-19176)>>>2)&0x3ff];
                    r18 = r0 + r0;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25860;
                        continue;
                    }
                case 0x2583c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x25884;
                        continue;
                    }
                    r18 = r16 + r0;
                    r16 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2583c;
                        continue;
                    }
                case 0x25860:
                    r2 = r0 + -1;
                case 0x25864:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x25884:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x25860;
                        continue;
                    }
                    r20 = r0 + -1;
                    r19 = r0 + 4;
                case 0x25894:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r5 = r29 + 16;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x258a4;
                    pc=0x31a00;
                    run_31a00(); return;
                case 0x258a4:
                    if(r2 != r20) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x258c4;
                        continue;
                    }
                    r17 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x258b4;
                    pc=0x20000;
                    run_20000(); return;
                case 0x258b4:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    if(r3 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x25894;
                        continue;
                    }
                case 0x258c4:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x258fc;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                case 0x258d8:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x258e0;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x258e0:
                    r2 = r0 + -1;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x258f4;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x258f4:
                    /* Next insn is delay slot */ 
                    r2 = r3 + r0;
                    pc=0x25864;
                    continue;
                case 0x258fc:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19176)>>>12][((r1+-19176)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x258d8;
                    continue;
                case 0x25a00:
                    pc=0x25a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25a00() throws ExecutionException { /* 0x25a00 - 0x25c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25a00:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    r5 = readPages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r29 + 32;
                    r31=0x25a20;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x25a20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25c00:
                    pc=0x25c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25c00() throws ExecutionException { /* 0x25c00 - 0x25e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25c00:
                    writePages[(r29+4)>>>12][((r29+4)>>>2)&0x3ff] = r5;
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    r5 = r4 + r0;
                    r4 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    r6 = r29 + 28;
                    /* Next insn is delay slot */ 
                    writePages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff] = r2;
                    r31=0x25c2c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x25c2c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x25e00:
                    pc=0x25e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_25e00() throws ExecutionException { /* 0x25e00 - 0x26000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x25e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r0 + 9;
                    r3 = r3 & 9;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x25e2c;
                        continue;
                    }
                    r5 = r0 + r0;
                case 0x25e1c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x25e2c:
                    /* Next insn is delay slot */ 
                    r31=0x25e34;
                    pc=0x20600;
                    run_20600(); return;
                case 0x25e34:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x25e1c;
                    continue;
                case 0x26000:
                    pc=0x26000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26000() throws ExecutionException { /* 0x26000 - 0x26200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26030;
                        continue;
                    }
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x26030:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x261b0;
                        continue;
                    }
                case 0x26040:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    r3 = r4 & 65535;
                    r2 = r3 & 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x260dc;
                        continue;
                    }
                    r5 = r0 + -1;
                    r2 = r3 & 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26168;
                        continue;
                    }
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x260dc;
                        continue;
                    }
                    r2 = r3 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2613c;
                        continue;
                    }
                case 0x2607c:
                    r2 = r4 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x26084:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2612c;
                        continue;
                    }
                case 0x26094:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26114;
                        continue;
                    }
                case 0x260a8:
                    r5 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = readPages[(r16+32)>>>12][((r16+32)>>>2)&0x3ff];
                    r4 = readPages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff];
                    r6 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r5;
                    pc=r2;
                    r31=0x260c0;
                    return;
                case 0x260c0:
                    r3 = r2 + r0;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r5 = r0 + r0;
                    r2 = r2 & 57343;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        addr=r16+12;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x260f0;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x260dc:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x260f0:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26108;
                        continue;
                    }
                    r2 = r2 | 32;
                case 0x260fc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r5 = r0 + -1;
                    pc=0x260dc;
                    continue;
                case 0x26108:
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r2 = r2 | 64;
                    pc=0x260fc;
                    continue;
                case 0x26114:
                    r5 = 2 << 16;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + 24064;
                    r31=0x26124;
                    pc=0x23000;
                    run_23000(); return;
                case 0x26124:
                    /* Next insn is delay slot */ 
                    pc=0x260a8;
                    continue;
                case 0x2612c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x26134;
                    pc=0x23800;
                    run_23800(); return;
                case 0x26134:
                    /* Next insn is delay slot */ 
                    pc=0x26094;
                    continue;
                case 0x2613c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x26144;
                    pc=0x20600;
                    run_20600(); return;
                case 0x26144:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x260dc;
                        continue;
                    }
                    r5 = r0 + -1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r4 = r2 + r0;
                    pc=0x2607c;
                    continue;
                case 0x26168:
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26084;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26190;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26190;
                    pc=0x22000;
                    run_22000(); return;
                case 0x26190:
                    r2 = readPages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff];
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                        pc=0x26084;
                        continue;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    pc=0x260dc;
                    continue;
                case 0x261b0:
                    /* Next insn is delay slot */ 
                    r31=0x261b8;
                    pc=0x21400;
                    run_21400(); return;
                case 0x261b8:
                    /* Next insn is delay slot */ 
                    pc=0x26040;
                    continue;
                case 0x26200:
                    pc=0x26200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26200() throws ExecutionException { /* 0x26200 - 0x26400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26200:
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r2 = r0 + 520;
                    r29 = r29 + -120;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    r2 = r2 | 65535;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r4;
                    r5 = r6 + r0;
                    r4 = r29 + 16;
                    r6 = r29 + 132;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r31=0x26240;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x26240:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x26400:
                    pc=0x26400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26400() throws ExecutionException { /* 0x26400 - 0x26600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26400:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r2 = r0 + 520;
                    r29 = r29 + -120;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r2 | 65535;
                    r4 = r29 + 16;
                    r6 = r29 + 128;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r31;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r31=0x26444;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x26444:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x26600:
                    pc=0x26600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26600() throws ExecutionException { /* 0x26600 - 0x26800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r5 + r0;
                    r16 = r4 + r0;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x26628;
                    pc=0x2dea0;
                    run_2de00(); return;
                case 0x26628:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x26654;
                        continue;
                    }
                    r3 = r2 + r0;
                    r2 = readPages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r2;
                case 0x26640:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x26654:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 61439;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x26640;
                    continue;
                case 0x26800:
                    pc=0x26800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26800() throws ExecutionException { /* 0x26800 - 0x26a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26800:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r16 = r4 + r0;
                    r2 = r2 & 256;
                    r17 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x26864;
                        continue;
                    }
                    r18 = r6 + r0;
                case 0x2682c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    addr=r16+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r2 = r2 & 61439;
                    r6 = r17 + r0;
                    r7 = r18 + r0;
                    /* Next insn is delay slot */ 
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31=0x2684c;
                    pc=0x2dee0;
                    run_2de00(); return;
                case 0x2684c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x26864:
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 2;
                    r31=0x26878;
                    pc=0x2dfa0;
                    run_2de00(); return;
                case 0x26878:
                    /* Next insn is delay slot */ 
                    pc=0x2682c;
                    continue;
                case 0x26a00:
                    pc=0x26a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26a00() throws ExecutionException { /* 0x26a00 - 0x26c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = r5 + r0;
                    r16 = r4 + r0;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r7 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x26a28;
                    pc=0x2dfa0;
                    run_2de00(); return;
                case 0x26a28:
                    r3 = r2 + r0;
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x26a5c;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+80)>>>12][((r16+80)>>>2)&0x3ff] = r3;
                    r2 = r2 | 4096;
                case 0x26a44:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x26a5c:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    /* Next insn is delay slot */ 
                    r2 = r2 & 61439;
                    pc=0x26a44;
                    continue;
                case 0x26c00:
                    pc=0x26c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26c00() throws ExecutionException { /* 0x26c00 - 0x26e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r5 = tmp;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x26c18;
                    pc=0x2de60;
                    run_2de00(); return;
                case 0x26c18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x26e00:
                    pc=0x26e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_26e00() throws ExecutionException { /* 0x26e00 - 0x27000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x26e00:
                    r12 = 5 << 16;
                    r8 = r5 + r0;
                case 0x26e08:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ec4;
                        continue;
                    }
                    r9 = r12 + -23196;
                    r7 = r3 + r0;
                    r3 = r3 + r9;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e3c;
                        continue;
                    }
                    r7 = r7 + 32;
                case 0x26e3c:
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    r3 = r6 + r9;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e60;
                        continue;
                    }
                    r6 = r6 + 32;
                case 0x26e60:
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x26e78;
                        continue;
                    }
                    r4 = r4 + 1;
                    r5 = r5 + 1;
                    /* Next insn is delay slot */ 
                    r8 = r8 + 1;
                    pc=0x26e08;
                    continue;
                case 0x26e78:
                    r5 = r11 & 255;
                    r6 = r12 + -23196;
                    r3 = r5 + r6;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26e9c;
                        continue;
                    }
                    r5 = r5 + 32;
                case 0x26e9c:
                    r4 = r10 & 255;
                    r3 = r4 + r6;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x26ebc;
                        continue;
                    }
                    r4 = r4 + 32;
                case 0x26ebc:
                    /* Next insn is delay slot */ 
                    r2 = r5 - r4;
                    pc=r31;
                    return;
                case 0x26ec4:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x26e78;
                    continue;
                case 0x27000:
                    pc=0x27000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27000() throws ExecutionException { /* 0x27000 - 0x27200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27000:
                    r2 = r4 & 3;
                    r6 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 & 255;
                        pc=0x270c8;
                        continue;
                    }
                    r5 = r5 & 255;
                    r10 = r0 + r0;
                    r3 = r0 + r0;
                case 0x27018:
                    r2 = r10 << 8;
                    r3 = r3 + 1;
                    r10 = r2 | r5;
                    r2 = (r3&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27018;
                        continue;
                    }
                    r4 = r6 + r0;
                    r8 = 65278 << 16;
                    r6 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r8 = r8 | 65279;
                    r2 = r6 + r8;
                    r3 = ~(r0 | r6);
                    r7 = 32896 << 16;
                    r2 = r2 & r3;
                    r7 = r7 | 32896;
                    r2 = r2 & r7;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270c8;
                        continue;
                    }
                    r2 = r6 ^ r10;
                    r3 = r2 + r8;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r7;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270c8;
                        continue;
                    }
                    r9 = r8 + r0;
                    r8 = r7 + r0;
                    r7 = r4 + r0;
                case 0x27088:
                    r7 = r7 + 4;
                    r6 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r2 = r6 + r9;
                    r3 = ~(r0 | r6);
                    r2 = r2 & r3;
                    r2 = r2 & r8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x270c8;
                        continue;
                    }
                    r2 = r6 ^ r10;
                    r3 = r2 + r9;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27088;
                        continue;
                    }
                case 0x270c8:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r2 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27108;
                        continue;
                    }
                    if(r3 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x27108;
                        continue;
                    }
                    r6 = r4 + r0;
                case 0x270e8:
                    r6 = r6 + 1;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 1;
                    r3 = r2 & 255;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27108;
                        continue;
                    }
                    if(r3 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x270e8;
                        continue;
                    }
                case 0x27108:
                    r2 = r2 & 255;
                    if(r2 != r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2711c;
                        continue;
                    }
                case 0x27114:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x2711c:
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x27114;
                    continue;
                case 0x27200:
                    pc=0x27200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27200() throws ExecutionException { /* 0x27200 - 0x27400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27200:
                    r2 = r4 | r5;
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r4 + r0;
                        pc=0x27254;
                        continue;
                    }
                    r3 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x27214:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 2;
                        pc=0x2724c;
                        continue;
                    }
                    r4 = r4 + 2;
                    addr=r4+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r2 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x2724c;
                        continue;
                    }
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 2;
                        pc=0x27244;
                        continue;
                    }
                    r5 = r5 + 2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x27214;
                        continue;
                    }
                case 0x27244:
                    /* Next insn is delay slot */ 
                    r2 = r3 - r6;
                    pc=r31;
                    return;
                case 0x2724c:
                    /* Next insn is delay slot */ 
                    r2 = r2 - r6;
                    pc=r31;
                    return;
                case 0x27254:
                    r4 = r5 + r0;
                case 0x27258:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r3 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x2724c;
                        continue;
                    }
                    r4 = r4 + 1;
                    if(r2 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x27258;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2724c;
                    continue;
                case 0x27400:
                    pc=0x27400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27400() throws ExecutionException { /* 0x27400 - 0x27600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27400:
                    r29 = r29 + -24;
                    r2 = (r4&0xffffffffL) < (135&0xffffffffL) ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r4 + r0;
                        pc=0x27830;
                        run_27800(); return;
                    }
                    r5 = r4 + r0;
                    r3 = 5 << 16;
                    r2 = r4 << 2;
                    r3 = r3 + -25912;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x27434:
                    r2 = 5 << 16;
                    r2 = r2 + -27860;
                case 0x2743c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2744c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27848;
                    pc=0x2743c;
                    continue;
                case 0x27458:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27820;
                    pc=0x2743c;
                    continue;
                case 0x27464:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27804;
                    pc=0x2743c;
                    continue;
                case 0x27470:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27780;
                    pc=0x2743c;
                    continue;
                case 0x2747c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27768;
                    pc=0x2743c;
                    continue;
                case 0x27488:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27740;
                    pc=0x2743c;
                    continue;
                case 0x27494:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27720;
                    pc=0x2743c;
                    continue;
                case 0x274a0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27700;
                    pc=0x2743c;
                    continue;
                case 0x274ac:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27684;
                    pc=0x2743c;
                    continue;
                case 0x274b8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27672;
                    pc=0x2743c;
                    continue;
                case 0x274c4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27652;
                    pc=0x2743c;
                    continue;
                case 0x274d0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27632;
                    pc=0x2743c;
                    continue;
                case 0x274dc:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27612;
                    pc=0x2743c;
                    continue;
                case 0x274e8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27600;
                    pc=0x2743c;
                    continue;
                case 0x274f4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27576;
                    pc=0x2743c;
                    continue;
                case 0x27500:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27552;
                    pc=0x2743c;
                    continue;
                case 0x2750c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27540;
                    pc=0x2743c;
                    continue;
                case 0x27518:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27520;
                    pc=0x2743c;
                    continue;
                case 0x27524:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27504;
                    pc=0x2743c;
                    continue;
                case 0x27530:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27488;
                    pc=0x2743c;
                    continue;
                case 0x2753c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27472;
                    pc=0x2743c;
                    continue;
                case 0x27548:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27452;
                    pc=0x2743c;
                    continue;
                case 0x27554:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27420;
                    pc=0x2743c;
                    continue;
                case 0x27560:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27400;
                    pc=0x2743c;
                    continue;
                case 0x2756c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27376;
                    pc=0x2743c;
                    continue;
                case 0x27578:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27360;
                    pc=0x2743c;
                    continue;
                case 0x27584:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27344;
                    pc=0x2743c;
                    continue;
                case 0x27590:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27320;
                    pc=0x2743c;
                    continue;
                case 0x2759c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27304;
                    pc=0x2743c;
                    continue;
                case 0x275a8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27280;
                    pc=0x2743c;
                    continue;
                case 0x275b4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27264;
                    pc=0x2743c;
                    continue;
                case 0x275c0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27252;
                    pc=0x2743c;
                    continue;
                case 0x275cc:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27236;
                    pc=0x2743c;
                    continue;
                case 0x275d8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27216;
                    pc=0x2743c;
                    continue;
                case 0x275e4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27188;
                    pc=0x2743c;
                    continue;
                case 0x275f0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27168;
                    pc=0x2743c;
                    continue;
                case 0x275fc:
                    r2 = 5 << 16;
                case 0x27600:
                    pc=0x27600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27600() throws ExecutionException { /* 0x27600 - 0x27800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27600:
                    /* Next insn is delay slot */ 
                    r2 = r2 + -19544;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27608:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27156;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27614:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27140;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27620:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27116;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2762c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27096;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27638:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27064;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27644:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27052;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27650:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27032;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2765c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -27008;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27668:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26992;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27674:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26976;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27680:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26956;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2768c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26940;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27698:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26920;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276a4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26908;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276b0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26868;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276bc:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26828;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276c8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26796;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276d4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26732;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276e0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26692;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276ec:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26664;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x276f8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26648;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27704:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26628;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27710:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26600;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2771c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26576;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27728:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26540;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27734:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26512;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27740:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26464;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2774c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26432;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27758:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26400;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27764:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26376;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27770:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26340;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2777c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26320;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27788:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26296;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27794:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26260;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277a0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26236;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277ac:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26200;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277b8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26176;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277c4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26160;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277d0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26140;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277dc:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26108;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277e8:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26080;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x277f4:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26048;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27800:
                    pc=0x27800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27800() throws ExecutionException { /* 0x27800 - 0x27a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27800:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26028;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2780c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -26008;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27818:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -25980;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27824:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -25952;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27830:
                    /* Next insn is delay slot */ 
                    r4 = r5 + r0;
                    r31=0x27838;
                    pc=0x29800;
                    run_29800(); return;
                case 0x27838:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2743c;
                        run_27400(); return;
                    }
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -19536;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x2784c:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -25928;
                    pc=0x2743c;
                    run_27400(); return;
                case 0x27a00:
                    pc=0x27a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27a00() throws ExecutionException { /* 0x27a00 - 0x27c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27a00:
                    r29 = r29 + -136;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r23;
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r21;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r20;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r31;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r30;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r22;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r19;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r18;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r17;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r16;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = f25;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = f24;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = f23;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = f22;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = f21;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = f20;
                    r23 = r4 + r0;
                    writePages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff] = r6;
                    r12 = r0 + r0;
                    r14 = r0 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                    r20 = r0 + r0;
                    r21 = r0 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                case 0x27a64:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    r2 = (r3&0xffffffffL) < (46&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b48;
                        continue;
                    }
                    r2 = r3 << 2;
                    r3 = 5 << 16;
                    r3 = r3 + -25372;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x27aa0:
                    r3 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                case 0x27aa8:
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b48;
                        continue;
                    }
                case 0x27ac8:
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                case 0x27acc:
                    r4 = readPages[(r29+144)>>>12][((r29+144)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ae8;
                        continue;
                    }
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r16;
                case 0x27ae8:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    f0 = r21;
                    f1 = r20;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b00;
                        continue;
                    }
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x27b00:
                    r31 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r30 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r23 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r22 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r21 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r20 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r19 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r18 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r17 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r16 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    f25 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    f24 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    f23 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    f22 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    f21 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    f20 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 136;
                    pc=r31;
                    return;
                case 0x27b48:
                    r2 = r6 << 24;
                    r2 = r2 >> 24;
                    r3 = r0 + 48;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28a88;
                        run_28a00(); return;
                    }
                case 0x27b5c:
                    r2 = r6 << 24;
                    r4 = r2 >> 24;
                    r3 = r4 < 48 ? 1 : 0;
                    r15 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r11 = r0 + r0;
                    r10 = r0 + r0;
                    r13 = r0 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r0 + r0;
                        pc=0x27be0;
                        continue;
                    }
                    r7 = r0 + r0;
                    r2 = r4 < 58 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27be0;
                        continue;
                    }
                    r6 = r15 + r0;
                case 0x27b90:
                    r2 = r7 < 9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a64;
                        run_28a00(); return;
                    }
                    r2 = r10 << 2;
                    r2 = r2 + r10;
                    r2 = r2 << 1;
                    r2 = r2 + r4;
                    r10 = r2 + -48;
                case 0x27bb0:
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r6 = r6 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r7 = r7 + 1;
                    r2 = r4 < 48 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27be0;
                        continue;
                    }
                    r2 = r4 < 58 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b90;
                        continue;
                    }
                case 0x27be0:
                    r2 = r0 + 46;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        r6 = r7 + r0;
                        pc=0x288f8;
                        run_28800(); return;
                    }
                    r6 = r7 + r0;
                case 0x27bec:
                    r2 = r0 + 101;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                        pc=0x28768;
                        run_28600(); return;
                    }
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                    r2 = r0 + 69;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28768;
                        run_28600(); return;
                    }
                case 0x27c00:
                    pc=0x27c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27c00() throws ExecutionException { /* 0x27c00 - 0x27e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27c00:
                case 0x27c04:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28750;
                        run_28600(); return;
                    }
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r2 - r13;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                        pc=0x27c24;
                        continue;
                    }
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r6 = r7 + r0;
                case 0x27c24:
                    r2 = r7 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r7 + r0;
                        pc=0x27c34;
                        continue;
                    }
                    r4 = r7 + r0;
                    r4 = r0 + 16;
                case 0x27c34:
                    f0 = r10;
                    if(r10 < 0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                        pc=0x2873c;
                        run_28600(); return;
                    }
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x27c44:
                    r2 = r4 < 10 ? 1 : 0;
                    r21 = f2;
                    r20 = f3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c94;
                        continue;
                    }
                    r3 = 5 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + -22832;
                    r2 = r2 + r3;
                    f1 = readPages[(r2+-72)>>>12][((r2+-72)>>>2)&0x3ff];
                    f0 = readPages[(r2+-68)>>>12][((r2+-68)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f13 = (int)(l >>> 32); f12 = (int)l; }
                    f0 = r11;
                    if(r11 < 0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                        pc=0x28728;
                        run_28600(); return;
                    }
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x27c88:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f13&0xffffffffL) << 32) | (f12&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f13 = (int)(l >>> 32); f12 = (int)l; }
                    r21 = f12;
                    r20 = f13;
                case 0x27c94:
                    r2 = r7 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                        pc=0x27ce0;
                        continue;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27acc;
                        run_27a00(); return;
                    }
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x286e8;
                        run_28600(); return;
                    }
                    r2 = r2 < 23 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x286d0;
                        run_28600(); return;
                    }
                    r3 = r0 + 15;
                    r8 = r3 - r7;
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r8 + 22;
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28668;
                        run_28600(); return;
                    }
                case 0x27ce0:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r7 - r4;
                    r9 = r3 + r2;
                    if(r9 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28538;
                        run_28400(); return;
                    }
                    r8 = r9 & 15;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d30;
                        continue;
                    }
                    r3 = 5 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + -22832;
                    r2 = r2 + r3;
                    f2 = r21;
                    f3 = r20;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = f0;
                    r20 = f1;
                case 0x27d30:
                    r2 = r0 + -16;
                    r9 = r9 & r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e80;
                        run_27e00(); return;
                    }
                    r2 = r9 < 309 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27db8;
                        continue;
                    }
                case 0x27d4c:
                    r2 = r0 + 34;
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r2;
                    r20 = 5 << 16;
                    r20 = readPages[(r20+-19256)>>>12][((r20+-19256)>>>2)&0x3ff];
                    r21 = 5 << 16;
                    r21 = readPages[(r21+-19252)>>>12][((r21+-19252)>>>2)&0x3ff];
                case 0x27d64:
                    r2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27acc;
                        run_27a00(); return;
                    }
                case 0x27d74:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x27d80;
                    pc=0x40400;
                    run_40400(); return;
                case 0x27d80:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x27d8c;
                    pc=0x40400;
                    run_40400(); return;
                case 0x27d8c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r30 + r0;
                    r31=0x27d98;
                    pc=0x40400;
                    run_40400(); return;
                case 0x27d98:
                    r5 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x27da4;
                    pc=0x40400;
                    run_40400(); return;
                case 0x27da4:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r22 + r0;
                    r31=0x27db0;
                    pc=0x40400;
                    run_40400(); return;
                case 0x27db0:
                    /* Next insn is delay slot */ 
                    pc=0x27acc;
                    run_27a00(); return;
                case 0x27db8:
                    r9 = r9 >> 4;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e80;
                        run_27e00(); return;
                    }
                    r2 = r9 < 2 ? 1 : 0;
                    r4 = r0 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = 5 << 16;
                        pc=0x27e18;
                        run_27e00(); return;
                    }
                    r3 = 5 << 16;
                    r8 = r3 + -22632;
                case 0x27dd8:
                    r2 = r9 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e04;
                        run_27e00(); return;
                    }
                    f2 = r21;
                    f3 = r20;
                    f1 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    f0 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = f0;
                case 0x27e00:
                    pc=0x27e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_27e00() throws ExecutionException { /* 0x27e00 - 0x28000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x27e00:
                    r20 = f1;
                case 0x27e04:
                    r9 = r9 >> 1;
                    r2 = r9 < 2 ? 1 : 0;
                    r4 = r4 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 8;
                        pc=0x27dd8;
                        run_27c00(); return;
                    }
                    r8 = r8 + 8;
                case 0x27e18:
                    r2 = 64688 << 16;
                    r20 = r2 + r20;
                    r3 = r3 + -22632;
                    r2 = r4 << 3;
                    r2 = r2 + r3;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = r21;
                    f3 = r20;
                    r3 = 32752 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = 31904 << 16;
                    r21 = f0;
                    r20 = f1;
                    r11 = r20 & r3;
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d4c;
                        run_27c00(); return;
                    }
                    r2 = 31888 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2852c;
                        run_28400(); return;
                    }
                    r20 = 32751 << 16;
                    r20 = r20 | 65535;
                    r21 = r0 + -1;
                case 0x27e80:
                    r4 = r23 + r0;
                    r5 = r15 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r10;
                    r31=0x27e90;
                    pc=0x40800;
                    run_40800(); return;
                case 0x27e90:
                    r3 = 15 << 16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r2;
                    r3 = r3 | 65535;
                    r2 = r2 + 12;
                    f25 = readPages[(r28+-31992)>>>12][((r28+-31992)>>>2)&0x3ff];
                    f24 = readPages[(r28+-31988)>>>12][((r28+-31988)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r3;
                case 0x27eb0:
                    r16 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x27ec4;
                    pc=0x40200;
                    run_40200(); return;
                case 0x27ec4:
                    r6 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r5 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = r6 << 2;
                    r4 = r2 + 12;
                    r6 = r6 + 8;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r31=0x27ee0;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x27ee0:
                    r3 = r29 + 28;
                    r2 = r29 + 24;
                    r4 = r23 + r0;
                    r6 = r20 + r0;
                    r7 = r21 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r31=0x27f00;
                    pc=0x42000;
                    run_42000(); return;
                case 0x27f00:
                    r4 = r23 + r0;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    r31=0x27f10;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x27f10:
                    r4 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r30 = r2 + r0;
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28514;
                        run_28400(); return;
                    }
                    r6 = r0 + r0;
                    r18 = r0 + r0;
                    r17 = r4 + r0;
                    r22 = r4 + r0;
                case 0x27f30:
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2850c;
                        run_28400(); return;
                    }
                    r18 = r18 + r4;
                case 0x27f44:
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r19 = r18 + r0;
                    r2 = r4 + r5;
                    r8 = r2 + -1;
                    r3 = r8 < -1022 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1075;
                        pc=0x27f68;
                        continue;
                    }
                    r4 = r4 + 1075;
                    r2 = r0 + 54;
                    r4 = r2 - r5;
                case 0x27f68:
                    r8 = r17 + r4;
                    r18 = r18 + r4;
                    r2 = r18 < r8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r8 + r0;
                        pc=0x27f80;
                        continue;
                    }
                    r17 = r8 + r0;
                    r8 = r18 + r0;
                case 0x27f80:
                    r2 = r19 < r8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27f90;
                        continue;
                    }
                    r8 = r19 + r0;
                case 0x27f90:
                    if(r8 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27fa4;
                        continue;
                    }
                    r18 = r18 - r8;
                    r17 = r17 - r8;
                    r19 = r19 - r8;
                case 0x27fa4:
                    if(r6 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27fe0;
                        continue;
                    }
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x27fb8;
                    pc=0x41400;
                    run_41400(); return;
                case 0x27fb8:
                    r6 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r30 = r2 + r0;
                    r31=0x27fcc;
                    pc=0x41000;
                    run_41000(); return;
                case 0x27fcc:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x27fdc;
                    pc=0x40400;
                    run_40400(); return;
                case 0x27fdc:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r16;
                case 0x27fe0:
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ffc;
                        continue;
                    }
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x27ff8;
                    pc=0x41600;
                    run_41600(); return;
                case 0x27ff8:
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                case 0x27ffc:
                    if(r22 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28018;
                        run_28000(); return;
                    }
                case 0x28000:
                    pc=0x28000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28000() throws ExecutionException { /* 0x28000 - 0x28200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28000:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r22 + r0;
                    r31=0x28014;
                    pc=0x41400;
                    run_41400(); return;
                case 0x28014:
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                case 0x28018:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28034;
                        continue;
                    }
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x28030;
                    pc=0x41600;
                    run_41600(); return;
                case 0x28030:
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                case 0x28034:
                    if(r19 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28050;
                        continue;
                    }
                    r5 = r30 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x2804c;
                    pc=0x41600;
                    run_41600(); return;
                case 0x2804c:
                    r30 = r2 + r0;
                case 0x28050:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r6 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x28060;
                    pc=0x41a00;
                    run_41a00(); return;
                case 0x28060:
                    r17 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r22 = r2 + r0;
                    r31=0x28078;
                    pc=0x41800;
                    run_41800(); return;
                case 0x28078:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x284b8;
                        run_28400(); return;
                    }
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x283a4;
                        run_28200(); return;
                    }
                    r4 = r22 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r30 + r0;
                    r31=0x28094;
                    pc=0x42200;
                    run_42200(); return;
                case 0x28094:
                    f20 = f0;
                    f21 = f1;
                    f1 = readPages[(r28+-32016)>>>12][((r28+-32016)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32012)>>>12][((r28+-32012)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x28390;
                        run_28200(); return;
                    }
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282fc;
                        run_28200(); return;
                    }
                    f21 = readPages[(r28+-32008)>>>12][((r28+-32008)>>>2)&0x3ff];
                    f20 = readPages[(r28+-32004)>>>12][((r28+-32004)>>>2)&0x3ff];
                    f22 = f20;
                    f23 = f21;
                case 0x280cc:
                    r16 = 32752 << 16;
                    r10 = r20 & r16;
                    r2 = 32736 << 16;
                    if(r10 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28264;
                        run_28200(); return;
                    }
                    r2 = 832 << 16;
                    r2 = ((r2 & 0xffffffffL) < (r10 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28148;
                        continue;
                    }
                    f1 = readPages[(r28+-32008)>>>12][((r28+-32008)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32004)>>>12][((r28+-32004)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<=(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x28148;
                        continue;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))+(Double.longBitsToDouble(((f25&0xffffffffL) << 32) | (f24&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f2)); f23 = (int)(l >>> 32); f22 = (int)l; }
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28148;
                        continue;
                    }
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))); f23 = (int)(l >>> 32); f22 = (int)l; }
                case 0x28148:
                    f12 = r21;
                    f13 = r20;
                    /* Next insn is delay slot */ 
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r10;
                    r31=0x28158;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x28158:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = r21;
                    f1 = r20;
                    r10 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r21 = f2;
                    r20 = f3;
                case 0x28174:
                    r2 = 32752 << 16;
                    r11 = r20 & r2;
                    if(r10 == r11) {
                        /* Next insn is delay slot */ 
                        pc=0x281bc;
                        continue;
                    }
                case 0x28184:
                    r5 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x28190;
                    pc=0x40400;
                    run_40400(); return;
                case 0x28190:
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x2819c;
                    pc=0x40400;
                    run_40400(); return;
                case 0x2819c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r30 + r0;
                    r31=0x281a8;
                    pc=0x40400;
                    run_40400(); return;
                case 0x281a8:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r22 + r0;
                    r31=0x281b4;
                    pc=0x40400;
                    run_40400(); return;
                case 0x281b4:
                    /* Next insn is delay slot */ 
                    pc=0x27eb0;
                    run_27e00(); return;
                case 0x281bc:
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                        pc=0x2820c;
                        run_28200(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2820c;
                        run_28200(); return;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                case 0x28200:
                    pc=0x28200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28200() throws ExecutionException { /* 0x28200 - 0x28400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28200:
                    r2 = r20 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2824c;
                        continue;
                    }
                case 0x2820c:
                    f1 = readPages[(r28+-31984)>>>12][((r28+-31984)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31980)>>>12][((r28+-31980)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x27d74;
                        run_27c00(); return;
                    }
                    f1 = readPages[(r28+-31976)>>>12][((r28+-31976)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31972)>>>12][((r28+-31972)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))) ? 0x800000 : 0x000000);
                case 0x2823c:
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x28184;
                        run_28000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27d74;
                    run_27c00(); return;
                case 0x2824c:
                    f1 = readPages[(r28+-31968)>>>12][((r28+-31968)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31964)>>>12][((r28+-31964)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    /* Next insn is delay slot */ 
                    pc=0x2823c;
                    continue;
                case 0x28264:
                    r2 = 64688 << 16;
                    r18 = r20 + r0;
                    r20 = r2 + r20;
                    f12 = r21;
                    f13 = r20;
                    /* Next insn is delay slot */ 
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r10;
                    r31=0x28280;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x28280:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f23&0xffffffffL) << 32) | (f22&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f0 = r21;
                    f1 = r20;
                    r19 = r21 + r0;
                    r2 = 31903 << 16;
                    r2 = r2 | 65535;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r10 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = f2;
                    r20 = f3;
                    r3 = r20 & r16;
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x282f0;
                        continue;
                    }
                    r2 = 32751 << 16;
                    r2 = r2 | 65535;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x282dc;
                        continue;
                    }
                case 0x282cc:
                    r20 = 32751 << 16;
                    r20 = r20 | 65535;
                    /* Next insn is delay slot */ 
                    r21 = r0 + -1;
                    pc=0x28184;
                    run_28000(); return;
                case 0x282dc:
                    r2 = r0 + -1;
                    if(r19 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x282cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27d4c;
                    run_27c00(); return;
                case 0x282f0:
                    r2 = 848 << 16;
                    /* Next insn is delay slot */ 
                    r20 = r2 + r20;
                    pc=0x28174;
                    run_28000(); return;
                case 0x282fc:
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28318;
                        continue;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r20 & r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28358;
                        continue;
                    }
                case 0x28318:
                    r2 = r0 + 1;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2833c;
                        continue;
                    }
                case 0x28324:
                    f21 = readPages[(r28+-32008)>>>12][((r28+-32008)>>>2)&0x3ff];
                    f20 = readPages[(r28+-32004)>>>12][((r28+-32004)>>>2)&0x3ff];
                    f23 = readPages[(r28+-32000)>>>12][((r28+-32000)>>>2)&0x3ff];
                    f22 = readPages[(r28+-31996)>>>12][((r28+-31996)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x280cc;
                    run_28000(); return;
                case 0x2833c:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28324;
                        continue;
                    }
                case 0x28344:
                    r2 = r0 + 34;
                    r20 = r0 + r0;
                    r21 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r2;
                    pc=0x27d64;
                    run_27c00(); return;
                case 0x28358:
                    f1 = readPages[(r28+-32008)>>>12][((r28+-32008)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32004)>>>12][((r28+-32004)>>>2)&0x3ff];
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x28388;
                        continue;
                    }
                    f21 = readPages[(r28+-31992)>>>12][((r28+-31992)>>>2)&0x3ff];
                    f20 = readPages[(r28+-31988)>>>12][((r28+-31988)>>>2)&0x3ff];
                case 0x28380:
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))); f23 = (int)(l >>> 32); f22 = (int)l; }
                    pc=0x280cc;
                    run_28000(); return;
                case 0x28388:
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))*(Double.longBitsToDouble(((f25&0xffffffffL) << 32) | (f24&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                    pc=0x28380;
                    continue;
                case 0x28390:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))*(Double.longBitsToDouble(((f25&0xffffffffL) << 32) | (f24&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        f22 = f20;
                        f23 = f21;
                        pc=0x280cc;
                        run_28000(); return;
                    }
                    f22 = f20;
                    f23 = f21;
                    /* Next insn is delay slot */ 
                    pc=0x28380;
                    continue;
                case 0x283a4:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2847c;
                        run_28400(); return;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r20 & r4;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x28458;
                        run_28400(); return;
                    }
                case 0x283c0:
                    r2 = r21 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d74;
                        run_27c00(); return;
                    }
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28428;
                        run_28400(); return;
                    }
                    f12 = r21;
                    f13 = r20;
                    /* Next insn is delay slot */ 
                    r31=0x283e4;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x283e4:
                    f2 = r21;
                    f3 = r20;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = f0;
                    r20 = f1;
                    f0 = r0;
                case 0x28400:
                    pc=0x28400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28400() throws ExecutionException { /* 0x28400 - 0x28600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28400:
                    f1 = r0;
                    f2 = r21;
                    f3 = r20;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x27d74;
                        run_27c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x28344;
                    run_28200(); return;
                case 0x28428:
                    f12 = r21;
                    f13 = r20;
                    /* Next insn is delay slot */ 
                    r31=0x28438;
                    pc=0x41c00;
                    run_41c00(); return;
                case 0x28438:
                    f2 = r21;
                    f3 = r20;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = f0;
                    r20 = f1;
                    /* Next insn is delay slot */ 
                    pc=0x27d74;
                    run_27c00(); return;
                case 0x28458:
                    r2 = r0 + -1;
                    if(r21 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x283c0;
                        run_28200(); return;
                    }
                    r16 = 32752 << 16;
                    r3 = r20 & r16;
                    r2 = 16 << 16;
                    r20 = r3 + r2;
                    /* Next insn is delay slot */ 
                    r21 = r0 + r0;
                    pc=0x27d74;
                    run_27c00(); return;
                case 0x2847c:
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r20 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x283c0;
                        run_28200(); return;
                    }
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x283c0;
                        run_28200(); return;
                    }
                case 0x28498:
                    r4 = 32752 << 16;
                    r3 = r20 & r4;
                    r2 = 65520 << 16;
                    r16 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    r20 = r3 | r16;
                    /* Next insn is delay slot */ 
                    r21 = r0 + -1;
                    pc=0x27d74;
                    run_27c00(); return;
                case 0x284b8:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d74;
                        run_27c00(); return;
                    }
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d74;
                        run_27c00(); return;
                    }
                    r3 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r2 = r20 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27d74;
                        run_27c00(); return;
                    }
                    r5 = r22 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x284ec;
                    pc=0x41600;
                    run_41600(); return;
                case 0x284ec:
                    r4 = r2 + r0;
                    r5 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r22 = r2 + r0;
                    r31=0x284fc;
                    pc=0x41800;
                    run_41800(); return;
                case 0x284fc:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x28498;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27d74;
                    run_27c00(); return;
                case 0x2850c:
                    /* Next insn is delay slot */ 
                    r17 = r17 - r4;
                    pc=0x27f44;
                    run_27e00(); return;
                case 0x28514:
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r22 = r0 + r0;
                    r18 = r0 - r16;
                    r6 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r17 = r0 + r0;
                    pc=0x27f30;
                    run_27e00(); return;
                case 0x2852c:
                    r2 = 848 << 16;
                    /* Next insn is delay slot */ 
                    r20 = r2 + r20;
                    pc=0x27e80;
                    run_27e00(); return;
                case 0x28538:
                    if(r9 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e80;
                        run_27e00(); return;
                    }
                    r9 = r0 - r9;
                    r8 = r9 & 15;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28580;
                        continue;
                    }
                    r3 = 5 << 16;
                    r2 = r8 << 3;
                    r3 = r3 + -22832;
                    r2 = r2 + r3;
                    f2 = r21;
                    f3 = r20;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = f0;
                    r20 = f1;
                case 0x28580:
                    r2 = r0 + -16;
                    r9 = r9 & r2;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27e80;
                        run_27e00(); return;
                    }
                    r9 = r9 >> 4;
                    r2 = r9 < 32 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28344;
                        run_28200(); return;
                    }
                    r2 = r9 < 2 ? 1 : 0;
                    r4 = r0 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = 5 << 16;
                        pc=0x285f4;
                        continue;
                    }
                    r3 = 5 << 16;
                    r8 = r3 + -22592;
                case 0x285b4:
                    r2 = r9 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x285e0;
                        continue;
                    }
                    f2 = r21;
                    f3 = r20;
                    f1 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    f0 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = f0;
                    r20 = f1;
                case 0x285e0:
                    r9 = r9 >> 1;
                    r2 = r9 < 2 ? 1 : 0;
                    r4 = r4 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 8;
                        pc=0x285b4;
                        continue;
                    }
                    r8 = r8 + 8;
                case 0x285f4:
                    r3 = r3 + -22592;
                    r2 = r4 << 3;
                    r2 = r2 + r3;
                case 0x28600:
                    pc=0x28600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28600() throws ExecutionException { /* 0x28600 - 0x28800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28600:
                    f0 = r21;
                    f1 = r20;
                    f3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f2 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f4 = r0;
                    f5 = r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r18 = r20 + r0;
                    r19 = r21 + r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))==(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))) ? 0x800000 : 0x000000);
                    r21 = f0;
                    r20 = f1;
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x27e80;
                        run_27e00(); return;
                    }
                    f0 = r19;
                    f1 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x28344;
                        run_28200(); return;
                    }
                    r20 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r21 = r0 + 1;
                    pc=0x27e80;
                    run_27e00(); return;
                case 0x28668:
                    r3 = r3 - r8;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r3 = r3 + -22832;
                    r2 = r8 << 3;
                    r2 = r2 + r3;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = r21;
                    f3 = r20;
                    r4 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r4 << 3;
                    r21 = f0;
                    r20 = f1;
                case 0x286a4:
                    r2 = r2 + r3;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = r21;
                    f3 = r20;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x286c0:
                    r21 = f0;
                    r20 = f1;
                    /* Next insn is delay slot */ 
                    pc=0x27acc;
                    run_27a00(); return;
                case 0x286d0:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r3 << 3;
                    r3 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r3 = r3 + -22832;
                    pc=0x286a4;
                    continue;
                case 0x286e8:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r2 = r3 < -22 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ce0;
                        run_27c00(); return;
                    }
                    r2 = r3 << 3;
                    r3 = 5 << 16;
                    r3 = r3 + -22832;
                    r3 = r3 - r2;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    f2 = r21;
                    f3 = r20;
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    pc=0x286c0;
                    continue;
                case 0x28728:
                    f1 = readPages[(r28+-32024)>>>12][((r28+-32024)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32020)>>>12][((r28+-32020)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    pc=0x27c88;
                    run_27c00(); return;
                case 0x2873c:
                    f1 = readPages[(r28+-32024)>>>12][((r28+-32024)>>>2)&0x3ff];
                    f0 = readPages[(r28+-32020)>>>12][((r28+-32020)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    pc=0x27c44;
                    run_27c00(); return;
                case 0x28750:
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27acc;
                        run_27a00(); return;
                    }
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27acc;
                        run_27a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27ac8;
                    run_27a00(); return;
                case 0x28768:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28780;
                        continue;
                    }
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28780;
                        continue;
                    }
                    if(r14 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27ac8;
                        run_27a00(); return;
                    }
                case 0x28780:
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r9 = r0 + r0;
                    r2 = r5 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r0 + 43;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x288dc;
                        run_28800(); return;
                    }
                    r2 = r0 + 45;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x288d8;
                        run_28800(); return;
                    }
                case 0x287ac:
                    r2 = r4 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x288d0;
                        run_28800(); return;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x288a0;
                        run_28800(); return;
                    }
                case 0x287c8:
                    r2 = r4 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                        pc=0x27c04;
                        run_27c00(); return;
                    }
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                    r8 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r4 = r4 + -48;
                    r16 = r8 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r4;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 < 48 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28860;
                        run_28800(); return;
                    }
                case 0x28800:
                    pc=0x28800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28800() throws ExecutionException { /* 0x28800 - 0x28a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28800:
                    r2 = r4 < 58 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28860;
                        continue;
                    }
                    r3 = r16 + r0;
                case 0x28810:
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r16 << 2;
                    r2 = r2 + r16;
                    r2 = r2 << 1;
                    r2 = r2 + r4;
                    r2 = r2 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 < 48 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28860;
                        continue;
                    }
                    r2 = r4 < 58 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28810;
                        continue;
                    }
                case 0x28860:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r3 - r8;
                    r2 = r2 < 9 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28884;
                        continue;
                    }
                    r4 = 152 << 16;
                    r4 = r4 | 38527;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r4;
                case 0x28884:
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27c04;
                        run_27c00(); return;
                    }
                    r16 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = r0 - r16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r16;
                    pc=0x27c04;
                    run_27c00(); return;
                case 0x288a0:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r0 + 48;
                case 0x288a8:
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x288a8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x287c8;
                    run_28600(); return;
                case 0x288d0:
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r5;
                    pc=0x27c04;
                    run_27c00(); return;
                case 0x288d8:
                    r9 = r0 + 1;
                case 0x288dc:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x287ac;
                    run_28600(); return;
                case 0x288f8:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28a4c;
                        run_28a00(); return;
                    }
                    r2 = r0 + 48;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x28a1c;
                        run_28a00(); return;
                    }
                case 0x28920:
                    r2 = r4 + -49;
                    r2 = (r2&0xffffffffL) < (9&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27bec;
                        run_27a00(); return;
                    }
                    r15 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r13 = r12 + r0;
                    r9 = r4 + -48;
                    r12 = r0 + r0;
                case 0x28940:
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        r12 = r12 + 1;
                        pc=0x289b0;
                        continue;
                    }
                    r12 = r12 + 1;
                    r8 = r0 + 1;
                    r2 = r8 < r12 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r13 = r13 + r12;
                        pc=0x2898c;
                        continue;
                    }
                    r13 = r13 + r12;
                    r8 = r12 + -1;
                    r4 = r7 + r0;
                case 0x28960:
                    r2 = r4 + r0;
                    r2 = r2 < 9 ? 1 : 0;
                    r7 = r7 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x28a00;
                        run_28a00(); return;
                    }
                    r4 = r4 + 1;
                    r2 = r10 << 2;
                    r2 = r2 + r10;
                    r10 = r2 << 1;
                case 0x28980:
                    r8 = r8 + -1;
                    if(r8 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28960;
                        continue;
                    }
                case 0x2898c:
                    r2 = r7 + r0;
                    r2 = r2 < 9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 1;
                        pc=0x289e0;
                        continue;
                    }
                    r7 = r7 + 1;
                    r2 = r10 << 2;
                    r2 = r2 + r10;
                    r2 = r2 << 1;
                    r10 = r2 + r9;
                case 0x289ac:
                    r12 = r0 + r0;
                case 0x289b0:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = r4 + -48;
                    r3 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r2 + r0;
                        pc=0x28940;
                        continue;
                    }
                    r9 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x27bec;
                    run_27a00(); return;
                case 0x289e0:
                    r2 = r7 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x289ac;
                        continue;
                    }
                    r2 = r11 << 2;
                    r2 = r2 + r11;
                    r2 = r2 << 1;
                    /* Next insn is delay slot */ 
                    r11 = r2 + r9;
                    pc=0x289ac;
                    continue;
                case 0x28a00:
                    pc=0x28a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28a00() throws ExecutionException { /* 0x28a00 - 0x28c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28a00:
                    r2 = r7 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28980;
                        run_28800(); return;
                    }
                    r2 = r11 << 2;
                    r2 = r2 + r11;
                    /* Next insn is delay slot */ 
                    r11 = r2 << 1;
                    pc=0x28980;
                    run_28800(); return;
                case 0x28a1c:
                    r3 = r0 + 48;
                    r2 = r16 + r0;
                case 0x28a24:
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r12 = r12 + 1;
                    if(r4 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x28a24;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x28920;
                    run_28800(); return;
                case 0x28a4c:
                    r9 = r4 + -48;
                    r2 = (r9&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x28940;
                        run_28800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27bec;
                    run_27a00(); return;
                case 0x28a64:
                    r2 = r7 < 16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27bb0;
                        run_27a00(); return;
                    }
                    r2 = r11 << 2;
                    r2 = r2 + r11;
                    r2 = r2 << 1;
                    r2 = r2 + r4;
                    /* Next insn is delay slot */ 
                    r11 = r2 + -48;
                    pc=0x27bb0;
                    run_27a00(); return;
                case 0x28a88:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r14 = r0 + 1;
                    r4 = r0 + 48;
                case 0x28a94:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r6 = tmp;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x28a94;
                        continue;
                    }
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x27b5c;
                        run_27a00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x27acc;
                    run_27a00(); return;
                case 0x28ac4:
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r16 = r16 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    pc=0x27a64;
                    run_27a00(); return;
                case 0x28c00:
                    pc=0x28c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28c00() throws ExecutionException { /* 0x28c00 - 0x28e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x28c20;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x28c20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x28e00:
                    pc=0x28e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_28e00() throws ExecutionException { /* 0x28e00 - 0x29000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x28e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x28e20;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x28e20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))));
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x29000:
                    pc=0x29000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29000() throws ExecutionException { /* 0x29000 - 0x29200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29000:
                    r2 = 5 << 16;
                    r11 = r5 + r0;
                    r25 = r0 + r0;
                    r10 = r2 + -23196;
                    r8 = r5 + r0;
                case 0x29014:
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r11 = r11 + 1;
                    r3 = r9 + r10;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r8 = r8 + 1;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29014;
                        continue;
                    }
                    r2 = r0 + 45;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x291dc;
                        continue;
                    }
                    r2 = r0 + 43;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x291d0;
                        continue;
                    }
                case 0x2904c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29198;
                        continue;
                    }
                    r2 = r0 + 16;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29198;
                        continue;
                    }
                case 0x29060:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29078;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        r7 = r0 + 8;
                        pc=0x29078;
                        continue;
                    }
                    r7 = r0 + 8;
                    r7 = r0 + 10;
                case 0x29078:
                    r2 = (r25&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r3 = 32768 << 16;
                    r2 = r3 - r2;
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r2 = 5 << 16;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29098;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x29098:
                    r12 = r0 + r0;
                    r13 = r0 + r0;
                    r15 = r2 + -23196;
                    r10 = r11 + r0;
                    r24 = hi;
                    r14 = lo;
                case 0x290b0:
                    r2 = r9 + r15;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r3 = r8 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29174;
                        continue;
                    }
                    r9 = r9 + -48;
                case 0x290cc:
                    r2 = r9 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29128;
                        continue;
                    }
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x29120;
                        continue;
                    }
                    r2 = ((r14 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29120;
                        continue;
                    }
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x29114;
                        continue;
                    }
                case 0x290f4:
                    { long hilo = (long)(r12) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = r0 + 1;
                    r12 = lo;
                    r12 = r12 + r9;
                case 0x29104:
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r11 = r11 + 1;
                    /* Next insn is delay slot */ 
                    r10 = r10 + 1;
                    pc=0x290b0;
                    continue;
                case 0x29114:
                    r2 = r24 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x290f4;
                        continue;
                    }
                case 0x29120:
                    /* Next insn is delay slot */ 
                    r13 = r0 + -1;
                    pc=0x29104;
                    continue;
                case 0x29128:
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2915c;
                        continue;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2913c;
                        continue;
                    }
                    r12 = r0 - r12;
                case 0x2913c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29154;
                        continue;
                    }
                    if(r13 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 + -1;
                        pc=0x29150;
                        continue;
                    }
                    r2 = r11 + -1;
                    r2 = r5 + r0;
                case 0x29150:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                case 0x29154:
                    /* Next insn is delay slot */ 
                    r2 = r12 + r0;
                    pc=r31;
                    return;
                case 0x2915c:
                    r12 = (r25&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = 32768 << 16;
                    r3 = r0 + 34;
                    r12 = r2 - r12;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    pc=0x2913c;
                    continue;
                case 0x29174:
                    r2 = r8 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29128;
                        continue;
                    }
                    r2 = r8 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r9 + -55;
                        pc=0x29190;
                        continue;
                    }
                    r3 = r9 + -55;
                    r3 = r9 + -87;
                case 0x29190:
                    /* Next insn is delay slot */ 
                    r9 = r3 + r0;
                    pc=0x290cc;
                    continue;
                case 0x29198:
                    r2 = r0 + 48;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29060;
                        continue;
                    }
                    addr=r11+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 120;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x291c0;
                        continue;
                    }
                    r2 = r0 + 88;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x29060;
                        continue;
                    }
                case 0x291c0:
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r11 = r11 + 2;
                    pc=0x29060;
                    continue;
                case 0x291d0:
                    addr=r11+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    /* Next insn is delay slot */ 
                    r11 = r11 + 1;
                    pc=0x2904c;
                    continue;
                case 0x291dc:
                    /* Next insn is delay slot */ 
                    r25 = r0 + 1;
                    pc=0x291d0;
                    continue;
                case 0x29200:
                    pc=0x29200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29200() throws ExecutionException { /* 0x29200 - 0x29400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29200:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x29228;
                    pc=0x29000;
                    run_29000(); return;
                case 0x29228:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29400:
                    pc=0x29400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29400() throws ExecutionException { /* 0x29400 - 0x29600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29400:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x29418;
                    pc=0x2de60;
                    run_2de00(); return;
                case 0x29418:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29600:
                    pc=0x29600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29600() throws ExecutionException { /* 0x29600 - 0x29800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x29620;
                    pc=0x2e070;
                    run_2e000(); return;
                case 0x29620:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x29800:
                    pc=0x29800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29800() throws ExecutionException { /* 0x29800 - 0x29a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29800:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x29a00:
                    pc=0x29a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29a00() throws ExecutionException { /* 0x29a00 - 0x29c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29a00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29a34;
                        continue;
                    }
                    r2 = r0 + r0;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r0;
                case 0x29a24:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x29a34:
                    /* Next insn is delay slot */ 
                    r31=0x29a3c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x29a3c:
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    pc=0x29a24;
                    continue;
                case 0x29c00:
                    pc=0x29c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29c00() throws ExecutionException { /* 0x29c00 - 0x29e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29c00:
                    r29 = r29 + -1152;
                    writePages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff] = r17;
                    writePages[(r29+1136)>>>12][((r29+1136)>>>2)&0x3ff] = r16;
                    writePages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff] = r31;
                    r3 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r3;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r2 & 65533;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+30;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r4+28)>>>12][((r4+28)>>>2)&0x3ff];
                    r3 = readPages[(r4+36)>>>12][((r4+36)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                    r2 = r29 + 112;
                    r3 = r0 + 1024;
                    r17 = r4 + r0;
                    r4 = r29 + 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r0;
                    r31=0x29c64;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x29c64:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x29c80;
                        continue;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 16;
                    r31=0x29c74;
                    pc=0x20600;
                    run_20600(); return;
                case 0x29c74:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29c80;
                        continue;
                    }
                    r16 = r0 + -1;
                case 0x29c80:
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29ca4;
                        continue;
                    }
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 64;
                    addr=r17+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x29ca4:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+1144)>>>12][((r29+1144)>>>2)&0x3ff];
                    r17 = readPages[(r29+1140)>>>12][((r29+1140)>>>2)&0x3ff];
                    r16 = readPages[(r29+1136)>>>12][((r29+1136)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1152;
                    pc=r31;
                    return;
                case 0x29e00:
                    pc=0x29e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_29e00() throws ExecutionException { /* 0x29e00 - 0x2a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x29e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x29e38;
                        continue;
                    }
                    r18 = r6 + r0;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x29e38:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x29e74;
                        continue;
                    }
                case 0x29e48:
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r18 + r0;
                    r31=0x29e5c;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x29e5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x29e74:
                    /* Next insn is delay slot */ 
                    r31=0x29e7c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x29e7c:
                    /* Next insn is delay slot */ 
                    pc=0x29e48;
                    continue;
                case 0x2a000:
                    pc=0x2a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a000() throws ExecutionException { /* 0x2a000 - 0x2a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a000:
                    r29 = r29 + -600;
                    writePages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff] = r31;
                    writePages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff] = r16;
                    writePages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff] = r4;
                    writePages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff] = r5;
                    r16 = r6 + r0;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r7;
                    writePages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff] = r30;
                    writePages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff] = r23;
                    writePages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff] = r22;
                    writePages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff] = r21;
                    writePages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff] = r20;
                    writePages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff] = r19;
                    writePages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff] = r18;
                    writePages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r31=0x2a044;
                    pc=0x3fc00;
                    run_3fc00(); return;
                case 0x2a044:
                    r2 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r4 = r29 + 496;
                    writePages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff] = r2;
                    r5 = r0 + r0;
                    r2 = r0 + r0;
                    r3 = r0 + r0;
                    r6 = r0 + 8;
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r2;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r3;
                    writePages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r0;
                    r31=0x2a074;
                    pc=0x2e5ec;
                    run_2e400(); return;
                case 0x2a074:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0a0;
                        continue;
                    }
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0c4;
                        continue;
                    }
                case 0x2a0a0:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2a0ac;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x2a0ac:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x2a774;
                        run_2a600(); return;
                    }
                    r3 = r0 + -1;
                    r2 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r2+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                case 0x2a0c4:
                    r3 = r3 & 26;
                    r2 = r0 + 10;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc9c;
                        run_2bc00(); return;
                    }
                case 0x2a0d4:
                    r19 = r29 + 72;
                    r20 = r16 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r19;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r0;
                case 0x2a0ec:
                    r21 = r20 + r0;
                    r17 = r0 + 37;
                case 0x2a0f4:
                    r4 = r29 + 496;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r7 = readPages[(r28+-31792)>>>12][((r28+-31792)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = r29 + 504;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x2a110;
                    pc=0x3fe00;
                    run_3fe00(); return;
                case 0x2a110:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x2a12c;
                        continue;
                    }
                    r16 = r2 + r0;
                    r2 = readPages[(r29+504)>>>12][((r29+504)>>>2)&0x3ff];
                    r20 = r20 + r16;
                    if(r2 != r17) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0f4;
                        continue;
                    }
                    r20 = r20 + -1;
                case 0x2a12c:
                    r17 = r20 - r21;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a178;
                        continue;
                    }
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r17;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc80;
                        run_2bc00(); return;
                    }
                case 0x2a168:
                    r2 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r2 = r2 + r17;
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r2;
                case 0x2a178:
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc40;
                        run_2bc00(); return;
                    }
                    r20 = r20 + 1;
                    r18 = r0 + -1;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r0;
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r0;
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r0;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2a198:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                case 0x2a1a0:
                    r2 = r4 << 24;
                    r22 = r2 >> 24;
                    r20 = r20 + 1;
                case 0x2a1ac:
                    r3 = r22 + -32;
                    r2 = (r3&0xffffffffL) < (89&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc2c;
                        run_2bc00(); return;
                    }
                    r2 = r3 << 2;
                    r3 = 5 << 16;
                    r3 = r3 + -25088;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x2a1dc:
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a198;
                        continue;
                    }
                case 0x2a1ec:
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2a198;
                    continue;
                case 0x2a1f4:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r3 = r3 | 1;
                case 0x2a200:
                    pc=0x2a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a200() throws ExecutionException { /* 0x2a200 - 0x2a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a200:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r3;
                    pc=0x2a198;
                    run_2a000(); return;
                case 0x2a208:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r4 + 3;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    if(r4 >= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r4;
                        pc=0x2a198;
                        run_2a000(); return;
                    }
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r4;
                    r4 = r0 - r4;
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r4;
                case 0x2a238:
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r2 | 4;
                case 0x2a244:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x2a198;
                    run_2a000(); return;
                case 0x2a24c:
                    /* Next insn is delay slot */ 
                    r3 = r0 + 43;
                    pc=0x2a1ec;
                    run_2a000(); return;
                case 0x2a254:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r22 = tmp;
                    r2 = r0 + 42;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        r20 = r20 + 1;
                        pc=0x2a2b8;
                        continue;
                    }
                    r20 = r20 + 1;
                    r2 = r22 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + r0;
                        pc=0x2a2a4;
                        continue;
                    }
                    r16 = r0 + r0;
                    r3 = r20 + r0;
                case 0x2a278:
                    r2 = r16 << 2;
                    r2 = r2 + r16;
                    r2 = r2 << 1;
                    r2 = r2 + r22;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r22 = tmp;
                    r16 = r2 + -48;
                    r2 = r22 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x2a278;
                        continue;
                    }
                    r3 = r3 + 1;
                case 0x2a2a4:
                    r2 = r16 < -1 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r16 + r0;
                        pc=0x2a1ac;
                        run_2a000(); return;
                    }
                    r18 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r0 + -1;
                    pc=0x2a1ac;
                    run_2a000(); return;
                case 0x2a2b8:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r18 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                        pc=0x2a198;
                        run_2a000(); return;
                    }
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r18 = r0 + -1;
                    pc=0x2a198;
                    run_2a000(); return;
                case 0x2a2e8:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r4 = r4 | 128;
                case 0x2a2f4:
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                    pc=0x2a198;
                    run_2a000(); return;
                case 0x2a2fc:
                    r16 = r0 + r0;
                    r3 = r20 + r0;
                case 0x2a304:
                    r2 = r16 << 2;
                    r2 = r2 + r16;
                    r2 = r2 << 1;
                    r2 = r2 + r22;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r22 = tmp;
                    r16 = r2 + -48;
                    r2 = r22 + -48;
                    r2 = (r2&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    r20 = r20 + 1;
                    r3 = r3 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r16;
                        pc=0x2a304;
                        continue;
                    }
                    writePages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    pc=0x2a1ac;
                    run_2a000(); return;
                case 0x2a33c:
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r2 | 16;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                case 0x2a34c:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b41c;
                        run_2b400(); return;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -8;
                    r2 = r4 + 7;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x2a384:
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b400;
                        run_2b400(); return;
                    }
                case 0x2a38c:
                    r3 = r0 + 1;
                case 0x2a390:
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r18;
                        pc=0x2a3a8;
                        continue;
                    }
                    writePages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff] = r18;
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r0 + -129;
                    r4 = r4 & r2;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                case 0x2a3a8:
                    r2 = r16 | r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r29 + 484;
                        pc=0x2a3c4;
                        continue;
                    }
                    r21 = r29 + 484;
                    r2 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3d4;
                        run_2b200(); return;
                    }
                case 0x2a3c4:
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b344;
                        run_2b200(); return;
                    }
                    r2 = r3 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2e0;
                        run_2b200(); return;
                    }
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b29c;
                        run_2b200(); return;
                    }
                case 0x2a3e8:
                    r2 = 5 << 16;
                    r21 = r2 + -25156;
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x2a3f8;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x2a3f8:
                    r23 = r2 + r0;
                case 0x2a3fc:
                    r4 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                case 0x2a400:
                    pc=0x2a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a400() throws ExecutionException { /* 0x2a400 - 0x2a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a400:
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r23;
                    r2 = r23 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a414;
                        continue;
                    }
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r4;
                case 0x2a414:
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b278;
                        run_2b200(); return;
                    }
                    r2 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r2 = r2 + 1;
                case 0x2a430:
                    writePages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff] = r2;
                case 0x2a434:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r30 = r4 & 132;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a500;
                        continue;
                    }
                    r2 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r4 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r16 = r2 - r4;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a500;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a4bc;
                        continue;
                    }
                    r2 = 5 << 16;
                    r18 = r2 + -25188;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2a47c:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2b258;
                        run_2b200(); return;
                    }
                    r3 = r3 + 8;
                case 0x2a4ac:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a47c;
                        continue;
                    }
                case 0x2a4bc:
                    r3 = 5 << 16;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r3 + -25188;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b23c;
                        run_2b200(); return;
                    }
                case 0x2a4f8:
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                case 0x2a500:
                    r2 = r3 << 24;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b1c4;
                        run_2b000(); return;
                    }
                    r3 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = r29 + 40;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b1a8;
                        run_2b000(); return;
                    }
                case 0x2a548:
                    r2 = r0 + 128;
                    if(r30 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0b8;
                        run_2b000(); return;
                    }
                case 0x2a554:
                    r4 = readPages[(r29+548)>>>12][((r29+548)>>>2)&0x3ff];
                    r16 = r4 - r23;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a5fc;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0b0;
                        run_2b000(); return;
                    }
                    r30 = 5 << 16;
                    r18 = r30 + -25172;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2a584:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2b090;
                        run_2b000(); return;
                    }
                    r3 = r3 + 8;
                case 0x2a5b4:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a584;
                        continue;
                    }
                case 0x2a5c4:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -25172;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b074;
                        run_2b000(); return;
                    }
                case 0x2a5fc:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                case 0x2a600:
                    pc=0x2a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a600() throws ExecutionException { /* 0x2a600 - 0x2a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a600:
                    r2 = r3 & 256;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a800;
                        run_2a800(); return;
                    }
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r23;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r23;
                case 0x2a620:
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                case 0x2a624:
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a7e4;
                        continue;
                    }
                case 0x2a640:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6f8;
                        continue;
                    }
                    r2 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r3 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r16 = r2 - r3;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6f8;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6c8;
                        continue;
                    }
                    r4 = 5 << 16;
                    r18 = r4 + -25188;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2a688:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2a7c4;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x2a6b8:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a688;
                        continue;
                    }
                case 0x2a6c8:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r3 = 5 << 16;
                    r2 = r3 + -25188;
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r2 + r16;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r3;
                    r3 = r3 < 8 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                        pc=0x2a7a8;
                        continue;
                    }
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                case 0x2a6f8:
                    r3 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r4 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r2 = r3 < r4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a714;
                        continue;
                    }
                    r3 = r4 + r0;
                case 0x2a714:
                    r2 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r2 = r2 + r3;
                    writePages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a740;
                        continue;
                    }
                case 0x2a734:
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    pc=0x2a0ec;
                    run_2a000(); return;
                case 0x2a740:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2a74c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2a74c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a734;
                        continue;
                    }
                case 0x2a754:
                    r3 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r3+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    r2 = r2 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a774;
                        continue;
                    }
                    r3 = r0 + -1;
                case 0x2a774:
                    r31 = readPages[(r29+596)>>>12][((r29+596)>>>2)&0x3ff];
                    r30 = readPages[(r29+592)>>>12][((r29+592)>>>2)&0x3ff];
                    r23 = readPages[(r29+588)>>>12][((r29+588)>>>2)&0x3ff];
                    r22 = readPages[(r29+584)>>>12][((r29+584)>>>2)&0x3ff];
                    r21 = readPages[(r29+580)>>>12][((r29+580)>>>2)&0x3ff];
                    r20 = readPages[(r29+576)>>>12][((r29+576)>>>2)&0x3ff];
                    r19 = readPages[(r29+572)>>>12][((r29+572)>>>2)&0x3ff];
                    r18 = readPages[(r29+568)>>>12][((r29+568)>>>2)&0x3ff];
                    r17 = readPages[(r29+564)>>>12][((r29+564)>>>2)&0x3ff];
                    r16 = readPages[(r29+560)>>>12][((r29+560)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 600;
                    pc=r31;
                    return;
                case 0x2a7a8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2a7b4;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2a7b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a6f8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2a754;
                    continue;
                case 0x2a7c4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2a7d0;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2a7d0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        continue;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2a6b8;
                    continue;
                case 0x2a7e4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2a7f0;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2a7f0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r29 + 72;
                        pc=0x2a640;
                        continue;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=0x2a754;
                    continue;
                case 0x2a800:
                    pc=0x2a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2a800() throws ExecutionException { /* 0x2a800 - 0x2aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2a800:
                    r2 = r22 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ae04;
                        run_2ae00(); return;
                    }
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    f2 = r3;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2a9c0;
                        continue;
                    }
                    r2 = 5 << 16;
                    r16 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + -19464;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a9a4;
                        continue;
                    }
                case 0x2a878:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a8a4;
                        continue;
                    }
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a640;
                        run_2a600(); return;
                    }
                case 0x2a8a4:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r4 = readPages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r4;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x2a988;
                        continue;
                    }
                    r19 = r19 + 8;
                case 0x2a8d4:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a640;
                        run_2a600(); return;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a980;
                        continue;
                    }
                    r30 = 5 << 16;
                    r17 = r30 + -25172;
                    r18 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2a904:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2a960;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x2a934:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a904;
                        continue;
                    }
                case 0x2a944:
                    r2 = r30 + -25172;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + r16;
                    pc=0x2a620;
                    run_2a600(); return;
                case 0x2a960:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2a96c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2a96c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2a934;
                    continue;
                case 0x2a980:
                    /* Next insn is delay slot */ 
                    r30 = 5 << 16;
                    pc=0x2a944;
                    continue;
                case 0x2a988:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2a994;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2a994:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a8d4;
                    continue;
                case 0x2a9a4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2a9b0;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2a9b0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a878;
                    continue;
                case 0x2a9c0:
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac28;
                        run_2ac00(); return;
                    }
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r5 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab58;
                        run_2aa00(); return;
                    }
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r3;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r6 = r3 + r0;
                case 0x2aa00:
                    pc=0x2aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2aa00() throws ExecutionException { /* 0x2aa00 - 0x2ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2aa00:
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x2ab38;
                        continue;
                    }
                    r19 = r19 + 8;
                case 0x2aa14:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r16 = r2 - r6;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aabc;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ab30;
                        continue;
                    }
                    r30 = 5 << 16;
                    r17 = r30 + -25172;
                    r18 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2aa44:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2ab10;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x2aa74:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aa44;
                        continue;
                    }
                case 0x2aa84:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -25172;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aaf4;
                        continue;
                    }
                case 0x2aabc:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a640;
                        run_2a600(); return;
                    }
                    r2 = 5 << 16;
                    r3 = r0 + 1;
                    r2 = r2 + -19460;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + 1;
                    pc=0x2a620;
                    run_2a600(); return;
                case 0x2aaf4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2ab00;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2ab00:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2aabc;
                    continue;
                case 0x2ab10:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2ab1c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2ab1c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2aa74;
                    continue;
                case 0x2ab30:
                    /* Next insn is delay slot */ 
                    r30 = 5 << 16;
                    pc=0x2aa84;
                    continue;
                case 0x2ab38:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2ab44;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2ab44:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r6 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2aa14;
                    continue;
                case 0x2ab58:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r5;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r2 = r2 + r5;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac08;
                        run_2ac00(); return;
                    }
                case 0x2ab88:
                    r2 = 5 << 16;
                    r3 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = r2 + -19460;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = r21 + r5;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2abec;
                        continue;
                    }
                case 0x2abc8:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r3 = r3 - r2;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + r3;
                    pc=0x2a620;
                    run_2a600(); return;
                case 0x2abec:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2abf8;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2abf8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                case 0x2ac00:
                    pc=0x2ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ac00() throws ExecutionException { /* 0x2ac00 - 0x2ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ac00:
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2abc8;
                    run_2aa00(); return;
                case 0x2ac08:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2ac14;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2ac14:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2ab88;
                    run_2aa00(); return;
                case 0x2ac28:
                    r2 = 5 << 16;
                    r16 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r2 + -19464;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ade8;
                        continue;
                    }
                case 0x2ac68:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ac88;
                        continue;
                    }
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a640;
                        run_2a600(); return;
                    }
                case 0x2ac88:
                    r2 = readPages[(r29+528)>>>12][((r29+528)>>>2)&0x3ff];
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2adcc;
                        continue;
                    }
                case 0x2acc0:
                    r2 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                    r16 = r0 - r2;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad68;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2adc4;
                        continue;
                    }
                    r30 = 5 << 16;
                    r17 = r30 + -25172;
                    r18 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2acf0:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r17;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2ada4;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x2ad20:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2acf0;
                        continue;
                    }
                case 0x2ad30:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -25172;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ad88;
                        continue;
                    }
                case 0x2ad68:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                    pc=0x2a624;
                    run_2a600(); return;
                case 0x2ad88:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2ad94;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2ad94:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2ad68;
                    continue;
                case 0x2ada4:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2adb0;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2adb0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2ad20;
                    continue;
                case 0x2adc4:
                    /* Next insn is delay slot */ 
                    r30 = 5 << 16;
                    pc=0x2ad30;
                    continue;
                case 0x2adcc:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2add8;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2add8:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2acc0;
                    continue;
                case 0x2ade8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2adf4;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2adf4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2ac68;
                    continue;
                case 0x2ae00:
                    pc=0x2ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ae00() throws ExecutionException { /* 0x2ae00 - 0x2b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ae00:
                    r19 = r29 + 72;
                case 0x2ae04:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b014;
                        run_2b000(); return;
                    }
                case 0x2ae18:
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r0 + 46;
                    r4 = r0 + 2;
                    addr=r29+488;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+489;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r4;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r29 + 488;
                    r2 = r2 + 2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r3;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    r21 = r21 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x2aff8;
                        continue;
                    }
                    r19 = r19 + 8;
                case 0x2ae60:
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    f2 = r3;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2af44;
                        continue;
                    }
                    r4 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    r3 = r4 + -1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + r4;
                    r2 = r2 + -1;
                case 0x2aeac:
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2af28;
                        continue;
                    }
                case 0x2aecc:
                    r2 = r29 + 48;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    r3 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r3;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a640;
                        run_2a600(); return;
                    }
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2af18;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2af18:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a640;
                    run_2a600(); return;
                case 0x2af28:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2af34;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2af34:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r29 + 72;
                        pc=0x2aecc;
                        continue;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=0x2a754;
                    run_2a600(); return;
                case 0x2af44:
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aecc;
                        continue;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2aff0;
                        continue;
                    }
                    r30 = 5 << 16;
                    r18 = r30 + -25172;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2af74:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2afd0;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x2afa4:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2af74;
                        continue;
                    }
                case 0x2afb4:
                    r2 = r30 + -25172;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + r16;
                    pc=0x2aeac;
                    continue;
                case 0x2afd0:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2afdc;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2afdc:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2afa4;
                    continue;
                case 0x2aff0:
                    /* Next insn is delay slot */ 
                    r30 = 5 << 16;
                    pc=0x2afb4;
                    continue;
                case 0x2aff8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b004;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b000:
                    pc=0x2b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b000() throws ExecutionException { /* 0x2b000 - 0x2b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b000:
                    r5 = r29 + 56;
                case 0x2b004:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2ae60;
                    run_2ae00(); return;
                case 0x2b014:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ae18;
                        run_2ae00(); return;
                    }
                    r2 = r0 + 1;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    r3 = r3 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 8;
                        pc=0x2aecc;
                        run_2ae00(); return;
                    }
                    r19 = r19 + 8;
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b064;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b064:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2aecc;
                    run_2ae00(); return;
                case 0x2b074:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b080;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b080:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a5fc;
                    run_2a400(); return;
                case 0x2b090:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b09c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b09c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2a5b4;
                    run_2a400(); return;
                case 0x2b0b0:
                    /* Next insn is delay slot */ 
                    r30 = 5 << 16;
                    pc=0x2a5c4;
                    run_2a400(); return;
                case 0x2b0b8:
                    r2 = readPages[(r29+524)>>>12][((r29+524)>>>2)&0x3ff];
                    r3 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    r16 = r2 - r3;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a554;
                        run_2a400(); return;
                    }
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b1a0;
                        continue;
                    }
                    r30 = 5 << 16;
                    r18 = r30 + -25172;
                    r17 = r0 + 16;
                    r3 = r19 + r0;
                case 0x2b0ec:
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r18;
                    r2 = r2 + 16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x2b180;
                        continue;
                    }
                    r3 = r3 + 8;
                case 0x2b11c:
                    r16 = r16 + -16;
                    r2 = r16 < 17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b0ec;
                        continue;
                    }
                case 0x2b12c:
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r16;
                    r2 = r30 + -25172;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a554;
                        run_2a400(); return;
                    }
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b170;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b170:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a554;
                    run_2a400(); return;
                case 0x2b180:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b18c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b18c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2b11c;
                    continue;
                case 0x2b1a0:
                    /* Next insn is delay slot */ 
                    r30 = 5 << 16;
                    pc=0x2b12c;
                    continue;
                case 0x2b1a8:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b1b4;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b1b4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r19 = r29 + 72;
                        pc=0x2a548;
                        run_2a400(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    pc=0x2a754;
                    run_2a600(); return;
                case 0x2b1c4:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a548;
                        run_2a400(); return;
                    }
                    r2 = r0 + 48;
                    r3 = r0 + 2;
                    addr=r29+488;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    addr=r29+489;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r22&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r29 + 488;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r3;
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = r19 + 8;
                    r2 = r2 + 2;
                case 0x2b200:
                    pc=0x2b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b200() throws ExecutionException { /* 0x2b200 - 0x2b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b200:
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    r2 = r2 < 8 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a548;
                        run_2a400(); return;
                    }
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b22c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b22c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a548;
                    run_2a400(); return;
                case 0x2b23c:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b248;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b248:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a4f8;
                    run_2a400(); return;
                case 0x2b258:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2b264;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2b264:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    r19 = r29 + 72;
                    /* Next insn is delay slot */ 
                    r3 = r19 + r0;
                    pc=0x2a4ac;
                    run_2a400(); return;
                case 0x2b278:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a434;
                        run_2a400(); return;
                    }
                    r2 = readPages[(r29+552)>>>12][((r29+552)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 + 2;
                    pc=0x2a430;
                    run_2a400(); return;
                case 0x2b29c:
                    r5 = r21 + r0;
                case 0x2b2a0:
                    r4 = readPages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff];
                    r2 = r17 & 15;
                    r2 = r4 + r2;
                    r17 = r17 >>> 4;
                    r4 = r16 << 28;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r17 = r17 | r4;
                    r16 = r16 >>> 4;
                    r5 = r5 + -1;
                    r2 = r16 | r17;
                    r21 = r21 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        addr=r5+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x2b2a0;
                        continue;
                    }
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2b2d4:
                    r2 = r29 - r21;
                    /* Next insn is delay slot */ 
                    r23 = r2 + 484;
                    pc=0x2a3fc;
                    run_2a200(); return;
                case 0x2b2e0:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r21 + r0;
                        pc=0x2a3e8;
                        run_2a200(); return;
                    }
                    r4 = r21 + r0;
                case 0x2b2e8:
                    r2 = r17 & 7;
                    r3 = r16 << 29;
                    r17 = r17 >>> 3;
                    r2 = r2 + 48;
                    r4 = r4 + -1;
                    r17 = r17 | r3;
                    r16 = r16 >>> 3;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r16 | r17;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r21 + -1;
                        pc=0x2b2e8;
                        continue;
                    }
                    r21 = r21 + -1;
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2d4;
                        continue;
                    }
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + 48;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2d4;
                        continue;
                    }
                    r21 = r21 + -1;
                    /* Next insn is delay slot */ 
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2b2d4;
                    continue;
                case 0x2b344:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3b8;
                        continue;
                    }
                case 0x2b34c:
                    r18 = r21 + r0;
                case 0x2b350:
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    r6 = r0 + 0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 10;
                    r31=0x2b364;
                    pc=0x1dd3c;
                    run_1dc00(); return;
                case 0x2b364:
                    r4 = r3 + 48;
                    r18 = r18 + -1;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r4&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r17 + r0;
                    r4 = r16 + r0;
                    r6 = r0 + 0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 10;
                    r31=0x2b384;
                    pc=0x1d768;
                    run_1d600(); return;
                case 0x2b384:
                    r16 = r2 + r0;
                    r21 = r21 + -1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r3 + r0;
                        pc=0x2b350;
                        continue;
                    }
                    r17 = r3 + r0;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3a8;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b350;
                        continue;
                    }
                case 0x2b3a8:
                    r21 = r21 + -1;
                    r2 = r17 + 48;
                    /* Next insn is delay slot */ 
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2b2d4;
                    continue;
                case 0x2b3b8:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b3a8;
                        continue;
                    }
                    r2 = (r17&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b34c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2b3a8;
                    continue;
                case 0x2b3d4:
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2d4;
                        continue;
                    }
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b2d4;
                        continue;
                    }
                    r2 = r0 + 48;
                    r21 = r29 + 483;
                    /* Next insn is delay slot */ 
                    addr=r29+483;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2b2d4;
                    continue;
                case 0x2b400:
                    pc=0x2b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b400() throws ExecutionException { /* 0x2b400 - 0x2b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b400:
                    r3 = r0 + 45;
                    r17 = r0 - r17;
                    r16 = r0 - r16;
                    r2 = ((r0 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r16 = r16 - r2;
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2a38c;
                    run_2a200(); return;
                case 0x2b41c:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b460;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r4 + 3;
                case 0x2b43c:
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r17 = r2 + r0;
                case 0x2b458:
                    /* Next insn is delay slot */ 
                    r16 = r2 >> 31;
                    pc=0x2a384;
                    run_2a200(); return;
                case 0x2b460:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b4a0;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r4 + 3;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    r2 = r2 << 16;
                    r17 = r2 >> 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    pc=0x2b458;
                    continue;
                case 0x2b4a0:
                    r2 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r2 + 3;
                    pc=0x2b43c;
                    continue;
                case 0x2b4b0:
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r2 | 8;
                    pc=0x2a244;
                    run_2a200(); return;
                case 0x2b4c0:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r4 = r4 | 16;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                case 0x2b4d0:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b514;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -8;
                    r2 = r4 + 7;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x2b508:
                    r3 = r0 + r0;
                case 0x2b50c:
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2a390;
                    run_2a200(); return;
                case 0x2b514:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b554;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r4 + 3;
                case 0x2b534:
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x2b544:
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r16 = r0 + r0;
                    pc=0x2b508;
                    continue;
                case 0x2b554:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b588;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r4 + 3;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r17 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2b544;
                    continue;
                case 0x2b588:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r3 + 3;
                    pc=0x2b534;
                    continue;
                case 0x2b598:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r4 = r4 | 16;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                case 0x2b5a8:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b5e8;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -8;
                    r2 = r4 + 7;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x2b5e0:
                    /* Next insn is delay slot */ 
                    r3 = r0 + 1;
                    pc=0x2b50c;
                    continue;
                case 0x2b5e8:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b628;
                        run_2b600(); return;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                case 0x2b600:
                    pc=0x2b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b600() throws ExecutionException { /* 0x2b600 - 0x2b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b600:
                    r2 = r4 + 3;
                case 0x2b608:
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x2b618:
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r16 = r0 + r0;
                    pc=0x2b5e0;
                    run_2b400(); return;
                case 0x2b628:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b65c;
                        continue;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r4 + 3;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r17 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2b618;
                    continue;
                case 0x2b65c:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r3 + 3;
                    pc=0x2b608;
                    continue;
                case 0x2b66c:
                    r2 = 5 << 16;
                    r2 = r2 + -25128;
                case 0x2b674:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r2;
                    r2 = r4 & 32;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b6dc;
                        continue;
                    }
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 7;
                    r3 = r0 + -8;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r16 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r17 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x2b6b0:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b50c;
                        run_2b400(); return;
                    }
                    r2 = r16 | r17;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b50c;
                        run_2b400(); return;
                    }
                    r4 = r4 | 2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r4;
                    pc=0x2b50c;
                    run_2b400(); return;
                case 0x2b6dc:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b71c;
                        continue;
                    }
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                case 0x2b6fc:
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                case 0x2b70c:
                    r2 = r2 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r16 = r0 + r0;
                    pc=0x2b6b0;
                    continue;
                case 0x2b71c:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b754;
                        continue;
                    }
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r17 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2b70c;
                    continue;
                case 0x2b754:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r4 + 3;
                    pc=0x2b6fc;
                    continue;
                case 0x2b764:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r4 + 3;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    addr=r4+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + 4;
                    r21 = r29 + 136;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    addr=r29+136;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2b78c:
                    r23 = r0 + 1;
                case 0x2b790:
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2a3fc;
                    run_2a200(); return;
                case 0x2b798:
                    r2 = r0 + -1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba54;
                        run_2ba00(); return;
                    }
                    r2 = r0 + 103;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba44;
                        run_2ba00(); return;
                    }
                    r2 = r0 + 71;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba44;
                        run_2ba00(); return;
                    }
                case 0x2b7bc:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba34;
                        run_2ba00(); return;
                    }
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r4 + 7;
                case 0x2b7dc:
                    r3 = r0 + -8;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r2 = r2 + 8;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    writePages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff] = r2;
                    writePages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff] = r3;
                case 0x2b800:
                    pc=0x2b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2b800() throws ExecutionException { /* 0x2b800 - 0x2ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2b800:
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f12 = r3;
                    f13 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2b81c;
                    pc=0x42e00;
                    run_42e00(); return;
                case 0x2b81c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b868;
                        continue;
                    }
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f0 = r0;
                    f1 = r0;
                    f2 = r3;
                    f3 = r2;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2b858;
                        continue;
                    }
                    r3 = r0 + 45;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2b858:
                    r2 = 5 << 16;
                    r21 = r2 + -19456;
                case 0x2b860:
                    /* Next insn is delay slot */ 
                    r23 = r0 + 3;
                    pc=0x2a3fc;
                    run_2a200(); return;
                case 0x2b868:
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    f12 = r3;
                    f13 = r2;
                    /* Next insn is delay slot */ 
                    r31=0x2b884;
                    pc=0x1f200;
                    run_1f200(); return;
                case 0x2b884:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b898;
                        continue;
                    }
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r21 = r2 + -19452;
                    pc=0x2b860;
                    continue;
                case 0x2b898:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r29 + 41;
                    r3 = r3 | 256;
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r3;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r3 = r29 + 508;
                    r2 = r29 + 512;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+536)>>>12][((r29+536)>>>2)&0x3ff];
                    r3 = readPages[(r29+540)>>>12][((r29+540)>>>2)&0x3ff];
                    r4 = readPages[(r29+600)>>>12][((r29+600)>>>2)&0x3ff];
                    r7 = r3 + r0;
                    r6 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r22;
                    r31=0x2b8e0;
                    pc=0x2be00;
                    run_2be00(); return;
                case 0x2b8e0:
                    r3 = r0 + 103;
                    if(r22 == r3) {
                        /* Next insn is delay slot */ 
                        r21 = r2 + r0;
                        pc=0x2b9f8;
                        continue;
                    }
                    r21 = r2 + r0;
                    r2 = r0 + 71;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9f8;
                        continue;
                    }
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                case 0x2b8fc:
                    r2 = r22 < 102 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9a0;
                        continue;
                    }
                case 0x2b908:
                    r2 = r0 + 102;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2b970;
                        continue;
                    }
                    r3 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r2 = r5 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b95c;
                        continue;
                    }
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r23 = r5 + r0;
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b940;
                        continue;
                    }
                    r23 = r5 + 1;
                case 0x2b940:
                    addr=r29+41;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a3fc;
                        run_2a200(); return;
                    }
                    r3 = r0 + 45;
                    /* Next insn is delay slot */ 
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2a3fc;
                    run_2a200(); return;
                case 0x2b95c:
                    if(r5 > 0) {
                        /* Next insn is delay slot */ 
                        r23 = r3 + 1;
                        pc=0x2b940;
                        continue;
                    }
                    r23 = r3 + 1;
                    r2 = r3 - r5;
                    /* Next insn is delay slot */ 
                    r23 = r2 + 2;
                    pc=0x2b940;
                    continue;
                case 0x2b970:
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        r23 = r18 + 2;
                        pc=0x2b940;
                        continue;
                    }
                    r23 = r18 + 2;
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        r23 = r5 + r0;
                        pc=0x2b994;
                        continue;
                    }
                    r23 = r5 + r0;
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b940;
                        continue;
                    }
                case 0x2b994:
                    r2 = r5 + r18;
                    /* Next insn is delay slot */ 
                    r23 = r2 + 1;
                    pc=0x2b940;
                    continue;
                case 0x2b9a0:
                    r5 = r5 + -1;
                    r4 = r29 + 48;
                    r6 = r22 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff] = r5;
                    r31=0x2b9b4;
                    pc=0x2c000;
                    run_2c000(); return;
                case 0x2b9b4:
                    writePages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+544)>>>12][((r29+544)>>>2)&0x3ff];
                    r2 = readPages[(r29+512)>>>12][((r29+512)>>>2)&0x3ff];
                    r23 = r3 + r2;
                    r2 = r2 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b9dc;
                        continue;
                    }
                case 0x2b9d4:
                    /* Next insn is delay slot */ 
                    r23 = r23 + 1;
                    pc=0x2b940;
                    continue;
                case 0x2b9dc:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b940;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2b9d4;
                    continue;
                case 0x2b9f8:
                    r5 = readPages[(r29+508)>>>12][((r29+508)>>>2)&0x3ff];
                case 0x2ba00:
                    pc=0x2ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ba00() throws ExecutionException { /* 0x2ba00 - 0x2bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ba00:
                    r2 = r5 < -3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba18;
                        continue;
                    }
                    r2 = r18 < r5 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba2c;
                        continue;
                    }
                case 0x2ba18:
                    if(r22 == r3) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 101;
                        pc=0x2ba24;
                        continue;
                    }
                    r2 = r0 + 101;
                    r2 = r0 + 69;
                case 0x2ba24:
                    /* Next insn is delay slot */ 
                    r22 = r2 + r0;
                    pc=0x2b8fc;
                    run_2b800(); return;
                case 0x2ba2c:
                    /* Next insn is delay slot */ 
                    r22 = r0 + 103;
                    pc=0x2b908;
                    run_2b800(); return;
                case 0x2ba34:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r2 = r3 + 7;
                    pc=0x2b7dc;
                    run_2b600(); return;
                case 0x2ba44:
                    if(r18 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b7bc;
                        run_2b600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r18 = r0 + 1;
                    pc=0x2b7bc;
                    run_2b600(); return;
                case 0x2ba54:
                    /* Next insn is delay slot */ 
                    r18 = r0 + 6;
                    pc=0x2b7bc;
                    run_2b600(); return;
                case 0x2ba5c:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r3 | 64;
                    pc=0x2a200;
                    run_2a200(); return;
                case 0x2ba6c:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 108;
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ba94;
                        continue;
                    }
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r2 | 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x2a1a0;
                    run_2a000(); return;
                case 0x2ba94:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r20 = r20 + 1;
                    /* Next insn is delay slot */ 
                    r4 = r4 | 32;
                    pc=0x2a2f4;
                    run_2a200(); return;
                case 0x2baa4:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r3 & 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb48;
                        continue;
                    }
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb00;
                        continue;
                    }
                    r2 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r2 + 3;
                case 0x2bad8:
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    pc=0x2a0ec;
                    run_2a000(); return;
                case 0x2bb00:
                    r4 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r2 = r4 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bb48;
                        continue;
                    }
                    r2 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r3 = r2 + 3;
                    r2 = r0 + -4;
                    r3 = r3 & r2;
                    r4 = r3 + r0;
                    r3 = r3 + 4;
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = readPages[(r29+520)>>>12][((r29+520)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2a0ec;
                    run_2a000(); return;
                case 0x2bb48:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r4 + 3;
                    pc=0x2bad8;
                    continue;
                case 0x2bb58:
                    r4 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r4 + 3;
                    r3 = r3 & r2;
                    r2 = 5 << 16;
                    r2 = r2 + -25108;
                    r4 = r3 + r0;
                    writePages[(r29+556)>>>12][((r29+556)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r3;
                    r2 = r2 | 2;
                    r16 = r0 + r0;
                    r3 = r0 + 2;
                    r22 = r0 + 120;
                    /* Next insn is delay slot */ 
                    writePages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff] = r2;
                    pc=0x2b50c;
                    run_2b400(); return;
                case 0x2bba0:
                    r3 = readPages[(r29+516)>>>12][((r29+516)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r3 = r3 | 32;
                    pc=0x2a200;
                    run_2a200(); return;
                case 0x2bbb0:
                    r3 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r2 = r3 + 3;
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r4 = r2 + r0;
                    r21 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r2 + 4;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                        pc=0x2bc20;
                        run_2bc00(); return;
                    }
                    writePages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff] = r2;
                case 0x2bbd8:
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc10;
                        run_2bc00(); return;
                    }
                    r4 = r21 + r0;
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x2bbf0;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x2bbf0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r23 = r18 + r0;
                        pc=0x2b790;
                        run_2b600(); return;
                    }
                    r23 = r18 + r0;
                    r23 = r2 - r21;
                    r2 = r18 < r23 ? 1 : 0;
                case 0x2bc00:
                    pc=0x2bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2bc00() throws ExecutionException { /* 0x2bc00 - 0x2be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2bc00:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2b790;
                        run_2b600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r23 = r18 + r0;
                    pc=0x2b790;
                    run_2b600(); return;
                case 0x2bc10:
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x2bc18;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x2bc18:
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    pc=0x2b790;
                    run_2b600(); return;
                case 0x2bc20:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r21 = r2 + -19448;
                    pc=0x2bbd8;
                    run_2ba00(); return;
                case 0x2bc2c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc40;
                        continue;
                    }
                    r21 = r29 + 136;
                    /* Next insn is delay slot */ 
                    addr=r29+136;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r22&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2b78c;
                    run_2b600(); return;
                case 0x2bc40:
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc58;
                        continue;
                    }
                case 0x2bc50:
                    /* Next insn is delay slot */ 
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                    pc=0x2a754;
                    run_2a600(); return;
                case 0x2bc58:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2bc64;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2bc64:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bc50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2a754;
                    run_2a600(); return;
                case 0x2bc74:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -25108;
                    pc=0x2b674;
                    run_2b600(); return;
                case 0x2bc80:
                    r4 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r29 + 56;
                    r31=0x2bc8c;
                    pc=0x29a00;
                    run_29a00(); return;
                case 0x2bc8c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a754;
                        run_2a600(); return;
                    }
                    /* Next insn is delay slot */ 
                    r19 = r29 + 72;
                    pc=0x2a168;
                    run_2a000(); return;
                case 0x2bc9c:
                    r3 = readPages[(r29+604)>>>12][((r29+604)>>>2)&0x3ff];
                    addr=r3+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2a0d4;
                        run_2a000(); return;
                    }
                    r6 = readPages[(r29+612)>>>12][((r29+612)>>>2)&0x3ff];
                    r4 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x2bcc4;
                    pc=0x29c00;
                    run_29c00(); return;
                case 0x2bcc4:
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x2a774;
                    run_2a600(); return;
                case 0x2be00:
                    pc=0x2be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2be00() throws ExecutionException { /* 0x2be00 - 0x2c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2be00:
                    r29 = r29 + -72;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r2 = r0 + 102;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = f21;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = f20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    f20 = r7;
                    f21 = r6;
                    r17 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r6 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    r18 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 3;
                        pc=0x2be5c;
                        continue;
                    }
                    r5 = r0 + 3;
                    r2 = r0 + 101;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfcc;
                        continue;
                    }
                    r2 = r0 + 69;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfcc;
                        continue;
                    }
                case 0x2be58:
                    r5 = r0 + 2;
                case 0x2be5c:
                    r3 = f20;
                    r2 = f21;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bfbc;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2be74:
                    r7 = f20;
                    r6 = f21;
                    r2 = r29 + 40;
                    r3 = r29 + 44;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    r31=0x2be9c;
                    pc=0x3c400;
                    run_3c400(); return;
                case 0x2be9c:
                    r8 = r2 + r0;
                    r2 = r0 + 103;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf9c;
                        continue;
                    }
                    r2 = r0 + 71;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf9c;
                        continue;
                    }
                case 0x2beb8:
                    r2 = r0 + 102;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        r6 = r8 + r17;
                        pc=0x2bf50;
                        continue;
                    }
                    r6 = r8 + r17;
                case 0x2bec4:
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2bee4;
                        continue;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r6;
                case 0x2bee4:
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r2 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf20;
                        continue;
                    }
                    r7 = r0 + 48;
                    r5 = r3 + 1;
                    r4 = r3 + r0;
                case 0x2bf04:
                    r3 = r5 + r0;
                    r2 = ((r3 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r7&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r5;
                    r4 = r4 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x2bf04;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x2bf20:
                    r2 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r3 = r3 - r8;
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    f21 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    f20 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r8 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 72;
                    pc=r31;
                    return;
                case 0x2bf50:
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 48;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf70;
                        continue;
                    }
                case 0x2bf60:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r6 + r2;
                    pc=0x2bec4;
                    continue;
                case 0x2bf70:
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x2bf60;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r2 - r17;
                    /* Next insn is delay slot */ 
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    pc=0x2bf60;
                    continue;
                case 0x2bf9c:
                    r2 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r2 = r2 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2beb8;
                        continue;
                    }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2bf20;
                    continue;
                case 0x2bfbc:
                    r2 = r0 + 45;
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f21&0xffffffffL) << 32) | (f20&0xffffffffL)))); f21 = (int)(l >>> 32); f20 = (int)l; }
                    /* Next insn is delay slot */ 
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2be74;
                    continue;
                case 0x2bfcc:
                    /* Next insn is delay slot */ 
                    r17 = r17 + 1;
                    pc=0x2be58;
                    continue;
                case 0x2c000:
                    pc=0x2c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c000() throws ExecutionException { /* 0x2c000 - 0x2c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c000:
                    r29 = r29 + -40;
                    r10 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 43;
                        pc=0x2c0dc;
                        continue;
                    }
                    r2 = r0 + 43;
                case 0x2c014:
                    addr=r10+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r29 + 40;
                    r2 = r5 < 10 ? 1 : 0;
                    r8 = r10 + 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r6 + r0;
                        pc=0x2c0c0;
                        continue;
                    }
                    r11 = r6 + r0;
                    r9 = 26214 << 16;
                    r9 = r9 | 26215;
                    r7 = r6 + r0;
                case 0x2c038:
                    { long hilo = (long)(r5) * ((long)r9); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r5 >> 31;
                    r7 = r7 + -1;
                    r6 = r6 + -1;
                    r3 = hi;
                    r3 = r3 >> 2;
                    r3 = r3 - r4;
                    r2 = r3 << 2;
                    r2 = r2 + r3;
                    r2 = r2 << 1;
                    r2 = r5 - r2;
                    r2 = r2 + 48;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 < 10 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r3 + r0;
                        pc=0x2c038;
                        continue;
                    }
                    r5 = r3 + r0;
                    r6 = r6 + -1;
                    r2 = r3 + 48;
                    r3 = ((r6 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r6+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x2c0b4;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r8 + r0;
                    r3 = r6 + r0;
                case 0x2c094:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r6 = r6 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = ((r6 & 0xffffffffL) < (r11 & 0xffffffffL)) ? 1 : 0;
                    r3 = r3 + 1;
                    r8 = r8 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 1;
                        pc=0x2c094;
                        continue;
                    }
                    r4 = r4 + 1;
                case 0x2c0b4:
                    r2 = r8 - r10;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x2c0c0:
                    r2 = r0 + 48;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    r2 = r5 + 48;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r8 = r8 + 1;
                    pc=0x2c0b4;
                    continue;
                case 0x2c0dc:
                    r5 = r0 - r5;
                    /* Next insn is delay slot */ 
                    r2 = r0 + 45;
                    pc=0x2c014;
                    continue;
                case 0x2c200:
                    pc=0x2c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c200() throws ExecutionException { /* 0x2c200 - 0x2c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r17 = r5 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x2c238;
                        continue;
                    }
                    r18 = r6 + r0;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x2c238:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c274;
                        continue;
                    }
                case 0x2c248:
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r18 + r0;
                    r31=0x2c25c;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x2c25c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2c274:
                    /* Next insn is delay slot */ 
                    r31=0x2c27c;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2c27c:
                    /* Next insn is delay slot */ 
                    pc=0x2c248;
                    continue;
                case 0x2c400:
                    pc=0x2c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c400() throws ExecutionException { /* 0x2c400 - 0x2c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c400:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2c428;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x2c428:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c600:
                    pc=0x2c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c600() throws ExecutionException { /* 0x2c600 - 0x2c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c600:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x2c610;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x2c610:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2c800:
                    pc=0x2c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2c800() throws ExecutionException { /* 0x2c800 - 0x2ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2c800:
                    r29 = r29 + -688;
                    writePages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff] = r23;
                    writePages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff] = r20;
                    writePages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff] = r19;
                    writePages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff] = r16;
                    writePages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff] = r31;
                    writePages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff] = r30;
                    writePages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff] = r22;
                    writePages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff] = r21;
                    writePages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff] = r18;
                    writePages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff] = r17;
                    writePages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff] = r4;
                    r16 = r5 + r0;
                    r23 = r7 + r0;
                    r20 = r6 + r0;
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r0;
                    writePages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff] = r0;
                    writePages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff] = r0;
                    r19 = r0 + r0;
                case 0x2c84c:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r2 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r20 + 1;
                        pc=0x2c8bc;
                        continue;
                    }
                    r20 = r20 + 1;
                    r2 = r0 + 1;
                    if(r2 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d688;
                        run_2d600(); return;
                    }
                case 0x2c868:
                    r2 = r0 + 37;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c914;
                        continue;
                    }
                case 0x2c874:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r17 = r20 + -1;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r18 = r19 + r0;
                        pc=0x2c8ec;
                        continue;
                    }
                    r18 = r19 + r0;
                case 0x2c884:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8b8;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r4 + 1;
                    r2 = r2 + -1;
                    r19 = r18 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x2c84c;
                    continue;
                case 0x2c8b8:
                    r2 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                case 0x2c8bc:
                    r31 = readPages[(r29+684)>>>12][((r29+684)>>>2)&0x3ff];
                    r30 = readPages[(r29+680)>>>12][((r29+680)>>>2)&0x3ff];
                    r23 = readPages[(r29+676)>>>12][((r29+676)>>>2)&0x3ff];
                    r22 = readPages[(r29+672)>>>12][((r29+672)>>>2)&0x3ff];
                    r21 = readPages[(r29+668)>>>12][((r29+668)>>>2)&0x3ff];
                    r20 = readPages[(r29+664)>>>12][((r29+664)>>>2)&0x3ff];
                    r19 = readPages[(r29+660)>>>12][((r29+660)>>>2)&0x3ff];
                    r18 = readPages[(r29+656)>>>12][((r29+656)>>>2)&0x3ff];
                    r17 = readPages[(r29+652)>>>12][((r29+652)>>>2)&0x3ff];
                    r16 = readPages[(r29+648)>>>12][((r29+648)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 688;
                    pc=r31;
                    return;
                case 0x2c8ec:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2c8f4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2c8f4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c884;
                        continue;
                    }
                case 0x2c8fc:
                    r2 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8bc;
                        continue;
                    }
                case 0x2c90c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + -1;
                    pc=0x2c8bc;
                    continue;
                case 0x2c914:
                    r21 = r0 + r0;
                    r22 = r0 + r0;
                case 0x2c91c:
                    addr=r20+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r17 = tmp;
                    r20 = r20 + 1;
                    r2 = (r17&0xffffffffL) < (121&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d634;
                        run_2d600(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r17 << 2;
                    r3 = r3 + -24696;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x2c950:
                    /* Next insn is delay slot */ 
                    r22 = r22 | 8;
                    pc=0x2c91c;
                    continue;
                case 0x2c958:
                    r2 = r21 << 2;
                    r2 = r2 + r21;
                    r2 = r2 << 1;
                    r2 = r2 + r17;
                    /* Next insn is delay slot */ 
                    r21 = r2 + -48;
                    pc=0x2c91c;
                    continue;
                case 0x2c970:
                    r22 = r22 | 1;
                case 0x2c974:
                    r2 = 3 << 16;
                    r17 = r0 + 3;
                    r2 = r2 + -28672;
                case 0x2c980:
                    writePages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff] = r2;
                    r2 = r0 + 10;
                case 0x2c988:
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r2;
                case 0x2c98c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d4cc;
                        run_2d400(); return;
                    }
                case 0x2c99c:
                    r2 = r22 & 32;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca18;
                        run_2ca00(); return;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r2 + -23196;
                    r3 = r3 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca18;
                        run_2ca00(); return;
                    }
                    r18 = r5 + r0;
                case 0x2c9d4:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    r2 = r2 + -1;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                        pc=0x2d4b4;
                        run_2d400(); return;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = r4 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x2c9f0:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                case 0x2ca00:
                    pc=0x2ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ca00() throws ExecutionException { /* 0x2ca00 - 0x2cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ca00:
                    r2 = r2 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c9d4;
                        run_2c800(); return;
                    }
                case 0x2ca18:
                    r2 = (r17&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c84c;
                        run_2c800(); return;
                    }
                    r3 = 5 << 16;
                    r2 = r17 << 2;
                    r3 = r3 + -24212;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x2ca44:
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca50;
                        continue;
                    }
                    r21 = r0 + 1;
                case 0x2ca50:
                    r2 = r22 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cac4;
                        continue;
                    }
                    r18 = r0 + r0;
                case 0x2ca60:
                    r17 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r17 < r21 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2caa8;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r2 = r2 + r17;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = r18 + r17;
                    /* Next insn is delay slot */ 
                    r21 = r21 - r17;
                    r31=0x2ca90;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2ca90:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ca60;
                        continue;
                    }
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8fc;
                        run_2c800(); return;
                    }
                case 0x2caa0:
                    /* Next insn is delay slot */ 
                    r19 = r19 + r18;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2caa8:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r3 = r17 - r21;
                    r2 = r2 + r21;
                    r18 = r18 + r21;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    pc=0x2caa0;
                    continue;
                case 0x2cac4:
                    r2 = r23 + 3;
                    r3 = r0 + -4;
                    r23 = r2 & r3;
                    r5 = r23 + r0;
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r6 = r21 + r0;
                    r5 = r0 + 1;
                    r7 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r23 + 4;
                    r31=0x2caec;
                    pc=0x21e00;
                    run_21e00(); return;
                case 0x2caec:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8fc;
                        run_2c800(); return;
                    }
                case 0x2caf4:
                    r19 = r19 + r2;
                    r2 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff] = r2;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2cb0c:
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb18;
                        continue;
                    }
                    r21 = r0 + -1;
                case 0x2cb18:
                    r2 = r22 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cbc4;
                        continue;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r29 + 16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = r0 + r0;
                    r2 = r18 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8b8;
                        run_2c800(); return;
                    }
                case 0x2cb48:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -1;
                    r3 = r2 + -1;
                    r2 = r4 + 1;
                    r17 = r17 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                        pc=0x2cb94;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cba4;
                        continue;
                    }
                case 0x2cb70:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r18 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb48;
                        continue;
                    }
                case 0x2cb94:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8b8;
                        run_2c800(); return;
                    }
                case 0x2cb9c:
                    /* Next insn is delay slot */ 
                    r19 = r19 + r17;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2cba4:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2cbac;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2cbac:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb70;
                        continue;
                    }
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb9c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c8fc;
                    run_2c800(); return;
                case 0x2cbc4:
                    r3 = r23 + 3;
                    r2 = r0 + -4;
                    r23 = r3 & r2;
                    r4 = r23 + r0;
                    r18 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r30 = r29 + 16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + 4;
                    r2 = r30 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r22 = r18 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc60;
                        run_2cc00(); return;
                    }
                    r17 = r18 + r0;
                case 0x2cc00:
                    pc=0x2cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2cc00() throws ExecutionException { /* 0x2cc00 - 0x2ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2cc00:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -1;
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r4 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = r18 + 1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + 1;
                        pc=0x2cc60;
                        continue;
                    }
                    r17 = r17 + 1;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc84;
                        continue;
                    }
                case 0x2cc3c:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r30 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc00;
                        continue;
                    }
                case 0x2cc60:
                    r17 = r18 - r22;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8b8;
                        run_2c800(); return;
                    }
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff] = r3;
                    pc=0x2cb9c;
                    run_2ca00(); return;
                case 0x2cc84:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2cc8c;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2cc8c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc3c;
                        continue;
                    }
                    if(r18 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x2cc60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c8fc;
                    run_2c800(); return;
                case 0x2cca4:
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ccb0;
                        continue;
                    }
                    r21 = r0 + -1;
                case 0x2ccb0:
                    r2 = r22 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd58;
                        continue;
                    }
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r2 + -23196;
                    r3 = r3 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r17 = r0 + r0;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cb9c;
                        run_2ca00(); return;
                    }
                    r18 = r5 + r0;
                case 0x2cce8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -1;
                    r3 = r2 + -1;
                    r2 = r4 + 1;
                    r17 = r17 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                        pc=0x2cb9c;
                        run_2ca00(); return;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd40;
                        continue;
                    }
                case 0x2cd10:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r18;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cce8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2cb9c;
                    run_2ca00(); return;
                case 0x2cd40:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2cd48;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2cd48:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2cb9c;
                    run_2ca00(); return;
                case 0x2cd58:
                    r3 = r23 + 3;
                    r2 = r0 + -4;
                    r23 = r3 & r2;
                    r4 = r23 + r0;
                    r18 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r5 = r2 + -23196;
                    r3 = r3 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r23 = r23 + 4;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r18 + r0;
                        pc=0x2ce00;
                        run_2ce00(); return;
                    }
                    r22 = r18 + r0;
                    r30 = r5 + r0;
                    r17 = r18 + r0;
                case 0x2cd9c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r21 = r21 + -1;
                    r2 = r2 + -1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = r4 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r18 = r18 + 1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r3&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r17 + 1;
                        pc=0x2ce00;
                        run_2ce00(); return;
                    }
                    r17 = r17 + 1;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce0c;
                        run_2ce00(); return;
                    }
                case 0x2cdd8:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r30;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cd9c;
                        continue;
                    }
                case 0x2ce00:
                    pc=0x2ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ce00() throws ExecutionException { /* 0x2ce00 - 0x2d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ce00:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r2 = r18 - r22;
                    pc=0x2caf4;
                    run_2ca00(); return;
                case 0x2ce0c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2ce14;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2ce14:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cdd8;
                        run_2cc00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ce00;
                    continue;
                case 0x2ce24:
                    r21 = r21 + -1;
                    r2 = (r21&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce38;
                        continue;
                    }
                    r21 = r0 + 348;
                case 0x2ce38:
                    r21 = r21 + 1;
                    r22 = r22 | 704;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r29 + 272;
                        pc=0x2ceec;
                        continue;
                    }
                    r18 = r29 + 272;
                case 0x2ce48:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r17 = tmp;
                    r3 = r17 + -43;
                    r2 = (r3&0xffffffffL) < (78&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ceec;
                        continue;
                    }
                    r2 = r3 << 2;
                    r3 = 5 << 16;
                    r3 = r3 + -24192;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x2ce88:
                    r3 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cea4;
                        continue;
                    }
                    r2 = r0 + 8;
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r2;
                    r22 = r22 | 256;
                case 0x2cea4:
                    r2 = r22 & 512;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d0b4;
                        run_2d000(); return;
                    }
                    r2 = r0 + -705;
                case 0x2ceb4:
                    r22 = r22 & r2;
                case 0x2ceb8:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r18 = r18 + 1;
                    r2 = r2 + -1;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                        pc=0x2d09c;
                        run_2d000(); return;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x2cee0:
                    r21 = r21 + -1;
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ce48;
                        continue;
                    }
                case 0x2ceec:
                    r2 = r22 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d078;
                        run_2d000(); return;
                    }
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r17 = tmp;
                    r2 = r0 + 120;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d060;
                        run_2d000(); return;
                    }
                    r2 = r0 + 88;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d060;
                        run_2d000(); return;
                    }
                case 0x2cf14:
                    r2 = r22 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cf30;
                        continue;
                    }
                case 0x2cf20:
                    r3 = r29 + 272;
                    r2 = r18 - r3;
                    /* Next insn is delay slot */ 
                    r19 = r19 + r2;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2cf30:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r7 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    r3 = readPages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff];
                    r5 = r29 + 272;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    pc=r3;
                    r31=0x2cf4c;
                    return;
                case 0x2cf4c:
                    r5 = r2 + r0;
                    r2 = r22 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cf8c;
                        continue;
                    }
                    r2 = r0 + -4;
                    r3 = r23 + 3;
                    r23 = r3 & r2;
                    r4 = r23 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x2cf78:
                    r2 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff] = r2;
                    pc=0x2cf20;
                    continue;
                case 0x2cf8c:
                    r2 = r22 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cfb8;
                        continue;
                    }
                    r2 = r23 + 3;
                    r3 = r0 + -4;
                    r23 = r2 & r3;
                    r4 = r23 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2cf78;
                    continue;
                case 0x2cfb8:
                    r2 = r22 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d040;
                        run_2d000(); return;
                    }
                    r2 = r22 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d040;
                        run_2d000(); return;
                    }
                    r2 = 4 << 16;
                    r3 = readPages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff];
                    r2 = r2 + 21504;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d024;
                        run_2d000(); return;
                    }
                    r4 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r7 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    r5 = r29 + 272;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x2cff8;
                    pc=0x45000;
                    run_45000(); return;
                case 0x2cff8:
                    r8 = r2 + r0;
                    r9 = r3 + r0;
                case 0x2d000:
                    pc=0x2d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d000() throws ExecutionException { /* 0x2d000 - 0x2d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d000:
                    r2 = r23 + 3;
                    r3 = r0 + -4;
                    r23 = r2 & r3;
                    r4 = r23 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r8;
                    /* Next insn is delay slot */ 
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r9;
                    pc=0x2cf78;
                    run_2ce00(); return;
                case 0x2d024:
                    r4 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r7 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    r5 = r29 + 272;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x2d038;
                    pc=0x45800;
                    run_45800(); return;
                case 0x2d038:
                    /* Next insn is delay slot */ 
                    pc=0x2cff8;
                    run_2ce00(); return;
                case 0x2d040:
                    r2 = r23 + 3;
                    r3 = r0 + -4;
                    r23 = r2 & r3;
                    r4 = r23 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    pc=0x2cf78;
                    run_2ce00(); return;
                case 0x2d060:
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r18 + -1;
                    r31=0x2d070;
                    pc=0x46400;
                    run_46400(); return;
                case 0x2d070:
                    /* Next insn is delay slot */ 
                    pc=0x2cf14;
                    run_2ce00(); return;
                case 0x2d078:
                    r3 = r29 + 272;
                    r2 = ((r3 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8b8;
                        run_2c800(); return;
                    }
                    addr=r18+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x2d094;
                    pc=0x46400;
                    run_46400(); return;
                case 0x2d094:
                    /* Next insn is delay slot */ 
                    pc=0x2c8b8;
                    run_2c800(); return;
                case 0x2d09c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2d0a4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2d0a4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2cee0;
                        run_2ce00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ceec;
                    run_2ce00(); return;
                case 0x2d0b4:
                    /* Next insn is delay slot */ 
                    r2 = r0 + -449;
                    pc=0x2ceb4;
                    run_2ce00(); return;
                case 0x2d0bc:
                    r2 = r22 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ceec;
                        run_2ce00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r0 + -65;
                    pc=0x2ceb4;
                    run_2ce00(); return;
                case 0x2d0d0:
                    r3 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r3 = 5 << 16;
                    r3 = r3 + -24732;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r0 + -449;
                    r22 = r22 & r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r2;
                    pc=0x2ceb8;
                    run_2ce00(); return;
                case 0x2d0fc:
                    r3 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    r2 = r3 << 1;
                    r3 = 5 << 16;
                    r3 = r3 + -24732;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    if((tmp&0x8000)!=0) tmp |= 0xffff0000; /* sign extend */
                    r2 = tmp;
                    r3 = r2 < 9 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r2;
                        pc=0x2d0b4;
                        continue;
                    }
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x2ceec;
                    run_2ce00(); return;
                case 0x2d130:
                    r3 = readPages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff];
                    r2 = r3 < 11 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d0b4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2ceec;
                    run_2ce00(); return;
                case 0x2d14c:
                    r2 = r22 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ceec;
                        run_2ce00(); return;
                    }
                    r2 = r29 + 273;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2ceec;
                        run_2ce00(); return;
                    }
                    r2 = r0 + 16;
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r0 + -257;
                    pc=0x2ceb4;
                    run_2ce00(); return;
                case 0x2d174:
                    r21 = r21 + -1;
                    r2 = (r21&0xffffffffL) < (349&0xffffffffL) ? 1 : 0;
                    writePages[(r29+636)>>>12][((r29+636)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff] = r0;
                        pc=0x2d18c;
                        continue;
                    }
                    writePages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff] = r0;
                    r21 = r0 + 348;
                case 0x2d18c:
                    r21 = r21 + 1;
                    r22 = r22 | 960;
                    r30 = r0 + r0;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r0;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r29 + 272;
                        pc=0x2d240;
                        run_2d200(); return;
                    }
                    r18 = r29 + 272;
                case 0x2d1a4:
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r17 = tmp;
                    r3 = r17 + -43;
                    r2 = (r3&0xffffffffL) < (59&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d230;
                        run_2d200(); return;
                    }
                    r2 = r3 << 2;
                    r3 = 5 << 16;
                    r3 = r3 + -23880;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x2d1e4:
                    r2 = r22 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d420;
                        run_2d400(); return;
                    }
                case 0x2d1f0:
                    r2 = r0 + -193;
                case 0x2d1f4:
                    r22 = r22 & r2;
                case 0x2d1f8:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r21 = r21 + -1;
                case 0x2d200:
                    pc=0x2d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d200() throws ExecutionException { /* 0x2d200 - 0x2d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d200:
                    r18 = r18 + 1;
                case 0x2d204:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r19 = r19 + 1;
                    r2 = r2 + -1;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                        pc=0x2d408;
                        run_2d400(); return;
                    }
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x2d228:
                    if(r21 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d1a4;
                        run_2d000(); return;
                    }
                case 0x2d230:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d240;
                        continue;
                    }
                    r2 = r0 + -129;
                    r22 = r22 & r2;
                case 0x2d240:
                    r2 = r22 & 128;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d29c;
                        continue;
                    }
                    r2 = r22 & 512;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d3c8;
                        continue;
                    }
                    r18 = r18 + -1;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r17 = tmp;
                    r2 = r0 + 101;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + -1;
                        pc=0x2d290;
                        continue;
                    }
                    r19 = r19 + -1;
                    r2 = r0 + 69;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d290;
                        continue;
                    }
                    r4 = r17 + r0;
                    r5 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r18 + -1;
                    r31=0x2d288;
                    pc=0x46400;
                    run_46400(); return;
                case 0x2d288:
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r17 = tmp;
                    r19 = r19 + -1;
                case 0x2d290:
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x2d29c;
                    pc=0x46400;
                    run_46400(); return;
                case 0x2d29c:
                    r2 = r22 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c84c;
                        run_2c800(); return;
                    }
                    r3 = r22 & 768;
                    r2 = r0 + 512;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        addr=r18+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x2d3b0;
                        continue;
                    }
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d348;
                        continue;
                    }
                case 0x2d2c8:
                    r4 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r5 = r29 + 272;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x2d2d8;
                    pc=0x27a00;
                    run_27a00(); return;
                case 0x2d2d8:
                    r2 = r22 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2f0;
                        continue;
                    }
                    r2 = r22 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d324;
                        continue;
                    }
                case 0x2d2f0:
                    r2 = r0 + -4;
                    r3 = r23 + 3;
                    r23 = r3 & r2;
                    r4 = r23 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = f0;
                case 0x2d310:
                    r3 = readPages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+624)>>>12][((r29+624)>>>2)&0x3ff] = r3;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2d324:
                    r2 = r0 + -4;
                    r3 = r23 + 3;
                    r23 = r3 & r2;
                    r4 = r23 + r0;
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    f0=Float.floatToRawIntBits((float)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))));
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = f0;
                    pc=0x2d310;
                    continue;
                case 0x2d348:
                    r3 = readPages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff];
                    r4 = readPages[(r29+688)>>>12][((r29+688)>>>2)&0x3ff];
                    r5 = r3 + 1;
                    r6 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 10;
                    r31=0x2d360;
                    pc=0x29000;
                    run_29000(); return;
                case 0x2d360:
                    r3 = readPages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff];
                    r6 = r2 - r3;
                case 0x2d36c:
                    r2 = readPages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d2c8;
                        continue;
                    }
                    r3 = readPages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff];
                    r2 = r29 + 611;
                    r2 = ((r3 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d398;
                        continue;
                    }
                    r2 = r29 + 610;
                    writePages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff] = r2;
                case 0x2d398:
                    r5 = 5 << 16;
                    r4 = readPages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -19440;
                    r31=0x2d3a8;
                    pc=0x26400;
                    run_26400(); return;
                case 0x2d3a8:
                    /* Next insn is delay slot */ 
                    pc=0x2d2c8;
                    continue;
                case 0x2d3b0:
                    r3 = readPages[(r29+636)>>>12][((r29+636)>>>2)&0x3ff];
                    writePages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff] = r18;
                    r30 = r30 - r3;
                    r6 = r0 - r30;
                    /* Next insn is delay slot */ 
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r30;
                    pc=0x2d36c;
                    continue;
                case 0x2d3c8:
                    r3 = r29 + 272;
                    r2 = ((r3 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c8b8;
                        run_2c800(); return;
                    }
                    r17 = r18 + r0;
                case 0x2d3dc:
                    r17 = r17 + -1;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    /* Next insn is delay slot */ 
                    r5 = r16 + r0;
                    r31=0x2d3ec;
                    pc=0x46400;
                    run_46400(); return;
                case 0x2d3ec:
                    r18 = r18 + -1;
                    r2 = r29 + 272;
                    r3 = ((r2 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d3dc;
                        continue;
                    }
                case 0x2d400:
                    pc=0x2d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d400() throws ExecutionException { /* 0x2d400 - 0x2d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d400:
                    /* Next insn is delay slot */ 
                    pc=0x2c8b8;
                    run_2c800(); return;
                case 0x2d408:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2d410;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2d410:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d228;
                        run_2d200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2d230;
                    run_2d200(); return;
                case 0x2d420:
                    r2 = r0 + -65;
                    r22 = r22 & r2;
                    /* Next insn is delay slot */ 
                    r30 = r30 + 1;
                    pc=0x2d204;
                    run_2d200(); return;
                case 0x2d430:
                    r2 = r22 & 64;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d230;
                        run_2d200(); return;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r0 + -65;
                    pc=0x2d1f4;
                    run_2d000(); return;
                case 0x2d444:
                    r2 = r22 & 256;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d230;
                        run_2d200(); return;
                    }
                    r2 = r0 + -321;
                    r22 = r22 & r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+636)>>>12][((r29+636)>>>2)&0x3ff] = r30;
                    pc=0x2d1f8;
                    run_2d000(); return;
                case 0x2d460:
                    r3 = r22 & 640;
                    r2 = r0 + 512;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2d484;
                        continue;
                    }
                    r2 = r22 & 512;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d230;
                        run_2d200(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d240;
                        run_2d200(); return;
                    }
                case 0x2d484:
                    r2 = r22 & 256;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d4a0;
                        continue;
                    }
                    r2 = readPages[(r29+636)>>>12][((r29+636)>>>2)&0x3ff];
                    writePages[(r29+644)>>>12][((r29+644)>>>2)&0x3ff] = r18;
                    r30 = r30 - r2;
                    writePages[(r29+640)>>>12][((r29+640)>>>2)&0x3ff] = r30;
                case 0x2d4a0:
                    r2 = r0 + -769;
                    r2 = r22 & r2;
                    r22 = r2 | 192;
                    /* Next insn is delay slot */ 
                    r30 = r0 + r0;
                    pc=0x2d1f8;
                    run_2d000(); return;
                case 0x2d4b4:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2d4bc;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2d4bc:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c9f0;
                        run_2c800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c8fc;
                    run_2c800(); return;
                case 0x2d4cc:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2d4d4;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2d4d4:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c99c;
                        run_2c800(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c8fc;
                    run_2c800(); return;
                case 0x2d4e4:
                    /* Next insn is delay slot */ 
                    r22 = r22 | 2;
                    pc=0x2c91c;
                    run_2c800(); return;
                case 0x2d4ec:
                    r22 = r22 | 1;
                case 0x2d4f0:
                    r2 = 4 << 16;
                    r2 = r2 + 21504;
                    r17 = r0 + 3;
                    r3 = r0 + 8;
                case 0x2d500:
                    writePages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff] = r2;
                case 0x2d504:
                    /* Next insn is delay slot */ 
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r3;
                    pc=0x2c98c;
                    run_2c800(); return;
                case 0x2d50c:
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r29 + 16;
                    r31=0x2d518;
                    pc=0x2d800;
                    run_2d800(); return;
                case 0x2d518:
                    r20 = r2 + r0;
                    r22 = r22 | 32;
                    /* Next insn is delay slot */ 
                    r17 = r0 + 1;
                    pc=0x2c98c;
                    run_2c800(); return;
                case 0x2d528:
                    r22 = r22 | 32;
                    /* Next insn is delay slot */ 
                    r17 = r0 + r0;
                    pc=0x2c98c;
                    run_2c800(); return;
                case 0x2d534:
                    /* Next insn is delay slot */ 
                    r17 = r0 + 4;
                    pc=0x2c98c;
                    run_2c800(); return;
                case 0x2d53c:
                    /* Next insn is delay slot */ 
                    r22 = r22 | 4;
                    pc=0x2c91c;
                    run_2c800(); return;
                case 0x2d544:
                    r2 = 3 << 16;
                    r2 = r2 + -28672;
                    r17 = r0 + 3;
                    writePages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+628)>>>12][((r29+628)>>>2)&0x3ff] = r0;
                    pc=0x2c98c;
                    run_2c800(); return;
                case 0x2d55c:
                    /* Next insn is delay slot */ 
                    r22 = r22 | 1;
                    pc=0x2c91c;
                    run_2c800(); return;
                case 0x2d564:
                    r2 = r22 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c84c;
                        run_2c800(); return;
                    }
                    r2 = r22 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d59c;
                        continue;
                    }
                    r2 = r23 + 3;
                    r3 = r0 + -4;
                    r23 = r2 & r3;
                    r4 = r23 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2d59c:
                    r2 = r22 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d5e0;
                        continue;
                    }
                    r2 = r22 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d5e0;
                        continue;
                    }
                    r3 = r23 + 3;
                    r2 = r0 + -4;
                    r23 = r3 & r2;
                    r4 = r23 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r19 + r0;
                    r2 = r19 >> 31;
                    r23 = r23 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2d5e0:
                    r2 = r23 + 3;
                    r3 = r0 + -4;
                    r23 = r2 & r3;
                    r4 = r23 + r0;
                    r4 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r23 = r23 + 4;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r19;
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2d600:
                    pc=0x2d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d600() throws ExecutionException { /* 0x2d600 - 0x2d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d600:
                    r2 = 4 << 16;
                    r2 = r2 + 21504;
                    writePages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff] = r2;
                    r22 = r22 | 272;
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + 16;
                    pc=0x2c988;
                    run_2c800(); return;
                case 0x2d61c:
                    /* Next insn is delay slot */ 
                    r17 = r0 + 2;
                    pc=0x2c98c;
                    run_2c800(); return;
                case 0x2d624:
                    r2 = 4 << 16;
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r2 = r2 + 21504;
                    pc=0x2c980;
                    run_2c800(); return;
                case 0x2d634:
                    r2 = 5 << 16;
                    r2 = r2 + -23196;
                    r2 = r17 + r2;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d658;
                        continue;
                    }
                    r22 = r22 | 1;
                case 0x2d658:
                    r2 = 3 << 16;
                    r2 = r2 + -28672;
                    r17 = r0 + 3;
                    writePages[(r29+632)>>>12][((r29+632)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r3 = r0 + 10;
                    pc=0x2d504;
                    run_2d400(); return;
                case 0x2d670:
                    r2 = 4 << 16;
                    r2 = r2 + 21504;
                    r22 = r22 | 256;
                    r17 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r3 = r0 + 16;
                    pc=0x2d500;
                    run_2d400(); return;
                case 0x2d688:
                    r2 = 5 << 16;
                    r5 = r2 + -23196;
                    r3 = r4 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c868;
                        run_2c800(); return;
                    }
                    r17 = r5 + r0;
                case 0x2d6ac:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d700;
                        continue;
                    }
                case 0x2d6bc:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r2 = r2 + r17;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r3 = r3 & 8;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2c84c;
                        run_2c800(); return;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r4 + 1;
                    r2 = r2 + -1;
                    r19 = r19 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x2d6ac;
                    continue;
                case 0x2d700:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2d708;
                    pc=0x26000;
                    run_26000(); return;
                case 0x2d708:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d6bc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2c84c;
                    run_2c800(); return;
                case 0x2d800:
                    pc=0x2d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2d800() throws ExecutionException { /* 0x2d800 - 0x2da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2d800:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r2 = r0 + 94;
                    r5 = r5 + 1;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + r0;
                        pc=0x2d8e8;
                        continue;
                    }
                    r9 = r0 + r0;
                case 0x2d814:
                    r7 = r4 + r0;
                    r8 = r4 + 256;
                    r3 = r4 + r0;
                case 0x2d820:
                    r7 = r7 + 1;
                    r2 = r7 < r8 ? 1 : 0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x2d820;
                        continue;
                    }
                    r3 = r3 + 1;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + -1;
                        pc=0x2d8d0;
                        continue;
                    }
                    r2 = r5 + -1;
                    r2 = r0 + 1;
                    r9 = r2 - r9;
                    r11 = r0 + 45;
                    r10 = r0 + 93;
                    r8 = r5 + r0;
                case 0x2d850:
                    r2 = r4 + r6;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2d858:
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r5 = r5 + 1;
                    if(r7 != r11) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 1;
                        pc=0x2d8b4;
                        continue;
                    }
                    r8 = r8 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    if(r7 == r10) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8ac;
                        continue;
                    }
                    r2 = r7 < r6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8ac;
                        continue;
                    }
                    r5 = r5 + 1;
                    r8 = r8 + 1;
                    r3 = r6 + r4;
                case 0x2d890:
                    r6 = r6 + 1;
                    r3 = r3 + 1;
                    r2 = r6 < r7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        addr=r3+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x2d890;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x2d858;
                    continue;
                case 0x2d8ac:
                    /* Next insn is delay slot */ 
                    r6 = r0 + 45;
                    pc=0x2d850;
                    continue;
                case 0x2d8b4:
                    r2 = r7 < 46 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2d8d8;
                        continue;
                    }
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + -1;
                        pc=0x2d8d0;
                        continue;
                    }
                    r2 = r5 + -1;
                case 0x2d8c8:
                    /* Next insn is delay slot */ 
                    r6 = r7 + r0;
                    pc=0x2d850;
                    continue;
                case 0x2d8d0:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2d8d8:
                    if(r7 != r10) {
                        /* Next insn is delay slot */ 
                        r2 = r5 + r0;
                        pc=0x2d8c8;
                        continue;
                    }
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x2d8d0;
                    continue;
                case 0x2d8e8:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r6 = tmp;
                    r9 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    pc=0x2d814;
                    continue;
                case 0x2da00:
                    pc=0x2da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2da00() throws ExecutionException { /* 0x2da00 - 0x2dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2da00:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r4 = readPages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da34;
                        continue;
                    }
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x2da34:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db38;
                        continue;
                    }
                case 0x2da44:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = readPages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff];
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                        pc=0x2da68;
                        continue;
                    }
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2da7c;
                        continue;
                    }
                case 0x2da68:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2da70;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x2da70:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x2daec;
                        continue;
                    }
                    r3 = r0 + -1;
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                case 0x2da7c:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 & 255;
                    r4 = r3 - r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    r2 = r4 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2db1c;
                        continue;
                    }
                case 0x2da9c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    r2 = r2 + -1;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 + 1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2db04;
                        continue;
                    }
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dae8;
                        continue;
                    }
                    r2 = r0 + 10;
                    if(r17 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2db04;
                        continue;
                    }
                case 0x2dae8:
                    r3 = r17 + r0;
                case 0x2daec:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2db04:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2db0c;
                    pc=0x20600;
                    run_20600(); return;
                case 0x2db0c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x2dae8;
                        continue;
                    }
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x2daec;
                    continue;
                case 0x2db1c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2db24;
                    pc=0x20600;
                    run_20600(); return;
                case 0x2db24:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x2daec;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x2da9c;
                    continue;
                case 0x2db38:
                    /* Next insn is delay slot */ 
                    r31=0x2db40;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2db40:
                    /* Next insn is delay slot */ 
                    pc=0x2da44;
                    continue;
                case 0x2dc00:
                    pc=0x2dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2dc00() throws ExecutionException { /* 0x2dc00 - 0x2de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2dc00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc30;
                        continue;
                    }
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x2dc30:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd4c;
                        continue;
                    }
                case 0x2dc40:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                    r3 = r4 & 65535;
                    r2 = r3 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd40;
                        continue;
                    }
                    r2 = r3 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x2dcf4;
                        continue;
                    }
                    r5 = r0 + -1;
                    r2 = r3 & 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd34;
                        continue;
                    }
                    r5 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dca0;
                        continue;
                    }
                    r2 = r16 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2dc9c;
                        continue;
                    }
                    r4 = readPages[(r16+84)>>>12][((r16+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x2dc98;
                    pc=0x22000;
                    run_22000(); return;
                case 0x2dc98:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r4 = tmp;
                case 0x2dc9c:
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r0;
                case 0x2dca0:
                    r2 = r0 + -37;
                    r2 = r4 & r2;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r0;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                case 0x2dcbc:
                    r2 = r4 | 8;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2dcc4:
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd24;
                        continue;
                    }
                case 0x2dccc:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dd08;
                        continue;
                    }
                    r2 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r0 - r2;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                case 0x2dcf0:
                    r5 = r0 + r0;
                case 0x2dcf4:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x2dd08:
                    r2 = r3 & 2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x2dd1c;
                        continue;
                    }
                    r3 = r0 + r0;
                    r3 = readPages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff];
                case 0x2dd1c:
                    /* Next insn is delay slot */ 
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r3;
                    pc=0x2dcf0;
                    continue;
                case 0x2dd24:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2dd2c;
                    pc=0x23800;
                    run_23800(); return;
                case 0x2dd2c:
                    /* Next insn is delay slot */ 
                    pc=0x2dccc;
                    continue;
                case 0x2dd34:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2dcbc;
                    continue;
                case 0x2dd40:
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x2dcc4;
                    continue;
                case 0x2dd4c:
                    /* Next insn is delay slot */ 
                    r31=0x2dd54;
                    pc=0x21400;
                    run_21400(); return;
                case 0x2dd54:
                    /* Next insn is delay slot */ 
                    pc=0x2dc40;
                    continue;
                case 0x2de00:
                    pc=0x2de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2de00() throws ExecutionException { /* 0x2de00 - 0x2e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2de00:
                    r2 = r0 + 1;
                    pc = 0x2de04;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2de08;
                        return;
                    }
                case 0x2de08:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2de10:
                    r2 = r0 + 2;
                    pc = 0x2de14;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2de18;
                        return;
                    }
                case 0x2de18:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2de20:
                    r2 = r0 + 3;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2de34;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2de38;
                        return;
                    }
                case 0x2de38:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2de50:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2de60:
                    r2 = r0 + 4;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2de74;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2de78;
                        return;
                    }
                case 0x2de78:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2de90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2de90:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2dea0:
                    r2 = r0 + 5;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2deb4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2deb8;
                        return;
                    }
                case 0x2deb8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ded0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ded0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2dee0:
                    r2 = r0 + 6;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2def4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2def8;
                        return;
                    }
                case 0x2def8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2df10;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2df10:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2df20:
                    r2 = r0 + 7;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2df34;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2df38;
                        return;
                    }
                case 0x2df38:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2df50;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2df50:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2df60:
                    r2 = r0 + 8;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2df74;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2df78;
                        return;
                    }
                case 0x2df78:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2df90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2df90:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2dfa0:
                    r2 = r0 + 10;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2dfb4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2dfb8;
                        return;
                    }
                case 0x2dfb8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2dfd0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2dfd0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2dfe0:
                    r2 = r0 + 11;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2dff4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2dff8;
                        return;
                    }
                case 0x2dff8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                case 0x2e000:
                    pc=0x2e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e000() throws ExecutionException { /* 0x2e000 - 0x2e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e000:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e010;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e010:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e020:
                    r2 = r0 + 12;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e034;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e038;
                        return;
                    }
                case 0x2e038:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e050;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e050:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e060:
                    r2 = r0 + 13;
                    pc = 0x2e064;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e068;
                        return;
                    }
                case 0x2e068:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e070:
                    r2 = r0 + 14;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e084;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e088;
                        return;
                    }
                case 0x2e088:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e0a0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e0a0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e0b0:
                    r2 = r0 + 15;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e0c4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e0c8;
                        return;
                    }
                case 0x2e0c8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e0e0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e0e0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e0f0:
                    r2 = r0 + 16;
                    pc = 0x2e0f4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e0f8;
                        return;
                    }
                case 0x2e0f8:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e100:
                    r2 = r0 + 17;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e114;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e118;
                        return;
                    }
                case 0x2e118:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e130;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e130:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e140:
                    r2 = r0 + 18;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e154;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e158;
                        return;
                    }
                case 0x2e158:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e170;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e170:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e180:
                    r2 = r0 + 19;
                    pc = 0x2e184;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e188;
                        return;
                    }
                case 0x2e188:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e190:
                    r2 = r0 + 20;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e1a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e1a8;
                        return;
                    }
                case 0x2e1a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e1c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e1c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e1d0:
                    r2 = r0 + 21;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e1e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e1e8;
                        return;
                    }
                case 0x2e1e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e200;
                        run_2e200(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e200:
                    pc=0x2e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e200() throws ExecutionException { /* 0x2e200 - 0x2e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e200:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e210:
                    r2 = r0 + 22;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e224;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e228;
                        return;
                    }
                case 0x2e228:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e240;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e240:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e250:
                    r2 = r0 + 23;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e264;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e268;
                        return;
                    }
                case 0x2e268:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e280;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e280:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e290:
                    r2 = r0 + 24;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e2a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e2a8;
                        return;
                    }
                case 0x2e2a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e2c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e2c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e2d0:
                    r2 = r0 + 25;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e2e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e2e8;
                        return;
                    }
                case 0x2e2e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e300;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e300:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e310:
                    r2 = r0 + 26;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e324;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e328;
                        return;
                    }
                case 0x2e328:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e340;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e340:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e350:
                    r2 = r0 + 27;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e364;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e368;
                        return;
                    }
                case 0x2e368:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e380;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e380:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e390:
                    r2 = r0 + 28;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e3a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e3a8;
                        return;
                    }
                case 0x2e3a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e3c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e3c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e3d0:
                    r2 = r0 + 29;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e3e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e3e8;
                        return;
                    }
                case 0x2e3e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e400;
                        run_2e400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e400:
                    pc=0x2e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e400() throws ExecutionException { /* 0x2e400 - 0x2e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e400:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e410:
                    r2 = r0 + 30;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e424;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e428;
                        return;
                    }
                case 0x2e428:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e440;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e440:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e450:
                    r2 = r0 + 31;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e464;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e468;
                        return;
                    }
                case 0x2e468:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e480;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e480:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e490:
                    r2 = r0 + 32;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e4a4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e4a8;
                        return;
                    }
                case 0x2e4a8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e4c0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e4c0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e4d0:
                    r2 = r0 + 33;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e4e4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e4e8;
                        return;
                    }
                case 0x2e4e8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e500;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e500:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e510:
                    r2 = r0 + 34;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e524;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e528;
                        return;
                    }
                case 0x2e528:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e540;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e540:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e550:
                    r2 = r0 + 35;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e564;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e568;
                        return;
                    }
                case 0x2e568:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e580;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e580:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e590:
                    r2 = r0 + 36;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2e5b0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e5b4;
                        return;
                    }
                case 0x2e5b4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e5cc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e5cc:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e5dc:
                    r2 = r0 + 37;
                    pc = 0x2e5e0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e5e4;
                        return;
                    }
                case 0x2e5e4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e5ec:
                    r2 = r0 + 38;
                    pc = 0x2e5f0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e5f4;
                        return;
                    }
                case 0x2e5f4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e5fc:
                    r2 = r0 + 39;
                case 0x2e600:
                    pc=0x2e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e600() throws ExecutionException { /* 0x2e600 - 0x2e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e600:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e610;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e614;
                        return;
                    }
                case 0x2e614:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e62c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e62c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e63c:
                    r2 = r0 + 40;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e650;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e654;
                        return;
                    }
                case 0x2e654:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e66c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e66c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e67c:
                    r2 = r0 + 41;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e690;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e694;
                        return;
                    }
                case 0x2e694:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e6ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e6bc:
                    r2 = r0 + 42;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e6d0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e6d4;
                        return;
                    }
                case 0x2e6d4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e6ec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e6ec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e6fc:
                    r2 = r0 + 43;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e710;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e714;
                        return;
                    }
                case 0x2e714:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e72c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e72c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e73c:
                    r2 = r0 + 44;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e750;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e754;
                        return;
                    }
                case 0x2e754:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e76c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e76c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e77c:
                    r2 = r0 + 45;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e790;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e794;
                        return;
                    }
                case 0x2e794:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7ac;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e7ac:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e7bc:
                    r2 = r0 + 46;
                    pc = 0x2e7c0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e7c4;
                        return;
                    }
                case 0x2e7c4:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e7cc:
                    r2 = r0 + 47;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e7e0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e7e4;
                        return;
                    }
                case 0x2e7e4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e7fc;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e7fc:
                    r4 = r10 + r0;
                case 0x2e800:
                    pc=0x2e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2e800() throws ExecutionException { /* 0x2e800 - 0x2ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2e800:
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e80c:
                    r2 = r0 + 51;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e820;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e824;
                        return;
                    }
                case 0x2e824:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e83c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e83c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e84c:
                    r2 = r0 + 52;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e860;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e864;
                        return;
                    }
                case 0x2e864:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e87c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e87c:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e88c:
                    r2 = r0 + 53;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2e8ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e8b0;
                        return;
                    }
                case 0x2e8b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e8c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e8c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e8d8:
                    r2 = r0 + 55;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e8ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e8f0;
                        return;
                    }
                case 0x2e8f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e908;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e908:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e918:
                    r2 = r0 + 54;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e92c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e930;
                        return;
                    }
                case 0x2e930:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e948;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e948:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e958:
                    r2 = r0 + 56;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e96c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e970;
                        return;
                    }
                case 0x2e970:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e988;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e988:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e998:
                    r2 = r0 + 57;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e9ac;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e9b0;
                        return;
                    }
                case 0x2e9b0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2e9c8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2e9c8:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2e9d8:
                    r2 = r0 + 58;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2e9ec;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2e9f0;
                        return;
                    }
                case 0x2e9f0:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea08;
                        run_2ea00(); return;
                    }
                case 0x2ea00:
                    pc=0x2ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ea00() throws ExecutionException { /* 0x2ea00 - 0x2ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ea00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ea08:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ea18:
                    r2 = r0 + 59;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ea2c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ea30;
                        return;
                    }
                case 0x2ea30:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ea48:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ea58:
                    r2 = r0 + 60;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2ea78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ea7c;
                        return;
                    }
                case 0x2ea7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ea94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ea94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eaa4:
                    r2 = r0 + 61;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2eac4;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2eac8;
                        return;
                    }
                case 0x2eac8:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eae0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eae0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eaf0:
                    r2 = r0 + 62;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2eb04;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2eb08;
                        return;
                    }
                case 0x2eb08:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb20;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eb20:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eb30:
                    r2 = r0 + 63;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2eb44;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2eb48;
                        return;
                    }
                case 0x2eb48:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eb60;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eb60:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eb70:
                    r2 = r0 + 64;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2eb84;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2eb88;
                        return;
                    }
                case 0x2eb88:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eba0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eba0:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ebb0:
                    r2 = r0 + 65;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2ebd0;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ebd4;
                        return;
                    }
                case 0x2ebd4:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ebec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ebec:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ebfc:
                    r2 = r0 + 66;
                case 0x2ec00:
                    pc=0x2ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ec00() throws ExecutionException { /* 0x2ec00 - 0x2ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ec00:
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2ec1c;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ec20;
                        return;
                    }
                case 0x2ec20:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec38;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ec38:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ec48:
                    r2 = r0 + 67;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    r7 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r8 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r9 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    pc = 0x2ec68;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ec6c;
                        return;
                    }
                case 0x2ec6c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ec84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ec84:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ec94:
                    r2 = r0 + 73;
                    pc = 0x2ec98;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ec9c;
                        return;
                    }
                case 0x2ec9c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eca4:
                    r2 = r0 + 68;
                    pc = 0x2eca8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ecac;
                        return;
                    }
                case 0x2ecac:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ecb4:
                    r2 = r0 + 70;
                    pc = 0x2ecb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ecbc;
                        return;
                    }
                case 0x2ecbc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ecc4:
                    r2 = r0 + 69;
                    pc = 0x2ecc8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2eccc;
                        return;
                    }
                case 0x2eccc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ecd4:
                    r2 = r0 + 71;
                    pc = 0x2ecd8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ecdc;
                        return;
                    }
                case 0x2ecdc:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ece4:
                    r2 = r0 + 82;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ecf8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ecfc;
                        return;
                    }
                case 0x2ecfc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ed14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ed14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ed24:
                    r2 = r0 + 83;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ed38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ed3c;
                        return;
                    }
                case 0x2ed3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ed54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ed54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ed64:
                    r2 = r0 + 84;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ed78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ed7c;
                        return;
                    }
                case 0x2ed7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ed94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ed94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eda4:
                    r2 = r0 + 85;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2edb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2edbc;
                        return;
                    }
                case 0x2edbc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2edd4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2edd4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ede4:
                    r2 = r0 + 80;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2edf8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2edfc;
                        return;
                    }
                case 0x2edfc:
                    r11 = r2 + 255;
                case 0x2ee00:
                    pc=0x2ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2ee00() throws ExecutionException { /* 0x2ee00 - 0x2f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2ee00:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ee14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ee24:
                    r2 = r0 + 86;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ee38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ee3c;
                        return;
                    }
                case 0x2ee3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ee54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ee64:
                    r2 = r0 + 81;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ee78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ee7c;
                        return;
                    }
                case 0x2ee7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ee94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ee94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eea4:
                    r2 = r0 + 87;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2eeb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2eebc;
                        return;
                    }
                case 0x2eebc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2eed4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2eed4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2eee4:
                    r2 = r0 + 88;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2eef8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2eefc;
                        return;
                    }
                case 0x2eefc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef14;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ef14:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ef24:
                    r2 = r0 + 78;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ef38;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ef3c;
                        return;
                    }
                case 0x2ef3c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef54;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ef54:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2ef64:
                    r2 = r0 + 76;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2ef78;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2ef7c;
                        return;
                    }
                case 0x2ef7c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2ef94;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2ef94:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2efa4:
                    r2 = r0 + 77;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2efb8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2efbc;
                        return;
                    }
                case 0x2efbc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2efd4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2efd4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2efe4:
                    r2 = r0 + 74;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2eff8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2effc;
                        return;
                    }
                case 0x2effc:
                    r11 = r2 + 255;
                case 0x2f000:
                    pc=0x2f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f000() throws ExecutionException { /* 0x2f000 - 0x2f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f000:
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f014;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f014:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2f024:
                    r2 = r0 + 75;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f038;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f03c;
                        return;
                    }
                case 0x2f03c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f054;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f054:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2f064:
                    r2 = r0 + 79;
                    pc = 0x2f068;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f06c;
                        return;
                    }
                case 0x2f06c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f074:
                    r2 = r0 + 72;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f088;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f08c;
                        return;
                    }
                case 0x2f08c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f0a4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f0a4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2f0b4:
                    r2 = r0 + 90;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f0c8;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f0cc;
                        return;
                    }
                case 0x2f0cc:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f0e4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f0e4:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2f0f4:
                    r2 = r0 + 89;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f108;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f10c;
                        return;
                    }
                case 0x2f10c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f124;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f124:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2f134:
                    r2 = r0 + 91;
                    r10 = r4 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r7 + r0;
                    pc = 0x2f148;
                    r2 = syscall(r2,r4,r5,r6,r7,r8,r9);
                    if (state != RUNNING) {
                        pc = 0x2f14c;
                        return;
                    }
                case 0x2f14c:
                    r11 = r2 + 255;
                    r11 = (r11&0xffffffffL) < (255&0xffffffffL) ? 1 : 0;
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f164;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x2f164:
                    r4 = r10 + r0;
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x30800;
                    run_30800(); return;
                case 0x2f200:
                    pc=0x2f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f200() throws ExecutionException { /* 0x2f200 - 0x2f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f200:
                    r29 = r29 + -96;
                    r5 = r0 + r0;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r16;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r17;
                    r31=0x2f218;
                    pc=0x46000;
                    run_46000(); return;
                case 0x2f218:
                    r16 = r2 + r0;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x2f268;
                        continue;
                    }
                    r2 = r0 + r0;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r29 + 16;
                    r31=0x2f230;
                    pc=0x45e00;
                    run_45e00(); return;
                case 0x2f230:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f24c;
                        continue;
                    }
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 + 16384;
                    r2 = r2 & 61440;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x2f27c;
                        continue;
                    }
                case 0x2f24c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2f254;
                    pc=0x29400;
                    run_29400(); return;
                case 0x2f254:
                    /* Next insn is delay slot */ 
                    r31=0x2f25c;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2f25c:
                    r3 = r0 + 20;
                case 0x2f260:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                case 0x2f264:
                    r2 = r0 + r0;
                case 0x2f268:
                    r31 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r17 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r16 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 96;
                    pc=r31;
                    return;
                case 0x2f27c:
                    /* Next insn is delay slot */ 
                    r4 = r0 + 20;
                    r31=0x2f284;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x2f284:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x2f2d0;
                        continue;
                    }
                    r17 = r2 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r4 = r0 + 4096;
                    r31=0x2f298;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x2f298:
                    r3 = r0 + 4096;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                        pc=0x2f2b8;
                        continue;
                    }
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r3;
                    writePages[(r17+8)>>>12][((r17+8)>>>2)&0x3ff] = r0;
                    writePages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r2 = r17 + r0;
                    pc=0x2f268;
                    continue;
                case 0x2f2b8:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2f2c0;
                    pc=0x29400;
                    run_29400(); return;
                case 0x2f2c0:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x2f2c8;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x2f2c8:
                    /* Next insn is delay slot */ 
                    pc=0x2f264;
                    continue;
                case 0x2f2d0:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2f2d8;
                    pc=0x29400;
                    run_29400(); return;
                case 0x2f2d8:
                    /* Next insn is delay slot */ 
                    r31=0x2f2e0;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2f2e0:
                    /* Next insn is delay slot */ 
                    r3 = r0 + 12;
                    pc=0x2f260;
                    continue;
                case 0x2f400:
                    pc=0x2f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f400() throws ExecutionException { /* 0x2f400 - 0x2f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f400:
                    r29 = r29 + -1072;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r17 = r29 + 16;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r2 = r0 + 1024;
                    r5 = r19 + r0;
                    r6 = r17 + r0;
                    r7 = r29 + 1040;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r31;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r16 = r0 + r0;
                    r31=0x2f440;
                    pc=0x2e9d8;
                    run_2e800(); return;
                case 0x2f440:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f510;
                        continue;
                    }
                    r2 = 5 << 16;
                    r18 = r2 + -17560;
                    r6 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x2f460;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x2f460:
                    r6 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r5 = r0 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = 5 << 16;
                        pc=0x2f494;
                        continue;
                    }
                    r17 = 5 << 16;
                    r4 = r18 + r0;
                    r3 = r17 + -18588;
                case 0x2f478:
                    r5 = r5 + 4;
                    r2 = ((r5 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r4;
                    r16 = r16 + 1;
                    r3 = r3 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 4;
                        pc=0x2f478;
                        continue;
                    }
                    r4 = r4 + 4;
                case 0x2f494:
                    r17 = r17 + -18588;
                    r2 = r16 << 2;
                    r16 = 5 << 16;
                    r2 = r2 + r17;
                    r16 = r16 + -18716;
                    r4 = r16 + r0;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 128;
                    r31=0x2f4bc;
                    pc=0x44e00;
                    run_44e00(); return;
                case 0x2f4bc:
                    r3 = 5 << 16;
                    r4 = r3 + -18736;
                    r2 = 5 << 16;
                    r2 = r2 + -19172;
                    writePages[(r3+-18736)>>>12][((r3+-18736)>>>2)&0x3ff] = r16;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    r3 = r0 + 2;
                    r2 = r0 + 4;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r2;
                    r1 = 5 << 16;
                    writePages[(r1+-19172)>>>12][((r1+-19172)>>>2)&0x3ff] = r0;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r3;
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r17;
                    r2 = r4 + r0;
                case 0x2f4f4:
                    r31 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1072;
                    pc=r31;
                    return;
                case 0x2f510:
                    r1 = 5 << 16;
                    writePages[(r1+-19156)>>>12][((r1+-19156)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x2f4f4;
                    continue;
                case 0x2f600:
                    pc=0x2f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f600() throws ExecutionException { /* 0x2f600 - 0x2f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f600:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r4 + r0;
                        pc=0x2f62c;
                        continue;
                    }
                    r17 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f654;
                        continue;
                    }
                case 0x2f62c:
                    r3 = 5 << 16;
                    r2 = r0 + 11776;
                    addr=r3+-16536;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 + -16536;
                case 0x2f63c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2f654:
                    /* Next insn is delay slot */ 
                    r31=0x2f65c;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x2f65c:
                    r2 = r17 + r2;
                    r6 = r2 + -1;
                    r4 = ((r17 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f6c0;
                        continue;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f780;
                        continue;
                    }
                case 0x2f680:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f6c0;
                        continue;
                    }
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f6c0;
                        continue;
                    }
                    r4 = r0 + 47;
                    r3 = r6 + r0;
                case 0x2f6a0:
                    r6 = r6 + -1;
                    r2 = ((r17 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -1;
                        pc=0x2f6c0;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2f6a0;
                        continue;
                    }
                case 0x2f6c0:
                    if(r6 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x2f744;
                        continue;
                    }
                    r4 = r0 + 47;
                    r3 = r6 + r0;
                case 0x2f6d0:
                    r6 = r6 + -1;
                    r2 = ((r17 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -1;
                        pc=0x2f6f0;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2f6d0;
                        continue;
                    }
                case 0x2f6f0:
                    r18 = r6 - r17;
                    r2 = r18 + 2;
                    r2 = (r2&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f72c;
                        continue;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + -16536;
                    r6 = r18 + 1;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x2f71c;
                    pc=0x44e00;
                    run_44e00(); return;
                case 0x2f71c:
                    r3 = r18 + r16;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2f724:
                    /* Next insn is delay slot */ 
                    r2 = r16 + r0;
                    pc=0x2f63c;
                    continue;
                case 0x2f72c:
                    /* Next insn is delay slot */ 
                    r31=0x2f734;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2f734:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x2f63c;
                    continue;
                case 0x2f744:
                    r2 = 5 << 16;
                    addr=r17+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r16 = r2 + -16536;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f774;
                        continue;
                    }
                    r2 = 5 << 16;
                    r5 = r2 + -19432;
                case 0x2f764:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2f76c;
                    pc=0x44a00;
                    run_44a00(); return;
                case 0x2f76c:
                    /* Next insn is delay slot */ 
                    pc=0x2f724;
                    continue;
                case 0x2f774:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r5 = r2 + -19428;
                    pc=0x2f764;
                    continue;
                case 0x2f780:
                    r5 = r0 + 47;
                    r3 = r6 + r0;
                case 0x2f788:
                    r6 = r6 + -1;
                    r4 = ((r17 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -1;
                        pc=0x2f6c0;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2f788;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2f680;
                    continue;
                case 0x2f800:
                    pc=0x2f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2f800() throws ExecutionException { /* 0x2f800 - 0x2fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2f800:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r4 + r0;
                        pc=0x2f828;
                        continue;
                    }
                    r16 = r4 + r0;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f84c;
                        continue;
                    }
                case 0x2f828:
                    r3 = 5 << 16;
                    r2 = r0 + 11776;
                case 0x2f830:
                    addr=r3+-15512;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r3 + -15512;
                case 0x2f838:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x2f84c:
                    /* Next insn is delay slot */ 
                    r31=0x2f854;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x2f854:
                    r2 = r16 + r2;
                    r6 = r2 + -1;
                    r4 = ((r16 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f878;
                        continue;
                    }
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f92c;
                        continue;
                    }
                case 0x2f878:
                    if(r6 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x2f910;
                        continue;
                    }
                case 0x2f880:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r6 + r0;
                        pc=0x2f8c0;
                        continue;
                    }
                    r5 = r6 + r0;
                    addr=r6+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8c0;
                        continue;
                    }
                    r4 = r0 + 47;
                    r3 = r6 + -1;
                case 0x2f8a0:
                    r5 = r5 + -1;
                    r2 = ((r16 & 0xffffffffL) < (r5 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -1;
                        pc=0x2f8c0;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8a0;
                        continue;
                    }
                case 0x2f8c0:
                    r17 = r6 - r5;
                    r2 = r17 + 2;
                    r2 = (r2&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2f8f8;
                        continue;
                    }
                    r16 = 5 << 16;
                    r16 = r16 + -15512;
                    r6 = r17 + 1;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x2f8e8;
                    pc=0x44e00;
                    run_44e00(); return;
                case 0x2f8e8:
                    r3 = r17 + r16;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r2 = r16 + r0;
                    pc=0x2f838;
                    continue;
                case 0x2f8f8:
                    /* Next insn is delay slot */ 
                    r31=0x2f900;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2f900:
                    r3 = r0 + 91;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x2f838;
                    continue;
                case 0x2f910:
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 47;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2f880;
                        continue;
                    }
                    r3 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r0 + 12032;
                    pc=0x2f830;
                    continue;
                case 0x2f92c:
                    r5 = r0 + 47;
                    r3 = r6 + r0;
                case 0x2f934:
                    r6 = r6 + -1;
                    r4 = ((r16 & 0xffffffffL) < (r6 & 0xffffffffL)) ? 1 : 0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -1;
                        pc=0x2f878;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r5) {
                        /* Next insn is delay slot */ 
                        pc=0x2f934;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x2f878;
                    continue;
                case 0x2fa00:
                    pc=0x2fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fa00() throws ExecutionException { /* 0x2fa00 - 0x2fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fa00:
                    r29 = r29 + -80;
                    r2 = r0 + 1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r18;
                    r18 = r4 + r0;
                    r4 = r0 + 32;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r22;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r21;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r20;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r17;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r16;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    r31=0x2fa40;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fa40:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r22 = r0 + r0;
                    r21 = r29 + 32;
                    r20 = r29 + 40;
                    r16 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe54;
                        run_2fe00(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r21 + r0;
                    r6 = r0 + 2;
                    r7 = r18 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r31=0x2fa84;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x2fa84:
                    r3 = r2 + r0;
                case 0x2fa88:
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe24;
                        run_2fe00(); return;
                    }
                case 0x2fa94:
                    r3 = r0 + 10;
                    r2 = r0 + 1;
                    r4 = r0 + 32;
                    addr=r18+31;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    r31=0x2fab4;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fab4:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r7 = r18 + 32;
                    r16 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe00;
                        run_2fe00(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r21 + r0;
                    r6 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r31=0x2faec;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x2faec:
                    r3 = r2 + r0;
                case 0x2faf0:
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fdd0;
                        run_2fc00(); return;
                    }
                case 0x2fafc:
                    r3 = r0 + 2;
                    r2 = r0 + 1;
                    r4 = r0 + 32;
                    addr=r18+63;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    r31=0x2fb1c;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fb1c:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r7 = r18 + 64;
                    r16 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fdac;
                        run_2fc00(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r21 + r0;
                    r6 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r31=0x2fb54;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x2fb54:
                    r3 = r2 + r0;
                case 0x2fb58:
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd7c;
                        run_2fc00(); return;
                    }
                case 0x2fb64:
                    r3 = r0 + 4;
                    r2 = r0 + 1;
                    r4 = r0 + 32;
                    addr=r18+95;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    r31=0x2fb84;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fb84:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r19 = r18 + 96;
                    r16 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd58;
                        run_2fc00(); return;
                    }
                    r4 = r16 + r0;
                    r5 = r21 + r0;
                    r6 = r0 + 2;
                    r7 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r31=0x2fbc0;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x2fbc0:
                    r3 = r2 + r0;
                case 0x2fbc4:
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd28;
                        run_2fc00(); return;
                    }
                case 0x2fbd0:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    addr=r18+127;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r4 = r2 + -1;
                    r2 = r0 + -1;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                        pc=0x2fc38;
                        run_2fc00(); return;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    r6 = r0 + 32;
                    r5 = r0 + -1;
                    r3 = r4 + r0;
                    r7 = r19 + r0;
                case 0x2fbf8:
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r3 + r0;
                case 0x2fc00:
                    pc=0x2fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fc00() throws ExecutionException { /* 0x2fc00 - 0x2fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fc00:
                    r2 = r2 + -9;
                    r2 = r2 & 255;
                    r2 = (r2&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fc24;
                        continue;
                    }
                    r2 = (r3&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd20;
                        continue;
                    }
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r6&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x2fc24:
                    r4 = r4 + -1;
                    r7 = r7 + 1;
                    if(r4 != r5) {
                        /* Next insn is delay slot */ 
                        r3 = r4 + r0;
                        pc=0x2fbf8;
                        run_2fa00(); return;
                    }
                    r3 = r4 + r0;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                case 0x2fc38:
                    r2 = r0 + 6;
                    r3 = r0 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r2 = r0 + 32;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r2;
                    r31=0x2fc54;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fc54:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r7 = r18 + 128;
                    r16 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fcfc;
                        continue;
                    }
                    r4 = r16 + r0;
                    r5 = r21 + r0;
                    r6 = r0 + 2;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r20;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r0;
                    r31=0x2fc8c;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x2fc8c:
                    r3 = r2 + r0;
                case 0x2fc90:
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fccc;
                        continue;
                    }
                case 0x2fc9c:
                    r2 = r22 + r0;
                    addr=r18+159;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r22 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r21 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r20 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r19 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r18 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r17 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r16 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 80;
                    pc=r31;
                    return;
                case 0x2fccc:
                    /* Next insn is delay slot */ 
                    r31=0x2fcd4;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fcd4:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fcec;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r0 + -1;
                    pc=0x2fc9c;
                    continue;
                case 0x2fcec:
                    /* Next insn is delay slot */ 
                    r31=0x2fcf4;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fcf4:
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    pc=0x2fc9c;
                    continue;
                case 0x2fcfc:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23532;
                    r31=0x2fd10;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x2fd10:
                    r3 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r3 = r0 + -1;
                    pc=0x2fc90;
                    continue;
                case 0x2fd20:
                    /* Next insn is delay slot */ 
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x2fc24;
                    continue;
                case 0x2fd28:
                    /* Next insn is delay slot */ 
                    r31=0x2fd30;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fd30:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd48;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r0 + -1;
                    pc=0x2fbd0;
                    run_2fa00(); return;
                case 0x2fd48:
                    /* Next insn is delay slot */ 
                    r31=0x2fd50;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fd50:
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    pc=0x2fbd0;
                    run_2fa00(); return;
                case 0x2fd58:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23532;
                    r31=0x2fd6c;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x2fd6c:
                    r3 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r3 = r0 + -1;
                    pc=0x2fbc4;
                    run_2fa00(); return;
                case 0x2fd7c:
                    /* Next insn is delay slot */ 
                    r31=0x2fd84;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fd84:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fd9c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r0 + -1;
                    pc=0x2fb64;
                    run_2fa00(); return;
                case 0x2fd9c:
                    /* Next insn is delay slot */ 
                    r31=0x2fda4;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fda4:
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    pc=0x2fb64;
                    run_2fa00(); return;
                case 0x2fdac:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23532;
                    r31=0x2fdc0;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x2fdc0:
                    r3 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r3 = r0 + -1;
                    pc=0x2fb58;
                    run_2fa00(); return;
                case 0x2fdd0:
                    /* Next insn is delay slot */ 
                    r31=0x2fdd8;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fdd8:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fdf0;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r0 + -1;
                    pc=0x2fafc;
                    run_2fa00(); return;
                case 0x2fdf0:
                    /* Next insn is delay slot */ 
                    r31=0x2fdf8;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fdf8:
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    pc=0x2fafc;
                    run_2fa00(); return;
                case 0x2fe00:
                    pc=0x2fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_2fe00() throws ExecutionException { /* 0x2fe00 - 0x30000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x2fe00:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23532;
                    r31=0x2fe14;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x2fe14:
                    r3 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r3 = r0 + -1;
                    pc=0x2faf0;
                    run_2fa00(); return;
                case 0x2fe24:
                    /* Next insn is delay slot */ 
                    r31=0x2fe2c;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fe2c:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + 12;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x2fe44;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r0 + -1;
                    pc=0x2fa94;
                    run_2fa00(); return;
                case 0x2fe44:
                    /* Next insn is delay slot */ 
                    r31=0x2fe4c;
                    pc=0x20000;
                    run_20000(); return;
                case 0x2fe4c:
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r17;
                    pc=0x2fa94;
                    run_2fa00(); return;
                case 0x2fe54:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23532;
                    r31=0x2fe68;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x2fe68:
                    r3 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r3 = r0 + -1;
                    pc=0x2fa88;
                    run_2fa00(); return;
                case 0x30000:
                    pc=0x30000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30000() throws ExecutionException { /* 0x30000 - 0x30200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30000:
                    r29 = r29 + -80;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r30;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r23;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r22;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r21;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r18;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r31;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r19;
                    r30 = r5 + r0;
                    r16 = r4 + r0;
                    r18 = r0 + r0;
                    r23 = r0 + r0;
                    r21 = r0 + 34;
                    r22 = r0 + 46;
                    r20 = r0 + 3;
                    r17 = r29 + 16;
                case 0x3004c:
                    /* Next insn is delay slot */ 
                    r31=0x30054;
                    pc=0x20000;
                    run_20000(); return;
                case 0x30054:
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r16 + r0;
                    r5 = r29 + 32;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x30068;
                    pc=0x45600;
                    run_45600(); return;
                case 0x30068:
                    /* Next insn is delay slot */ 
                    r19 = r2 + r0;
                    r31=0x30070;
                    pc=0x20000;
                    run_20000(); return;
                case 0x30070:
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r2 = r0 + r0;
                    if(r3 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x30104;
                        continue;
                    }
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r4 == r16) {
                        /* Next insn is delay slot */ 
                        pc=0x30104;
                        continue;
                    }
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r19;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x300c4;
                        continue;
                    }
                    if(r3 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x30218;
                        run_30200(); return;
                    }
                    if(r18 == r20) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x30104;
                        continue;
                    }
                    r2 = r0 + r0;
                    r18 = r18 + 1;
                    r17 = r17 + 4;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r4 + 1;
                        pc=0x3004c;
                        continue;
                    }
                    r16 = r4 + 1;
                case 0x300c4:
                    r2 = r0 + 1;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x301e8;
                        continue;
                    }
                    r2 = r18 < 2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x300f4;
                        continue;
                    }
                    r2 = r0 + 2;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x301a0;
                        continue;
                    }
                    r2 = r0 + 3;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30134;
                        continue;
                    }
                case 0x300f4:
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30100;
                        continue;
                    }
                    writePages[(r30+0)>>>12][((r30+0)>>>2)&0x3ff] = r19;
                case 0x30100:
                    r2 = r0 + 1;
                case 0x30104:
                    r31 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r30 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r23 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r22 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r21 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r20 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r19 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r18 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r17 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 80;
                    pc=r31;
                    return;
                case 0x30134:
                    r2 = (r19&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        continue;
                    }
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = (r5&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        continue;
                    }
                    r4 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30184;
                        continue;
                    }
                case 0x3017c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x30104;
                    continue;
                case 0x30184:
                    r2 = r5 << 24;
                    r3 = r3 << 16;
                    r2 = r2 | r3;
                    r4 = r4 << 8;
                    r2 = r2 | r4;
                case 0x30198:
                    /* Next insn is delay slot */ 
                    r19 = r19 | r2;
                    pc=0x300f4;
                    continue;
                case 0x301a0:
                    r2 = r0 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        continue;
                    }
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = (r4&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        continue;
                    }
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        continue;
                    }
                    r2 = r4 << 24;
                    r3 = r3 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 | r3;
                    pc=0x30198;
                    continue;
                case 0x301e8:
                    r2 = 255 << 16;
                    r2 = r2 | 65535;
                    r2 = ((r2 & 0xffffffffL) < (r19 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x30200:
                    pc=0x30200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30200() throws ExecutionException { /* 0x30200 - 0x30400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30200:
                    r2 = (r3&0xffffffffL) < (256&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3017c;
                        run_30000(); return;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r3 << 24;
                    pc=0x30198;
                    run_30000(); return;
                case 0x30218:
                    r3 = 5 << 16;
                    r2 = r2 & 255;
                    r3 = r3 + -23196;
                    r2 = r2 + r3;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r2 = r0 + r0;
                    r4 = r4 & 8;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30104;
                        run_30000(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x300c4;
                    run_30000(); return;
                case 0x30400:
                    pc=0x30400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30400() throws ExecutionException { /* 0x30400 - 0x30600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30400:
                    r29 = r29 + -1096;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r23;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r22;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r18;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r31;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r30;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r21;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r20;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r19;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r17;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r16;
                    r2 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r5 = r5 & 65535;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r2;
                    r2 = r2 < 2 ? 1 : 0;
                    r23 = r4 + r0;
                    r22 = r6 + r0;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r7;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r0;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + 1;
                        pc=0x30460;
                        continue;
                    }
                    r18 = r0 + 1;
                    addr=r6+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r18 = r0 + 2;
                case 0x30460:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19148)>>>12][((r4+-19148)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30678;
                        run_30600(); return;
                    }
                case 0x30474:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + -23496;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -19424;
                    r31=0x30488;
                    pc=0x21800;
                    run_21800(); return;
                case 0x30488:
                    r1 = 5 << 16;
                    writePages[(r1+-19148)>>>12][((r1+-19148)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r20 = r2 + -13264;
                    r30 = 5 << 16;
                    r21 = r18 << 1;
                case 0x304a0:
                    r6 = 5 << 16;
                    r6 = readPages[(r6+-19148)>>>12][((r6+-19148)>>>2)&0x3ff];
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30600;
                        run_30600(); return;
                    }
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1024;
                    r31=0x304c0;
                    pc=0x20800;
                    run_20800(); return;
                case 0x304c0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30600;
                        run_30600(); return;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 35;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x30668;
                        run_30600(); return;
                    }
                    r2 = 5 << 16;
                    r3 = 5 << 16;
                    r19 = r2 + -8128;
                    r17 = r3 + -7104;
                    r2 = 5 << 16;
                    r16 = r2 + -13256;
                    r4 = r29 + 24;
                    r5 = r30 + -23484;
                    r6 = r19 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x30508;
                    pc=0x44600;
                    run_44600(); return;
                case 0x30508:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30600;
                        run_30600(); return;
                    }
                    r2 = 5 << 16;
                    r2 = r2 + -19144;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r17;
                    writePages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff] = r19;
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r2;
                    r1 = 5 << 16;
                    writePages[(r1+-19144)>>>12][((r1+-19144)>>>2)&0x3ff] = r0;
                    r17 = r20 + r0;
                case 0x30534:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30600;
                        run_30600(); return;
                    }
                    if(r18 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x3056c;
                        continue;
                    }
                    r4 = r0 + r0;
                    addr=r17+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r5 = tmp;
                    r3 = r22 + r0;
                case 0x3054c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x304a0;
                        continue;
                    }
                    r4 = r4 + 1;
                    r2 = r4 < r18 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 2;
                        pc=0x3054c;
                        continue;
                    }
                    r3 = r3 + 2;
                case 0x3056c:
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x304a0;
                        continue;
                    }
                    r5 = r0 + r0;
                    r16 = r0 + r0;
                    r19 = r21 + r22;
                case 0x30590:
                    r2 = r5 + r4;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    r31=0x305a0;
                    pc=0x27200;
                    run_27200(); return;
                case 0x305a0:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x305cc;
                        continue;
                    }
                    r4 = readPages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff];
                    r16 = r16 + 4;
                    r2 = r16 + r4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r5 = r16 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30590;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x304a0;
                    continue;
                case 0x305cc:
                    r3 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r2 = r18 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x305f4;
                        continue;
                    }
                    addr=r17+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r18 = r18 + 1;
                    r21 = r21 + 2;
                    /* Next insn is delay slot */ 
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x304a0;
                    continue;
                case 0x305f4:
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r2;
                    pc=0x304a0;
                    continue;
                case 0x30600:
                    pc=0x30600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30600() throws ExecutionException { /* 0x30600 - 0x30800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30600:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19148)>>>12][((r4+-19148)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x30658;
                        continue;
                    }
                case 0x30614:
                    r2 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r31 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    r30 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r2 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r23 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r22 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r21 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r20 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r19 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r18 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r17 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r16 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19148)>>>12][((r1+-19148)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1096;
                    pc=r31;
                    return;
                case 0x30658:
                    /* Next insn is delay slot */ 
                    r31=0x30660;
                    pc=0x20400;
                    run_20400(); return;
                case 0x30660:
                    /* Next insn is delay slot */ 
                    pc=0x30614;
                    continue;
                case 0x30668:
                    /* Next insn is delay slot */ 
                    r31=0x30670;
                    pc=0x3a200;
                    run_3a200(); return;
                case 0x30670:
                    /* Next insn is delay slot */ 
                    r17 = r2 + r0;
                    pc=0x30534;
                    run_30400(); return;
                case 0x30678:
                    /* Next insn is delay slot */ 
                    r31=0x30680;
                    pc=0x20400;
                    run_20400(); return;
                case 0x30680:
                    /* Next insn is delay slot */ 
                    pc=0x30474;
                    run_30400(); return;
                case 0x30800:
                    pc=0x30800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30800() throws ExecutionException { /* 0x30800 - 0x30a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30800:
                    r5 = r0 - r5;
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r5;
                    pc=r31;
                    return;
                case 0x30a00:
                    pc=0x30a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30a00() throws ExecutionException { /* 0x30a00 - 0x30c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30a20;
                    pc=0x2e140;
                    run_2e000(); return;
                case 0x30a20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30c00:
                    pc=0x30c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30c00() throws ExecutionException { /* 0x30c00 - 0x30e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30c20;
                    pc=0x2ef24;
                    run_2ee00(); return;
                case 0x30c20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x30e00:
                    pc=0x30e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_30e00() throws ExecutionException { /* 0x30e00 - 0x31000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x30e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x30e18;
                    pc=0x2e410;
                    run_2e400(); return;
                case 0x30e18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31000:
                    pc=0x31000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31000() throws ExecutionException { /* 0x31000 - 0x31200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31000:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31018;
                    pc=0x2e450;
                    run_2e400(); return;
                case 0x31018:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31200:
                    pc=0x31200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31200() throws ExecutionException { /* 0x31200 - 0x31400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31218;
                    pc=0x2e210;
                    run_2e200(); return;
                case 0x31218:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31400:
                    pc=0x31400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31400() throws ExecutionException { /* 0x31400 - 0x31600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31420;
                    pc=0x2e1d0;
                    run_2e000(); return;
                case 0x31420:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31600:
                    pc=0x31600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31600() throws ExecutionException { /* 0x31600 - 0x31800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31600:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31618;
                    pc=0x2e250;
                    run_2e200(); return;
                case 0x31618:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31800:
                    pc=0x31800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31800() throws ExecutionException { /* 0x31800 - 0x31a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31800:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31820;
                    pc=0x2e290;
                    run_2e200(); return;
                case 0x31820:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31a00:
                    pc=0x31a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31a00() throws ExecutionException { /* 0x31a00 - 0x31c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31a00:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31a28;
                    pc=0x2e310;
                    run_2e200(); return;
                case 0x31a28:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x31c00:
                    pc=0x31c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31c00() throws ExecutionException { /* 0x31c00 - 0x31e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31c00:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r18 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r5 + r0;
                        pc=0x31c7c;
                        continue;
                    }
                    r17 = r5 + r0;
                    r5 = r16 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x31c3c;
                    pc=0x2e350;
                    run_2e200(); return;
                case 0x31c3c:
                    r16 = r2 + r0;
                    r3 = r2 + r0;
                    r2 = r0 + -1;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x31c74;
                        continue;
                    }
                case 0x31c50:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x31c74:
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x31c50;
                    continue;
                case 0x31c7c:
                    r17 = r0 + 256;
                    r20 = r0 + -1;
                    r19 = r0 + 34;
                case 0x31c88:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x31c90;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x31c90:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x31ca4;
                    pc=0x2e350;
                    run_2e200(); return;
                case 0x31ca4:
                    if(r2 != r20) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x31c50;
                        continue;
                    }
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x31cb4;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x31cb4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r17 = r17 << 1;
                    if(r2 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x31c88;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x31c74;
                    continue;
                case 0x31e00:
                    pc=0x31e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_31e00() throws ExecutionException { /* 0x31e00 - 0x32000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x31e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x31e20;
                    pc=0x2e350;
                    run_2e200(); return;
                case 0x31e20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32000:
                    pc=0x32000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32000() throws ExecutionException { /* 0x32000 - 0x32200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32020;
                    pc=0x2e510;
                    run_2e400(); return;
                case 0x32020:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32200:
                    pc=0x32200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32200() throws ExecutionException { /* 0x32200 - 0x32400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32200:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32228;
                    pc=0x2e490;
                    run_2e400(); return;
                case 0x32228:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32400:
                    pc=0x32400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32400() throws ExecutionException { /* 0x32400 - 0x32600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32400:
                    r3 = r5 & 65535;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 & 65535;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32428;
                    pc=0x2ef64;
                    run_2ee00(); return;
                case 0x32428:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32600:
                    pc=0x32600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32600() throws ExecutionException { /* 0x32600 - 0x32800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32600:
                    r3 = r5 & 65535;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 & 65535;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32628;
                    pc=0x2efa4;
                    run_2ee00(); return;
                case 0x32628:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32800:
                    pc=0x32800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32800() throws ExecutionException { /* 0x32800 - 0x32a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32800:
                    r3 = r5 & 65535;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 & 65535;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32828;
                    pc=0x2e6fc;
                    run_2e600(); return;
                case 0x32828:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32a00:
                    pc=0x32a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32a00() throws ExecutionException { /* 0x32a00 - 0x32c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32a20;
                    pc=0x2efe4;
                    run_2ee00(); return;
                case 0x32a20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32c00:
                    pc=0x32c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32c00() throws ExecutionException { /* 0x32c00 - 0x32e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32c20;
                    pc=0x2f024;
                    run_2f000(); return;
                case 0x32c20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x32e00:
                    pc=0x32e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_32e00() throws ExecutionException { /* 0x32e00 - 0x33000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x32e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x32e20;
                    pc=0x2e4d0;
                    run_2e400(); return;
                case 0x32e20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33000:
                    pc=0x33000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33000() throws ExecutionException { /* 0x33000 - 0x33200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33000:
                    r29 = r29 + -32;
                    r3 = r5 + r0;
                    r8 = r6 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    r7 = r8 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33030;
                    pc=0x2e590;
                    run_2e400(); return;
                case 0x33030:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33200:
                    pc=0x33200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33200() throws ExecutionException { /* 0x33200 - 0x33400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33200:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33218;
                    pc=0x2e5fc;
                    run_2e400(); return;
                case 0x33218:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33400:
                    pc=0x33400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33400() throws ExecutionException { /* 0x33400 - 0x33600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33400:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r6 = r5 + r0;
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23468;
                    r31=0x33424;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x33424:
                    r3 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x33600:
                    pc=0x33600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33600() throws ExecutionException { /* 0x33600 - 0x33800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33600:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33614;
                    pc=0x2e63c;
                    run_2e600(); return;
                case 0x33614:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33800:
                    pc=0x33800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33800() throws ExecutionException { /* 0x33800 - 0x33a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33818;
                    pc=0x2e67c;
                    run_2e600(); return;
                case 0x33818:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33a00:
                    pc=0x33a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33a00() throws ExecutionException { /* 0x33a00 - 0x33c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33a00:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r7 = r6 << 16;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r7 >> 16;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33a2c;
                    pc=0x2e6bc;
                    run_2e600(); return;
                case 0x33a2c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33c00:
                    pc=0x33c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33c00() throws ExecutionException { /* 0x33c00 - 0x33e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33c20;
                    pc=0x2e73c;
                    run_2e600(); return;
                case 0x33c20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x33e00:
                    pc=0x33e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_33e00() throws ExecutionException { /* 0x33e00 - 0x34000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x33e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x33e18;
                    pc=0x2e77c;
                    run_2e600(); return;
                case 0x33e18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34000:
                    pc=0x34000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34000() throws ExecutionException { /* 0x34000 - 0x34200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34020;
                    pc=0x2e7cc;
                    run_2e600(); return;
                case 0x34020:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34200:
                    pc=0x34200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34200() throws ExecutionException { /* 0x34200 - 0x34400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34200:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34228;
                    pc=0x2e80c;
                    run_2e800(); return;
                case 0x34228:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34400:
                    pc=0x34400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34400() throws ExecutionException { /* 0x34400 - 0x34600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34400:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34420;
                    pc=0x2e84c;
                    run_2e800(); return;
                case 0x34420:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34600:
                    pc=0x34600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34600() throws ExecutionException { /* 0x34600 - 0x34800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34600:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r9 = r5 + r0;
                    r10 = r6 + r0;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r9 + r0;
                    r7 = r10 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r31=0x3463c;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x3463c:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34800:
                    pc=0x34800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34800() throws ExecutionException { /* 0x34800 - 0x34a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34800:
                    r8 = r4 + r0;
                    r3 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r29 = r29 + -40;
                    r2 = r0 + 8;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r10 = r5 + r0;
                    r9 = r6 + r0;
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r16 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x34864;
                        continue;
                    }
                    r2 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    r5 = r8 + r0;
                    r4 = r16 + r0;
                    r6 = r10 + r0;
                    r7 = r9 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x34854;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x34854:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x34864:
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x34878;
                        continue;
                    }
                    r2 = r0 + 1;
                case 0x3486c:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x34870:
                    /* Next insn is delay slot */ 
                    r2 = r0 + -1;
                    pc=0x34854;
                    continue;
                case 0x34878:
                    r2 = r0 + 2;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3488c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r2 = r0 + 22;
                    pc=0x3486c;
                    continue;
                case 0x3488c:
                    r4 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r6 = readPages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23532;
                    r31=0x348a0;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x348a0:
                    r3 = r0 + 22;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x34870;
                    continue;
                case 0x34a00:
                    pc=0x34a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34a00() throws ExecutionException { /* 0x34a00 - 0x34c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34a20;
                    pc=0x2e8d8;
                    run_2e800(); return;
                case 0x34a20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34c00:
                    pc=0x34c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34c00() throws ExecutionException { /* 0x34c00 - 0x34e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34c00:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34c28;
                    pc=0x2e918;
                    run_2e800(); return;
                case 0x34c28:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x34e00:
                    pc=0x34e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_34e00() throws ExecutionException { /* 0x34e00 - 0x35000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x34e00:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x34e28;
                    pc=0x2e998;
                    run_2e800(); return;
                case 0x34e28:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35000:
                    pc=0x35000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35000() throws ExecutionException { /* 0x35000 - 0x35200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35000:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35028;
                    pc=0x2e958;
                    run_2e800(); return;
                case 0x35028:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35200:
                    pc=0x35200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35200() throws ExecutionException { /* 0x35200 - 0x35400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35200:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35228;
                    pc=0x2e9d8;
                    run_2e800(); return;
                case 0x35228:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35400:
                    pc=0x35400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35400() throws ExecutionException { /* 0x35400 - 0x35600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35400:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35428;
                    pc=0x2f0f4;
                    run_2f000(); return;
                case 0x35428:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35600:
                    pc=0x35600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35600() throws ExecutionException { /* 0x35600 - 0x35800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35600:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35628;
                    pc=0x2ea18;
                    run_2ea00(); return;
                case 0x35628:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35800:
                    pc=0x35800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35800() throws ExecutionException { /* 0x35800 - 0x35a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35800:
                    r29 = r29 + -32;
                    r3 = r4 + r0;
                    r8 = r5 + r0;
                    r9 = r6 + r0;
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r3 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x35834;
                    pc=0x2eaa4;
                    run_2ea00(); return;
                case 0x35834:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35a00:
                    pc=0x35a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35a00() throws ExecutionException { /* 0x35a00 - 0x35c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35a00:
                    r29 = r29 + -32;
                    r3 = r4 + r0;
                    r8 = r5 + r0;
                    r9 = r6 + r0;
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r3 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x35a34;
                    pc=0x2ea58;
                    run_2ea00(); return;
                case 0x35a34:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35c00:
                    pc=0x35c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35c00() throws ExecutionException { /* 0x35c00 - 0x35e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35c00:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35c28;
                    pc=0x2eb30;
                    run_2ea00(); return;
                case 0x35c28:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x35e00:
                    pc=0x35e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_35e00() throws ExecutionException { /* 0x35e00 - 0x36000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x35e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x35e20;
                    pc=0x2eaf0;
                    run_2ea00(); return;
                case 0x35e20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36000:
                    pc=0x36000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36000() throws ExecutionException { /* 0x36000 - 0x36200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36000:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36020;
                    pc=0x2eb70;
                    run_2ea00(); return;
                case 0x36020:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36200:
                    pc=0x36200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36200() throws ExecutionException { /* 0x36200 - 0x36400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36200:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r9 = r5 + r0;
                    r10 = r6 + r0;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r9 + r0;
                    r7 = r10 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r31=0x3623c;
                    pc=0x2ebb0;
                    run_2ea00(); return;
                case 0x3623c:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36400:
                    pc=0x36400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36400() throws ExecutionException { /* 0x36400 - 0x36600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36400:
                    r29 = r29 + -40;
                    r8 = r4 + r0;
                    r9 = r5 + r0;
                    r10 = r6 + r0;
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r3 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r8 + r0;
                    r6 = r9 + r0;
                    r7 = r10 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r3;
                    r31=0x3643c;
                    pc=0x2ebfc;
                    run_2ea00(); return;
                case 0x3643c:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r29 = r29 + 40;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36600:
                    pc=0x36600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36600() throws ExecutionException { /* 0x36600 - 0x36800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36600:
                    r29 = r29 + -32;
                    r3 = r4 + r0;
                    r8 = r5 + r0;
                    r9 = r6 + r0;
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r3 + r0;
                    r6 = r8 + r0;
                    r7 = r9 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r31=0x36634;
                    pc=0x2ec48;
                    run_2ec00(); return;
                case 0x36634:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36800:
                    pc=0x36800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36800() throws ExecutionException { /* 0x36800 - 0x36a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36800:
                    r29 = r29 + -32;
                    r3 = r5 + r0;
                    r8 = r6 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    r7 = r8 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36830;
                    pc=0x2ece4;
                    run_2ec00(); return;
                case 0x36830:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36a00:
                    pc=0x36a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36a00() throws ExecutionException { /* 0x36a00 - 0x36c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36a00:
                    r29 = r29 + -32;
                    r3 = r5 + r0;
                    r8 = r6 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r7;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    r7 = r8 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36a30;
                    pc=0x2ed24;
                    run_2ec00(); return;
                case 0x36a30:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36c00:
                    pc=0x36c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36c00() throws ExecutionException { /* 0x36c00 - 0x36e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36c00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36c20;
                    pc=0x2f074;
                    run_2f000(); return;
                case 0x36c20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x36e00:
                    pc=0x36e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_36e00() throws ExecutionException { /* 0x36e00 - 0x37000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x36e00:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x36e28;
                    pc=0x2ed64;
                    run_2ec00(); return;
                case 0x36e28:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37000:
                    pc=0x37000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37000() throws ExecutionException { /* 0x37000 - 0x37200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37000:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37028;
                    pc=0x2eda4;
                    run_2ec00(); return;
                case 0x37028:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37200:
                    pc=0x37200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37200() throws ExecutionException { /* 0x37200 - 0x37400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37200:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37218;
                    pc=0x2ede4;
                    run_2ec00(); return;
                case 0x37218:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37400:
                    pc=0x37400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37400() throws ExecutionException { /* 0x37400 - 0x37600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37400:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37418;
                    pc=0x2ee24;
                    run_2ee00(); return;
                case 0x37418:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37600:
                    pc=0x37600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37600() throws ExecutionException { /* 0x37600 - 0x37800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37600:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37618;
                    pc=0x2ee64;
                    run_2ee00(); return;
                case 0x37618:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37800:
                    pc=0x37800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37800() throws ExecutionException { /* 0x37800 - 0x37a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37800:
                    r5 = r4 & 65535;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37818;
                    pc=0x2eea4;
                    run_2ee00(); return;
                case 0x37818:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37a00:
                    pc=0x37a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37a00() throws ExecutionException { /* 0x37a00 - 0x37c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37a20;
                    pc=0x2eee4;
                    run_2ee00(); return;
                case 0x37a20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37c00:
                    pc=0x37c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37c00() throws ExecutionException { /* 0x37c00 - 0x37e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37c00:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37c14;
                    pc=0x2f0b4;
                    run_2f000(); return;
                case 0x37c14:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x37e00:
                    pc=0x37e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_37e00() throws ExecutionException { /* 0x37e00 - 0x38000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x37e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x37e18;
                    pc=0x2f134;
                    run_2f000(); return;
                case 0x37e18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38000:
                    pc=0x38000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38000() throws ExecutionException { /* 0x38000 - 0x38200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38000:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38028;
                    pc=0x2e390;
                    run_2e200(); return;
                case 0x38028:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38200:
                    pc=0x38200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38200() throws ExecutionException { /* 0x38200 - 0x38400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38200:
                    r29 = r29 + -40;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r4 + r0;
                        pc=0x3826c;
                        continue;
                    }
                    r18 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3822c;
                    pc=0x2e350;
                    run_2e200(); return;
                case 0x3822c:
                    r16 = r2 + r0;
                    r3 = r2 + r0;
                    r2 = r0 + -1;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x38264;
                        continue;
                    }
                case 0x38240:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x38264:
                    /* Next insn is delay slot */ 
                    r3 = r0 + r0;
                    pc=0x38240;
                    continue;
                case 0x3826c:
                    r17 = r0 + 256;
                    r20 = r0 + -1;
                    r19 = r0 + 34;
                case 0x38278:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x38280;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x38280:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x38294;
                    pc=0x2e350;
                    run_2e200(); return;
                case 0x38294:
                    if(r2 != r20) {
                        /* Next insn is delay slot */ 
                        r3 = r2 + r0;
                        pc=0x38240;
                        continue;
                    }
                    r3 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x382a4;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x382a4:
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    r17 = r17 << 1;
                    if(r2 == r19) {
                        /* Next insn is delay slot */ 
                        pc=0x38278;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x38264;
                    continue;
                case 0x38400:
                    pc=0x38400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38400() throws ExecutionException { /* 0x38400 - 0x38600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38400:
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r7 = r0 + r0;
                    r5 = r0 + -1;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3841c;
                    pc=0x2e310;
                    run_2e200(); return;
                case 0x3841c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x38600:
                    pc=0x38600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38600() throws ExecutionException { /* 0x38600 - 0x38800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38600:
                    r29 = r29 + -24;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r5 = 5 << 16;
                    r16 = r4 + r0;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23468;
                    r31=0x38624;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x38624:
                    r3 = r0 + 22;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x38800:
                    pc=0x38800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38800() throws ExecutionException { /* 0x38800 - 0x38a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38800:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r0 + 8;
                    r16 = r4 + r0;
                    r9 = r5 + r0;
                    r4 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x38858;
                        continue;
                    }
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r4;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x38848;
                    pc=0x2e88c;
                    run_2e800(); return;
                case 0x38848:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x38858:
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + 1;
                        pc=0x38870;
                        continue;
                    }
                    r2 = r0 + 1;
                    r2 = r0 + 2;
                    if(r6 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3887c;
                        continue;
                    }
                    r2 = r0 + 22;
                case 0x38870:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                case 0x38874:
                    /* Next insn is delay slot */ 
                    r2 = r0 + -1;
                    pc=0x38848;
                    continue;
                case 0x3887c:
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r6 = readPages[(r9+4)>>>12][((r9+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -23532;
                    r31=0x38894;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x38894:
                    r3 = r0 + 22;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x38874;
                    continue;
                case 0x38a00:
                    pc=0x38a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38a00() throws ExecutionException { /* 0x38a00 - 0x38c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38a00:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x38c00:
                    pc=0x38c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38c00() throws ExecutionException { /* 0x38c00 - 0x38e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38c00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x38c10;
                    pc=0x3f200;
                    run_3f200(); return;
                case 0x38c10:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x38c20;
                        continue;
                    }
                    r3 = r0 + r0;
                    r2 = 5 << 16;
                    r3 = r2 + -23428;
                case 0x38c20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x38e00:
                    pc=0x38e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_38e00() throws ExecutionException { /* 0x38e00 - 0x39000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x38e00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = r4 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r6 + r0;
                        pc=0x38e98;
                        continue;
                    }
                    r17 = r6 + r0;
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38e40;
                        continue;
                    }
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x38e6c;
                        continue;
                    }
                case 0x38e40:
                    /* Next insn is delay slot */ 
                    r31=0x38e48;
                    pc=0x20000;
                    run_20000(); return;
                case 0x38e48:
                    r3 = r0 + 22;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r3;
                    r2 = r0 + -1;
                case 0x38e54:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x38e6c:
                    r5 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x38e78;
                    pc=0x43a00;
                    run_43a00(); return;
                case 0x38e78:
                    r16 = r2 + r0;
                case 0x38e7c:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38e90;
                        continue;
                    }
                    r2 = r0 + -1;
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r16;
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r2;
                case 0x38e90:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x38e54;
                    continue;
                case 0x38e98:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x38e90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r31=0x38ea8;
                    pc=0x43a00;
                    run_43a00(); return;
                case 0x38ea8:
                    r5 = r2 + r0;
                    r4 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x38eb8;
                    pc=0x43a00;
                    run_43a00(); return;
                case 0x38eb8:
                    /* Next insn is delay slot */ 
                    pc=0x38e7c;
                    continue;
                case 0x39000:
                    pc=0x39000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39000() throws ExecutionException { /* 0x39000 - 0x39200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39000:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x39018;
                    pc=0x20000;
                    run_20000(); return;
                case 0x39018:
                    r4 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39090;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39090;
                        continue;
                    }
                case 0x39038:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r2 + r4;
                    r3 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3906c;
                        continue;
                    }
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r2 = r2 - r4;
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39080;
                        continue;
                    }
                case 0x3906c:
                    r2 = r0 + r0;
                case 0x39070:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x39080:
                    r2 = r4 + r3;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r5 + r0;
                    pc=0x39070;
                    continue;
                case 0x39090:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r6 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r7 = readPages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    r31=0x390a8;
                    pc=0x2e590;
                    run_2e400(); return;
                case 0x390a8:
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x39038;
                        continue;
                    }
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r0;
                    pc=0x3906c;
                    continue;
                case 0x39200:
                    pc=0x39200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39200() throws ExecutionException { /* 0x39200 - 0x39400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39200:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r17 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    r4 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x39224;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x39224:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x3922c;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x3922c:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x39234;
                    pc=0x29400;
                    run_29400(); return;
                case 0x39234:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x39400:
                    pc=0x39400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39400() throws ExecutionException { /* 0x39400 - 0x39600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39400:
                    r29 = r29 + -40;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r4;
                    addr=r29+41;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    r16 = 5 << 16;
                    r16 = r16 + -14488;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    addr=r29+42;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    addr=r29+43;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r6 = 5 << 16;
                    r4 = r16 + r0;
                    r5 = r0 + 18;
                    r6 = r6 + -23412;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    r31=0x39448;
                    pc=0x44200;
                    run_44200(); return;
                case 0x39448:
                    r2 = r16 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x39600:
                    pc=0x39600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39600() throws ExecutionException { /* 0x39600 - 0x39800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39600:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x39800:
                    pc=0x39800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39800() throws ExecutionException { /* 0x39800 - 0x39a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39800:
                    r2 = (r4&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39818;
                        continue;
                    }
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -23400;
                    pc=r31;
                    return;
                case 0x39818:
                    r2 = 5 << 16;
                    r3 = r4 << 2;
                    r2 = r2 + -20312;
                    r3 = r3 + r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39a00:
                    pc=0x39a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39a00() throws ExecutionException { /* 0x39a00 - 0x39c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39a00:
                    r3 = 5 << 16;
                    r3 = readPages[(r3+-19156)>>>12][((r3+-19156)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r2 = (r3&0xffffffffL) < (5&0xffffffffL) ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r4 + r0;
                        pc=0x39a48;
                        continue;
                    }
                    r6 = r4 + r0;
                    r2 = 5 << 16;
                    r7 = r2 + -23400;
                case 0x39a24:
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = 5 << 16;
                    r4 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -19420;
                    r31=0x39a38;
                    pc=0x21a00;
                    run_21a00(); return;
                case 0x39a38:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x39a48:
                    r2 = 5 << 16;
                    r3 = r3 << 2;
                    r2 = r2 + -20312;
                    r3 = r3 + r2;
                    r7 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x39a24;
                    continue;
                case 0x39c00:
                    pc=0x39c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39c00() throws ExecutionException { /* 0x39c00 - 0x39e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39c00:
                    r29 = r29 + -48;
                    r2 = r0 + 2;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r16 = r4 + r0;
                    r18 = r5 + r0;
                    if(r6 != r2) {
                        /* Next insn is delay slot */ 
                        r17 = r6 + r0;
                        pc=0x39c38;
                        continue;
                    }
                    r17 = r6 + r0;
                    r2 = r0 + 4;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x39c58;
                        continue;
                    }
                case 0x39c38:
                    r2 = r0 + r0;
                case 0x39c3c:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x39c58:
                    r5 = r16 + r0;
                    r4 = r29 + 16;
                    r6 = r0 + 4;
                    r19 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r19 = r19 + -19160;
                    r31=0x39c70;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x39c70:
                    r5 = r16 + r0;
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 4;
                    r31=0x39c80;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x39c80:
                    r2 = 5 << 16;
                    r16 = r2 + -14448;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 128;
                    r31=0x39c9c;
                    pc=0x2f0f4;
                    run_2f000(); return;
                case 0x39c9c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39ce8;
                        continue;
                    }
                    r3 = 5 << 16;
                    r4 = r3 + -14468;
                    r2 = 5 << 16;
                    r2 = r2 + -19168;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r2 = r2 + -19164;
                    writePages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff] = r2;
                    writePages[(r3+-14468)>>>12][((r3+-14468)>>>2)&0x3ff] = r16;
                    r1 = 5 << 16;
                    writePages[(r1+-19168)>>>12][((r1+-19168)>>>2)&0x3ff] = r0;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r17;
                    writePages[(r4+12)>>>12][((r4+12)>>>2)&0x3ff] = r18;
                    r1 = 5 << 16;
                    writePages[(r1+-19164)>>>12][((r1+-19164)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=0x39c3c;
                    continue;
                case 0x39ce8:
                    r1 = 5 << 16;
                    writePages[(r1+-19156)>>>12][((r1+-19156)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    pc=0x39c38;
                    continue;
                case 0x39e00:
                    pc=0x39e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_39e00() throws ExecutionException { /* 0x39e00 - 0x3a000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x39e00:
                    r29 = r29 + -1088;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r4;
                    r5 = 5 << 16;
                    r4 = 5 << 16;
                    r4 = r4 + -23496;
                    r5 = r5 + -19424;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    r31=0x39e44;
                    pc=0x21800;
                    run_21800(); return;
                case 0x39e44:
                    r19 = r2 + r0;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x39f00;
                        continue;
                    }
                    r2 = r0 + r0;
                    r21 = r0 + 35;
                    r30 = 5 << 16;
                    r22 = 5 << 16;
                    r23 = 5 << 16;
                    r23 = r23 + -19144;
                case 0x39e64:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x39e74;
                    pc=0x20800;
                    run_20800(); return;
                case 0x39e74:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f30;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x39e64;
                        continue;
                    }
                    r2 = 5 << 16;
                    r18 = r2 + -8128;
                    r20 = r30 + -7104;
                    r2 = 5 << 16;
                    r16 = r22 + -13256;
                    r4 = r29 + 24;
                    r5 = r2 + -23484;
                    r6 = r18 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x39eb8;
                    pc=0x44600;
                    run_44600(); return;
                case 0x39eb8:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39f30;
                        continue;
                    }
                    r17 = r16 + -8;
                    r4 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    writePages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff] = r20;
                    writePages[(r17+12)>>>12][((r17+12)>>>2)&0x3ff] = r23;
                    r5 = r18 + r0;
                    writePages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff] = r18;
                    r1 = 5 << 16;
                    writePages[(r1+-19144)>>>12][((r1+-19144)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r31=0x39eec;
                    pc=0x27200;
                    run_27200(); return;
                case 0x39eec:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x39e64;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x39efc;
                    pc=0x20400;
                    run_20400(); return;
                case 0x39efc:
                    r2 = r17 + r0;
                case 0x39f00:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1088;
                    pc=r31;
                    return;
                case 0x39f30:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x39f38;
                    pc=0x20400;
                    run_20400(); return;
                case 0x39f38:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x39f00;
                    continue;
                case 0x3a000:
                    pc=0x3a000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a000() throws ExecutionException { /* 0x3a000 - 0x3a200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a000:
                    r29 = r29 + -1088;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r22;
                    r5 = 5 << 16;
                    r22 = r4 & 65535;
                    r4 = 5 << 16;
                    r4 = r4 + -23496;
                    r5 = r5 + -19424;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r31;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r30;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r23;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r21;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r20;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r19;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    r31=0x3a044;
                    pc=0x21800;
                    run_21800(); return;
                case 0x3a044:
                    r18 = r2 + r0;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3a0f4;
                        continue;
                    }
                    r2 = r0 + r0;
                    r21 = r0 + 35;
                    r30 = 5 << 16;
                    r23 = 5 << 16;
                    r23 = r23 + -19144;
                case 0x3a060:
                    r4 = r29 + 24;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x3a070;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3a070:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a124;
                        continue;
                    }
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r21) {
                        /* Next insn is delay slot */ 
                        pc=0x3a060;
                        continue;
                    }
                    r2 = 5 << 16;
                    r19 = r2 + -8128;
                    r2 = 5 << 16;
                    r20 = r2 + -7104;
                    r2 = 5 << 16;
                    r17 = r30 + -13256;
                    r4 = r29 + 24;
                    r5 = r2 + -23484;
                    r6 = r19 + r0;
                    r7 = r20 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r31=0x3a0b8;
                    pc=0x44600;
                    run_44600(); return;
                case 0x3a0b8:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a124;
                        continue;
                    }
                    r16 = r17 + -8;
                    addr=r16+8;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r17+-8)>>>12][((r17+-8)>>>2)&0x3ff] = r19;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r20;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r23;
                    r1 = 5 << 16;
                    writePages[(r1+-19144)>>>12][((r1+-19144)>>>2)&0x3ff] = r0;
                    if(r2 != r22) {
                        /* Next insn is delay slot */ 
                        pc=0x3a060;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x3a0f0;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3a0f0:
                    r2 = r16 + r0;
                case 0x3a0f4:
                    r31 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r30 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r23 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r22 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r21 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r20 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r19 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1088;
                    pc=r31;
                    return;
                case 0x3a124:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x3a12c;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3a12c:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x3a0f4;
                    continue;
                case 0x3a200:
                    pc=0x3a200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a200() throws ExecutionException { /* 0x3a200 - 0x3a400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a200:
                    r6 = 5 << 16;
                    r6 = readPages[(r6+-19148)>>>12][((r6+-19148)>>>2)&0x3ff];
                    r29 = r29 + -1064;
                    writePages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff] = r31;
                    writePages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff] = r18;
                    writePages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff] = r17;
                    writePages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3a2a8;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r29 + 24;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1024;
                    r31=0x3a230;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3a230:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3a2a8;
                        continue;
                    }
                    r3 = r0 + r0;
                    addr=r29+24;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 35;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3a2c4;
                        continue;
                    }
                    r3 = 5 << 16;
                    r2 = 5 << 16;
                    r17 = r3 + -7104;
                    r18 = r2 + -8128;
                    r5 = 5 << 16;
                    r2 = 5 << 16;
                    r16 = r2 + -13256;
                    r4 = r29 + 24;
                    r5 = r5 + -23484;
                    r6 = r18 + r0;
                    r7 = r17 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r31=0x3a27c;
                    pc=0x44600;
                    run_44600(); return;
                case 0x3a27c:
                    r2 = r2 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3a2a8;
                        continue;
                    }
                    r3 = r0 + r0;
                    r3 = r16 + -8;
                    r2 = 5 << 16;
                    r2 = r2 + -19144;
                    writePages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff] = r18;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r17;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r2;
                    r1 = 5 << 16;
                    writePages[(r1+-19144)>>>12][((r1+-19144)>>>2)&0x3ff] = r0;
                case 0x3a2a8:
                    r31 = readPages[(r29+1060)>>>12][((r29+1060)>>>2)&0x3ff];
                    r18 = readPages[(r29+1056)>>>12][((r29+1056)>>>2)&0x3ff];
                    r17 = readPages[(r29+1052)>>>12][((r29+1052)>>>2)&0x3ff];
                    r16 = readPages[(r29+1048)>>>12][((r29+1048)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1064;
                    pc=r31;
                    return;
                case 0x3a2c4:
                    /* Next insn is delay slot */ 
                    r31=0x3a2cc;
                    pc=0x3a200;
                    continue;
                case 0x3a2cc:
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x3a2a8;
                    continue;
                case 0x3a400:
                    pc=0x3a400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a400() throws ExecutionException { /* 0x3a400 - 0x3a600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a400:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19148)>>>12][((r4+-19148)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                        pc=0x3a43c;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                case 0x3a414:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + -23496;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -19424;
                    r31=0x3a428;
                    pc=0x21800;
                    run_21800(); return;
                case 0x3a428:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19148)>>>12][((r1+-19148)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x3a43c:
                    /* Next insn is delay slot */ 
                    r31=0x3a444;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3a444:
                    /* Next insn is delay slot */ 
                    pc=0x3a414;
                    continue;
                case 0x3a600:
                    pc=0x3a600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a600() throws ExecutionException { /* 0x3a600 - 0x3a800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a600:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19148)>>>12][((r4+-19148)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                        pc=0x3a628;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                case 0x3a614:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19148)>>>12][((r1+-19148)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x3a628:
                    /* Next insn is delay slot */ 
                    r31=0x3a630;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3a630:
                    /* Next insn is delay slot */ 
                    pc=0x3a614;
                    continue;
                case 0x3a800:
                    pc=0x3a800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3a800() throws ExecutionException { /* 0x3a800 - 0x3aa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3a800:
                    r29 = r29 + -1104;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r4;
                    r5 = 5 << 16;
                    r4 = 5 << 16;
                    r4 = r4 + -23384;
                    r5 = r5 + -19424;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r31;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r30;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r23;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r22;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    r31=0x3a844;
                    pc=0x21800;
                    run_21800(); return;
                case 0x3a844:
                    r20 = r2 + r0;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3a930;
                        continue;
                    }
                    r2 = r0 + r0;
                    r30 = r0 + 35;
                case 0x3a854:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x3a864;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3a864:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a960;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x3a854;
                        continue;
                    }
                    r2 = 5 << 16;
                    r18 = r2 + -13248;
                    r2 = 5 << 16;
                    r23 = r2 + -12224;
                    r2 = 5 << 16;
                    r17 = r2 + -13288;
                    r2 = 5 << 16;
                    r2 = r2 + -13284;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r22 = r2 + -11200;
                    r2 = 5 << 16;
                    r21 = r2 + -10176;
                    r2 = 5 << 16;
                    r19 = r2 + -9152;
                    r2 = 5 << 16;
                    r4 = r29 + 40;
                    r5 = r2 + -23372;
                    r6 = r18 + r0;
                    r7 = r23 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r31=0x3a8e0;
                    pc=0x44600;
                    run_44600(); return;
                case 0x3a8e0:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a960;
                        continue;
                    }
                    r2 = 5 << 16;
                    r16 = r17 + -8;
                    r2 = r2 + -19412;
                    r4 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r23;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r22;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r21;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r19;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r17+-8)>>>12][((r17+-8)>>>2)&0x3ff] = r18;
                    r31=0x3a91c;
                    pc=0x27200;
                    run_27200(); return;
                case 0x3a91c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3a854;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x3a92c;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3a92c:
                    r2 = r16 + r0;
                case 0x3a930:
                    r31 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r30 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r23 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r22 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1104;
                    pc=r31;
                    return;
                case 0x3a960:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x3a968;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3a968:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x3a930;
                    continue;
                case 0x3aa00:
                    pc=0x3aa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3aa00() throws ExecutionException { /* 0x3aa00 - 0x3ac00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3aa00:
                    r29 = r29 + -1112;
                    r4 = r4 & 65535;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r4;
                    r5 = 5 << 16;
                    r4 = 5 << 16;
                    r4 = r4 + -23384;
                    r5 = r5 + -19424;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r18;
                    writePages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff] = r31;
                    writePages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff] = r30;
                    writePages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff] = r23;
                    writePages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff] = r22;
                    writePages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff] = r21;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r20;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r19;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r16;
                    r31=0x3aa48;
                    pc=0x21800;
                    run_21800(); return;
                case 0x3aa48:
                    r18 = r2 + r0;
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3ab2c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r30 = r0 + 35;
                case 0x3aa58:
                    r4 = r29 + 40;
                    r5 = r0 + 1024;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x3aa68;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3aa68:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab5c;
                        continue;
                    }
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r30) {
                        /* Next insn is delay slot */ 
                        pc=0x3aa58;
                        continue;
                    }
                    r3 = 5 << 16;
                    r2 = 5 << 16;
                    r23 = r3 + -12224;
                    r3 = 5 << 16;
                    r22 = r2 + -13248;
                    r3 = r3 + -13284;
                    r2 = 5 << 16;
                    r17 = r2 + -13288;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = 5 << 16;
                    r3 = 5 << 16;
                    r21 = r2 + -11200;
                    r20 = r3 + -10176;
                    r2 = 5 << 16;
                    r3 = 5 << 16;
                    r19 = r2 + -9152;
                    r4 = r29 + 40;
                    r5 = r3 + -23372;
                    r6 = r22 + r0;
                    r7 = r23 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r20;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r19;
                    r31=0x3aae4;
                    pc=0x44600;
                    run_44600(); return;
                case 0x3aae4:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ab5c;
                        continue;
                    }
                    r2 = 5 << 16;
                    r16 = r17 + -8;
                    r2 = r2 + -19412;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    writePages[(r17+-8)>>>12][((r17+-8)>>>2)&0x3ff] = r22;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r23;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r21;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r20;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r19;
                        pc=0x3aa58;
                        continue;
                    }
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r19;
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x3ab28;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3ab28:
                    r2 = r16 + r0;
                case 0x3ab2c:
                    r31 = readPages[(r29+1108)>>>12][((r29+1108)>>>2)&0x3ff];
                    r30 = readPages[(r29+1104)>>>12][((r29+1104)>>>2)&0x3ff];
                    r23 = readPages[(r29+1100)>>>12][((r29+1100)>>>2)&0x3ff];
                    r22 = readPages[(r29+1096)>>>12][((r29+1096)>>>2)&0x3ff];
                    r21 = readPages[(r29+1092)>>>12][((r29+1092)>>>2)&0x3ff];
                    r20 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r19 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r18 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r17 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r16 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1112;
                    pc=r31;
                    return;
                case 0x3ab5c:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x3ab64;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3ab64:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x3ab2c;
                    continue;
                case 0x3ac00:
                    pc=0x3ac00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ac00() throws ExecutionException { /* 0x3ac00 - 0x3ae00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ac00:
                    r6 = 5 << 16;
                    r6 = readPages[(r6+-19152)>>>12][((r6+-19152)>>>2)&0x3ff];
                    r29 = r29 + -1096;
                    writePages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff] = r31;
                    writePages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff] = r21;
                    writePages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff] = r20;
                    writePages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff] = r19;
                    writePages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff] = r18;
                    writePages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff] = r17;
                    writePages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff] = r16;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3ace4;
                        continue;
                    }
                    r3 = r0 + r0;
                    r4 = r29 + 40;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1024;
                    r31=0x3ac3c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3ac3c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3ace4;
                        continue;
                    }
                    r3 = r0 + r0;
                    addr=r29+40;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 35;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3ad0c;
                        continue;
                    }
                    r2 = 5 << 16;
                    r21 = r2 + -13248;
                    r2 = 5 << 16;
                    r16 = r2 + -13288;
                    r2 = r16 + 4;
                    r3 = 5 << 16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    r2 = 5 << 16;
                    r20 = r3 + -12224;
                    r18 = r2 + -10176;
                    r3 = 5 << 16;
                    r2 = 5 << 16;
                    r5 = 5 << 16;
                    r19 = r3 + -11200;
                    r17 = r2 + -9152;
                    r4 = r29 + 40;
                    r5 = r5 + -23372;
                    r6 = r21 + r0;
                    r7 = r20 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r19;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r18;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r17;
                    r31=0x3acb4;
                    pc=0x44600;
                    run_44600(); return;
                case 0x3acb4:
                    r2 = r2 < 7 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3ace4;
                        continue;
                    }
                    r3 = r0 + r0;
                    r2 = 5 << 16;
                    r3 = r16 + -8;
                    r2 = r2 + -19412;
                    writePages[(r16+-8)>>>12][((r16+-8)>>>2)&0x3ff] = r21;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r20;
                    writePages[(r3+20)>>>12][((r3+20)>>>2)&0x3ff] = r19;
                    writePages[(r3+24)>>>12][((r3+24)>>>2)&0x3ff] = r18;
                    writePages[(r3+28)>>>12][((r3+28)>>>2)&0x3ff] = r17;
                    writePages[(r3+16)>>>12][((r3+16)>>>2)&0x3ff] = r2;
                case 0x3ace4:
                    r31 = readPages[(r29+1088)>>>12][((r29+1088)>>>2)&0x3ff];
                    r21 = readPages[(r29+1084)>>>12][((r29+1084)>>>2)&0x3ff];
                    r20 = readPages[(r29+1080)>>>12][((r29+1080)>>>2)&0x3ff];
                    r19 = readPages[(r29+1076)>>>12][((r29+1076)>>>2)&0x3ff];
                    r18 = readPages[(r29+1072)>>>12][((r29+1072)>>>2)&0x3ff];
                    r17 = readPages[(r29+1068)>>>12][((r29+1068)>>>2)&0x3ff];
                    r16 = readPages[(r29+1064)>>>12][((r29+1064)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 1096;
                    pc=r31;
                    return;
                case 0x3ad0c:
                    /* Next insn is delay slot */ 
                    r31=0x3ad14;
                    pc=0x3ac00;
                    continue;
                case 0x3ad14:
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x3ace4;
                    continue;
                case 0x3ae00:
                    pc=0x3ae00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ae00() throws ExecutionException { /* 0x3ae00 - 0x3b000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ae00:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19152)>>>12][((r4+-19152)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                        pc=0x3ae3c;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                case 0x3ae14:
                    r4 = 5 << 16;
                    r5 = 5 << 16;
                    r4 = r4 + -23496;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -19424;
                    r31=0x3ae28;
                    pc=0x21800;
                    run_21800(); return;
                case 0x3ae28:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19152)>>>12][((r1+-19152)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x3ae3c:
                    /* Next insn is delay slot */ 
                    r31=0x3ae44;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3ae44:
                    /* Next insn is delay slot */ 
                    pc=0x3ae14;
                    continue;
                case 0x3b000:
                    pc=0x3b000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b000() throws ExecutionException { /* 0x3b000 - 0x3b200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b000:
                    r4 = 5 << 16;
                    r4 = readPages[(r4+-19152)>>>12][((r4+-19152)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                        pc=0x3b028;
                        continue;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                case 0x3b014:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r1 = 5 << 16;
                    writePages[(r1+-19152)>>>12][((r1+-19152)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x3b028:
                    /* Next insn is delay slot */ 
                    r31=0x3b030;
                    pc=0x20400;
                    run_20400(); return;
                case 0x3b030:
                    /* Next insn is delay slot */ 
                    pc=0x3b014;
                    continue;
                case 0x3b200:
                    pc=0x3b200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b200() throws ExecutionException { /* 0x3b200 - 0x3b400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b200:
                    r29 = r29 + -32;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r18 = 5 << 16;
                    r31=0x3b224;
                    pc=0x3e200;
                    run_3e200(); return;
                case 0x3b224:
                    r3 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r16 = r18 + -14320;
                    r4 = readPages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r17 = r0 + r0;
                    r31=0x3b238;
                    pc=0x20600;
                    run_20600(); return;
                case 0x3b238:
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r6 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1024;
                    r31=0x3b24c;
                    pc=0x20800;
                    run_20800(); return;
                case 0x3b24c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b28c;
                        continue;
                    }
                case 0x3b254:
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r4 = r0 + 10;
                    r5 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3b268;
                    pc=0x21c00;
                    run_21c00(); return;
                case 0x3b268:
                    r2 = r18 + -14320;
                    r3 = r17 + r2;
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x3b28c:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x3b294;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x3b294:
                    r17 = r2 + r0;
                    r2 = r2 + r16;
                    addr=r2+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r4 = tmp;
                    r3 = r0 + 10;
                    if(r4 != r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3b254;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r17 = r17 + -1;
                    pc=0x3b254;
                    continue;
                case 0x3b400:
                    pc=0x3b400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b400() throws ExecutionException { /* 0x3b400 - 0x3b600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b400:
                    r29 = r29 + -32;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r4 + r0;
                    r4 = r0 + 128;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r6 + r0;
                    r31=0x3b428;
                    pc=0x23a00;
                    run_23a00(); return;
                case 0x3b428:
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x3b458;
                        continue;
                    }
                    r3 = r0 + -1;
                    r5 = r0 + 128;
                    r4 = r2 + r0;
                    r6 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r18 + r0;
                    r31=0x3b448;
                    pc=0x46600;
                    run_46600(); return;
                case 0x3b448:
                    r5 = r2 + r0;
                    r2 = r2 < 128 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r5 + r0;
                        pc=0x3b474;
                        continue;
                    }
                    r3 = r5 + r0;
                case 0x3b458:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x3b474:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    r31=0x3b480;
                    pc=0x42600;
                    run_42600(); return;
                case 0x3b480:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3b4a4;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x3b49c;
                    pc=0x46a00;
                    run_46a00(); return;
                case 0x3b49c:
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x3b458;
                    continue;
                case 0x3b4a4:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3b4b0;
                    pc=0x23c00;
                    run_23c00(); return;
                case 0x3b4b0:
                    /* Next insn is delay slot */ 
                    r3 = r0 + -1;
                    pc=0x3b458;
                    continue;
                case 0x3b600:
                    pc=0x3b600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b600() throws ExecutionException { /* 0x3b600 - 0x3b800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b600:
                    r4 = 5 << 16;
                    r29 = r29 + -24;
                    r4 = r4 + -19408;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3b618;
                    pc=0x3ec00;
                    run_3ec00(); return;
                case 0x3b618:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3b800:
                    pc=0x3b800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3b800() throws ExecutionException { /* 0x3b800 - 0x3ba00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3b800:
                    r29 = r29 + -48;
                    r6 = r4 + r0;
                    r3 = r0 + 10;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    r2 = r0 + 1;
                    r4 = r29 + 24;
                    r5 = r0 + 2;
                    r7 = r29 + 32;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r3;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r0;
                    r31=0x3b838;
                    pc=0x34800;
                    run_34800(); return;
                case 0x3b838:
                    r2 = ~(r0 | r2);
                    r2 = ((r0 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = r2 + -1;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x3ba00:
                    pc=0x3ba00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ba00() throws ExecutionException { /* 0x3ba00 - 0x3bc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ba00:
                    r29 = r29 + -32;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r18 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r0 + -1;
                    r31=0x3ba24;
                    pc=0x45c00;
                    run_45c00(); return;
                case 0x3ba24:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x3ba5c;
                        continue;
                    }
                    r3 = r0 + -1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3baf8;
                        continue;
                    }
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3ba40;
                    pc=0x2f0b4;
                    run_2f000(); return;
                case 0x3ba40:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x3ba5c;
                        continue;
                    }
                    r3 = r0 + -1;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3bae0;
                        continue;
                    }
                case 0x3ba50:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba78;
                        continue;
                    }
                case 0x3ba58:
                    r3 = r0 + r0;
                case 0x3ba5c:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x3ba78:
                    r4 = 5 << 16;
                    r4 = r4 + -23336;
                    r5 = r0 + 2;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x3ba8c;
                    pc=0x46000;
                    run_46000(); return;
                case 0x3ba8c:
                    if(r2 == r16) {
                        /* Next insn is delay slot */ 
                        r17 = r2 + r0;
                        pc=0x3ba58;
                        continue;
                    }
                    r17 = r2 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + r0;
                    r31=0x3baa4;
                    pc=0x2e290;
                    run_2e200(); return;
                case 0x3baa4:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x3bab4;
                    pc=0x2e290;
                    run_2e200(); return;
                case 0x3bab4:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 2;
                    r31=0x3bac4;
                    pc=0x2e290;
                    run_2e200(); return;
                case 0x3bac4:
                    r3 = r17 < 3 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ba58;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x3bad8;
                    pc=0x29400;
                    run_29400(); return;
                case 0x3bad8:
                    /* Next insn is delay slot */ 
                    pc=0x3ba58;
                    continue;
                case 0x3bae0:
                    r5 = 5 << 16;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r5 + -19428;
                    r31=0x3baf0;
                    pc=0x2e210;
                    run_2e200(); return;
                case 0x3baf0:
                    /* Next insn is delay slot */ 
                    pc=0x3ba50;
                    continue;
                case 0x3baf8:
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    r31=0x3bb00;
                    pc=0x2de00;
                    run_2de00(); return;
                case 0x3bb00:
                case 0x3bc00:
                    pc=0x3bc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3bc00() throws ExecutionException { /* 0x3bc00 - 0x3be00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3bc00:
                    r29 = r29 + -32;
                    r5 = r29 + 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3bc14;
                    pc=0x30000;
                    run_30000(); return;
                case 0x3bc14:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x3bc20;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                case 0x3bc20:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x3be00:
                    pc=0x3be00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3be00() throws ExecutionException { /* 0x3be00 - 0x3c000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3be00:
                    r29 = r29 + -96;
                    r6 = r29 + 16;
                    r7 = r29 + 80;
                    r5 = r5 & 65535;
                    r2 = r0 + 32;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31=0x3be20;
                    pc=0x30400;
                    run_30400(); return;
                case 0x3be20:
                    addr=r29+80;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r5 = tmp;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r6 = r29 + 16;
                    r31=0x3be30;
                    pc=0x2eee4;
                    run_2ee00(); return;
                case 0x3be30:
                    r31 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    r29 = r29 + 96;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3c000:
                    pc=0x3c000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c000() throws ExecutionException { /* 0x3c000 - 0x3c200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c000:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r21 = r4 + r0;
                    r2 = r2 < r18 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3c250;
                        run_3c200(); return;
                    }
                    r3 = r0 + r0;
                    r18 = r18 + -1;
                    r9 = r5 + 20;
                    r2 = r18 << 2;
                    r17 = r9 + r2;
                    r19 = r4 + 20;
                    r12 = r19 + r2;
                    r3 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r14 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    if(r3!=0) {
                    hi = (int)((r14 & 0xffffffffL) % (r3 & 0xffffffffL)); lo = (int)((r14 & 0xffffffffL) / (r3 & 0xffffffffL));
                    }
                    r22 = r9 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c074;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x3c074:
                    r16 = lo;
                    r20 = lo;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c15c;
                        continue;
                    }
                    r10 = r0 + r0;
                    r13 = r0 + r0;
                    r8 = r19 + r0;
                    r11 = r9 + r0;
                case 0x3c094:
                    r3 = readPages[(r11+0)>>>12][((r11+0)>>>2)&0x3ff];
                    r4 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r2 = r3 & 65535;
                    { long hilo = (long)(r2) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = r3 >>> 16;
                    r9 = r9 + 4;
                    r11 = r11 + 4;
                    r2 = lo;
                    r6 = r2 + r13;
                    r2 = r6 >>> 16;
                    { long hilo = (long)(r3) * ((long)r16); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = lo;
                    r7 = r3 + r2;
                    r2 = r4 & 65535;
                    r3 = r6 & 65535;
                    r2 = r2 - r3;
                    r3 = r2 + r10;
                    r4 = r4 >>> 16;
                    r2 = r7 & 65535;
                    r10 = r3 >> 16;
                    r4 = r4 - r2;
                    r2 = r4 + r10;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r2 >> 16;
                    r2 = ((r17 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    addr=r8+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r13 = r7 >>> 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 4;
                        pc=0x3c094;
                        continue;
                    }
                    r8 = r8 + 4;
                    if(r14 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c15c;
                        continue;
                    }
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c158;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c158;
                        continue;
                    }
                    r3 = r12 + r0;
                case 0x3c134:
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r18 = r18 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -4;
                        pc=0x3c158;
                        continue;
                    }
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c134;
                        continue;
                    }
                case 0x3c158:
                    writePages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff] = r18;
                case 0x3c15c:
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x3c164;
                    pc=0x41800;
                    run_41800(); return;
                case 0x3c164:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c24c;
                        run_3c200(); return;
                    }
                    r20 = r16 + 1;
                    r10 = r0 + r0;
                    r13 = r0 + r0;
                    r9 = r22 + r0;
                    r5 = r19 + r0;
                    r8 = r22 + r0;
                case 0x3c184:
                    r3 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r4 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = r3 & 65535;
                    r6 = r2 + r13;
                    r3 = r3 >>> 16;
                    r2 = r6 >>> 16;
                    r7 = r3 + r2;
                    r2 = r4 & 65535;
                    r3 = r6 & 65535;
                    r2 = r2 - r3;
                    r3 = r2 + r10;
                    r4 = r4 >>> 16;
                    r2 = r7 & 65535;
                    r10 = r3 >> 16;
                    r4 = r4 - r2;
                    r2 = r4 + r10;
                    r9 = r9 + 4;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r10 = r2 >> 16;
                    r2 = ((r17 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 4;
                    r13 = r7 >>> 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 4;
                        pc=0x3c184;
                        continue;
                    }
                    r5 = r5 + 4;
                    r2 = r18 << 2;
                    r12 = r19 + r2;
                    r3 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c24c;
                        run_3c200(); return;
                    }
                case 0x3c200:
                    pc=0x3c200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c200() throws ExecutionException { /* 0x3c200 - 0x3c400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c200:
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c248;
                        continue;
                    }
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c248;
                        continue;
                    }
                    r3 = r12 + r0;
                case 0x3c224:
                    r12 = r12 + -4;
                    r2 = ((r19 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    r18 = r18 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + -4;
                        pc=0x3c248;
                        continue;
                    }
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c224;
                        continue;
                    }
                case 0x3c248:
                    writePages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff] = r18;
                case 0x3c24c:
                    r3 = r20 + r0;
                case 0x3c250:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x3c400:
                    pc=0x3c400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c400() throws ExecutionException { /* 0x3c400 - 0x3c600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c400:
                    r29 = r29 + -136;
                    writePages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff] = r30;
                    writePages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff] = r19;
                    writePages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff] = r18;
                    writePages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff] = r16;
                    writePages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff] = r31;
                    writePages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff] = r23;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r22;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r21;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r20;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r17;
                    r5 = readPages[(r4+64)>>>12][((r4+64)>>>2)&0x3ff];
                    r30 = r4 + r0;
                    r16 = readPages[(r29+164)>>>12][((r29+164)>>>2)&0x3ff];
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    r18 = r6 + r0;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        r19 = r7 + r0;
                        pc=0x3d7f4;
                        run_3d600(); return;
                    }
                    r19 = r7 + r0;
                case 0x3c448:
                    if(r18 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d7dc;
                        run_3d600(); return;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r0;
                case 0x3c454:
                    r3 = 32752 << 16;
                    r2 = r18 & r3;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3d770;
                        run_3d600(); return;
                    }
                    f2 = r19;
                    f3 = r18;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c4e0;
                        continue;
                    }
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r4 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r3 = 5 << 16;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r3 + -19392;
                        pc=0x3c4ac;
                        continue;
                    }
                    r22 = r3 + -19392;
                    r2 = r22 + 1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x3c4ac:
                    r2 = r22 + r0;
                case 0x3c4b0:
                    r31 = readPages[(r29+132)>>>12][((r29+132)>>>2)&0x3ff];
                    r30 = readPages[(r29+128)>>>12][((r29+128)>>>2)&0x3ff];
                    r23 = readPages[(r29+124)>>>12][((r29+124)>>>2)&0x3ff];
                    r22 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r21 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r20 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    r19 = readPages[(r29+108)>>>12][((r29+108)>>>2)&0x3ff];
                    r18 = readPages[(r29+104)>>>12][((r29+104)>>>2)&0x3ff];
                    r17 = readPages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff];
                    r16 = readPages[(r29+96)>>>12][((r29+96)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 136;
                    pc=r31;
                    return;
                case 0x3c4e0:
                    r2 = r29 + 24;
                    r3 = r29 + 28;
                    r4 = r30 + r0;
                    r6 = r18 + r0;
                    r7 = r19 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x3c500;
                    pc=0x42000;
                    run_42000(); return;
                case 0x3c500:
                    r23 = r2 + r0;
                    r2 = r18 >>> 20;
                    r21 = r2 & 2047;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d6ec;
                        run_3d600(); return;
                    }
                    r2 = 15 << 16;
                    r6 = r18 + r0;
                    r2 = r2 | 65535;
                    r6 = r2 & r6;
                    r3 = 16368 << 16;
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r7 = r19 + r0;
                    r6 = r3 | r6;
                    r21 = r21 + -1023;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r0;
                case 0x3c53c:
                    f2 = r7;
                    f3 = r6;
                    f1 = readPages[(r28+-31872)>>>12][((r28+-31872)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31868)>>>12][((r28+-31868)>>>2)&0x3ff];
                    f5 = readPages[(r28+-31856)>>>12][((r28+-31856)>>>2)&0x3ff];
                    f4 = readPages[(r28+-31852)>>>12][((r28+-31852)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-31864)>>>12][((r28+-31864)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31860)>>>12][((r28+-31860)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f4 = r21;
                    { long l = Double.doubleToLongBits(((double)f4)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f5 = readPages[(r28+-31848)>>>12][((r28+-31848)>>>2)&0x3ff];
                    f4 = readPages[(r28+-31844)>>>12][((r28+-31844)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r2 = fcsr;
                    r2 = fcsr;
                    r1 = r2 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r2;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = f0;
                    f0 = r0;
                    f1 = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c600;
                        run_3c600(); return;
                    }
                    f2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c600;
                        run_3c600(); return;
                    }
                    r2 = f2;
                    r2 = r2 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                case 0x3c600:
                    pc=0x3c600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c600() throws ExecutionException { /* 0x3c600 - 0x3c800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c600:
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    r2 = (r4&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                        pc=0x3c654;
                        continue;
                    }
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r2 = r4 << 3;
                    r3 = r3 + -22832;
                    r2 = r2 + r3;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    f2 = r19;
                    f3 = r18;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c650;
                        continue;
                    }
                    r4 = r4 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r4;
                case 0x3c650:
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r0;
                case 0x3c654:
                    r2 = r5 - r21;
                    r16 = r2 + -1;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d6dc;
                        run_3d600(); return;
                    }
                    r17 = r16 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r0;
                case 0x3c66c:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d6bc;
                        run_3d600(); return;
                    }
                    r17 = r17 + r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r0;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r2;
                case 0x3c688:
                    r12 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = (r12&0xffffffffL) < (10&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6a0;
                        continue;
                    }
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r0;
                case 0x3c6a0:
                    r13 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r20 = r0 + 1;
                    r2 = r13 < 6 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c6c0;
                        continue;
                    }
                    r13 = r13 + -4;
                    writePages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff] = r13;
                    r20 = r0 + r0;
                case 0x3c6c0:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r3 = r0 + -1;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r2;
                    r2 = (r4&0xffffffffL) < (6&0xffffffffL) ? 1 : 0;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                        pc=0x3c708;
                        continue;
                    }
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    r3 = 5 << 16;
                    r2 = r4 << 2;
                    r3 = r3 + -22928;
                    r2 = r2 + r3;
                    r4 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r4;
                    return;
                case 0x3c700:
                    r21 = r0 + 18;
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r0;
                case 0x3c708:
                    r2 = (r21&0xffffffffL) < (24&0xffffffffL) ? 1 : 0;
                    r16 = r0 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r0;
                        pc=0x3c734;
                        continue;
                    }
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r0;
                    r3 = r0 + r0;
                case 0x3c71c:
                    r16 = r16 << 1;
                    r2 = r16 + 20;
                    r2 = ((r21 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x3c71c;
                        continue;
                    }
                    r3 = r3 + 1;
                    writePages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff] = r3;
                case 0x3c734:
                    r5 = readPages[(r30+68)>>>12][((r30+68)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3c740;
                    pc=0x40200;
                    run_40200(); return;
                case 0x3c740:
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r2;
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r2;
                    r22 = r2 + r0;
                    r2 = (r4&0xffffffffL) < (15&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c940;
                        run_3c800(); return;
                    }
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c940;
                        run_3c800(); return;
                    }
                    r10 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r9 = r4 + r0;
                    r6 = r18 + r0;
                    r7 = r19 + r0;
                    if(r10 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + 2;
                        pc=0x3d5c4;
                        run_3d400(); return;
                    }
                    r4 = r0 + 2;
                    r2 = r10 & 15;
                    r3 = 5 << 16;
                    r2 = r2 << 3;
                    r3 = r3 + -22832;
                    r2 = r2 + r3;
                    r16 = r10 >> 4;
                    f5 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f4 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r2 = r16 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7d0;
                        continue;
                    }
                    f2 = r19;
                    f3 = r18;
                    r1 = 5 << 16;
                    f1 = readPages[(r1+-22600)>>>12][((r1+-22600)>>>2)&0x3ff];
                    f0 = readPages[(r1+-22596)>>>12][((r1+-22596)>>>2)&0x3ff];
                    r16 = r16 & 15;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = r0 + 3;
                    r19 = f0;
                    r18 = f1;
                case 0x3c7d0:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c808;
                        run_3c800(); return;
                    }
                    r2 = 5 << 16;
                    r3 = r2 + -22632;
                case 0x3c7e0:
                    r2 = r16 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c7fc;
                        continue;
                    }
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                case 0x3c7fc:
                    r16 = r16 >> 1;
                case 0x3c800:
                    pc=0x3c800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3c800() throws ExecutionException { /* 0x3c800 - 0x3ca00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3c800:
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x3c7e0;
                        run_3c600(); return;
                    }
                    r3 = r3 + 8;
                case 0x3c808:
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f5 = (int)(l >>> 32); f4 = (int)l; }
                    r19 = f4;
                    r18 = f5;
                case 0x3c820:
                    r2 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c89c;
                        continue;
                    }
                    f1 = readPages[(r28+-31840)>>>12][((r28+-31840)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31836)>>>12][((r28+-31836)>>>2)&0x3ff];
                    f2 = r19;
                    f3 = r18;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c89c;
                        continue;
                    }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c89c;
                        continue;
                    }
                    r3 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c92c;
                        continue;
                    }
                    f1 = readPages[(r28+-31832)>>>12][((r28+-31832)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31828)>>>12][((r28+-31828)>>>2)&0x3ff];
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = r5 + -1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r3;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r5;
                    r4 = r4 + 1;
                    r19 = f0;
                    r18 = f1;
                case 0x3c89c:
                    f2 = r4;
                    f4 = r19;
                    f5 = r18;
                    { long l = Double.doubleToLongBits(((double)f2)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-31824)>>>12][((r28+-31824)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31820)>>>12][((r28+-31820)>>>2)&0x3ff];
                    r2 = 64704 << 16;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r5 = f0;
                    r4 = f1;
                    r4 = r2 + r4;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d37c;
                        run_3d200(); return;
                    }
                    f1 = readPages[(r28+-31816)>>>12][((r28+-31816)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31812)>>>12][((r28+-31812)>>>2)&0x3ff];
                    f2 = r5;
                    f3 = r4;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r0;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r0;
                    r19 = f0;
                    r18 = f1;
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3cbb0;
                        run_3ca00(); return;
                    }
                    f4 = r19;
                    f5 = r18;
                    { long l = Double.doubleToLongBits(-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb50;
                        run_3ca00(); return;
                    }
                case 0x3c92c:
                    r22 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r18 = r6 + r0;
                    r19 = r7 + r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r10;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r9;
                case 0x3c940:
                    r3 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    if(r3 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cbd0;
                        run_3ca00(); return;
                    }
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r4 < 15 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cbd0;
                        run_3ca00(); return;
                    }
                    r2 = 5 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + -22832;
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = r3 + r2;
                    f5 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f4 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    if(r5 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb10;
                        run_3ca00(); return;
                    }
                case 0x3c988:
                    r21 = r0 + 1;
                case 0x3c98c:
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))/(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r4 = fcsr;
                    r4 = fcsr;
                    r1 = r4 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f2 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f2 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f2 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r4;
                    r3 = f2;
                    { long l = Double.doubleToLongBits(((double)f2)); f3 = (int)(l >>> 32); f2 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    r2 = r3 + 48;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                        pc=0x3ca64;
                        run_3ca00(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    f1 = readPages[(r28+-31832)>>>12][((r28+-31832)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31828)>>>12][((r28+-31828)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r19 = f0;
                    r18 = f1;
                case 0x3ca00:
                    pc=0x3ca00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ca00() throws ExecutionException { /* 0x3ca00 - 0x3cc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ca00:
                    f0 = r0;
                    f1 = r0;
                    f6 = r19;
                    f7 = r18;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c98c;
                        run_3c800(); return;
                    }
                case 0x3ca24:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    r31=0x3ca30;
                    pc=0x40400;
                    run_40400(); return;
                case 0x3ca30:
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r12 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r13 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r12 + 1;
                    writePages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca58;
                        continue;
                    }
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r22;
                case 0x3ca58:
                    r2 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x3c4b0;
                    run_3c400(); return;
                case 0x3ca64:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca94;
                        continue;
                    }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))==(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca24;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca24;
                        continue;
                    }
                case 0x3ca94:
                    r22 = r22 + -1;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 57;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3cac0;
                        continue;
                    }
                case 0x3caa8:
                    r3 = r22 + r0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + 1;
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3ca24;
                    continue;
                case 0x3cac0:
                    r4 = r0 + 57;
                    r3 = r22 + r0;
                case 0x3cac8:
                    r2 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3caf4;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3cac8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3caa8;
                    continue;
                case 0x3caf4:
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r3 = r3 + 1;
                    r2 = r0 + 48;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3caa8;
                    continue;
                case 0x3cb10:
                    r12 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r12 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c988;
                        run_3c800(); return;
                    }
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r0;
                    if(r12 < 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r0;
                        pc=0x3cb50;
                        continue;
                    }
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r0;
                    f1 = readPages[(r28+-31816)>>>12][((r28+-31816)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31812)>>>12][((r28+-31812)>>>2)&0x3ff];
                    f2 = r19;
                    f3 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))<=(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3cbb0;
                        continue;
                    }
                case 0x3cb50:
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r5 = ~(r0 | r5);
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r5;
                case 0x3cb60:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3cb6c;
                    pc=0x40400;
                    run_40400(); return;
                case 0x3cb6c:
                    r4 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca24;
                        continue;
                    }
                    r5 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb9c;
                        continue;
                    }
                    if(r5 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb9c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3cb9c;
                    pc=0x40400;
                    run_40400(); return;
                case 0x3cb9c:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3cba8;
                    pc=0x40400;
                    run_40400(); return;
                case 0x3cba8:
                    /* Next insn is delay slot */ 
                    pc=0x3ca24;
                    continue;
                case 0x3cbb0:
                    r12 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r2 = r0 + 49;
                    addr=r12+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r22 = r12 + 1;
                    r13 = r13 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r13;
                    pc=0x3cb60;
                    continue;
                case 0x3cbd0:
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r5 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r4 = r4 < 2 ? 1 : 0;
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r2;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r0;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r4;
                        pc=0x3cc68;
                        run_3cc00(); return;
                    }
                    writePages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff] = r4;
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d35c;
                        run_3d200(); return;
                    }
                case 0x3cc00:
                    pc=0x3cc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3cc00() throws ExecutionException { /* 0x3cc00 - 0x3ce00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3cc00:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r16 = r2 + -1;
                    r4 = r3 - r16;
                    r2 = r3 < r16 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                        pc=0x3cc38;
                        continue;
                    }
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r4;
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r16 = r16 - r3;
                    r5 = r5 + r16;
                    r3 = r3 + r16;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r5;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r3;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r0;
                case 0x3cc38:
                    r21 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r21 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d348;
                        run_3d200(); return;
                    }
                case 0x3cc48:
                    r13 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r13 = r13 + r21;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r13;
                    r31=0x3cc60;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x3cc60:
                    r17 = r17 + r21;
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                case 0x3cc68:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc9c;
                        continue;
                    }
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc9c;
                        continue;
                    }
                    r2 = r20 < r17 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r21 = r17 + r0;
                        pc=0x3cc88;
                        continue;
                    }
                    r21 = r17 + r0;
                    r21 = r20 + r0;
                case 0x3cc88:
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = r20 - r21;
                    r2 = r2 - r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    r17 = r17 - r21;
                case 0x3cc9c:
                    r3 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd1c;
                        continue;
                    }
                    r4 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d338;
                        run_3d200(); return;
                    }
                    r5 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd04;
                        continue;
                    }
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r6 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3ccdc;
                    pc=0x41400;
                    run_41400(); return;
                case 0x3ccdc:
                    r5 = r2 + r0;
                    r6 = r23 + r0;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    r31=0x3ccf0;
                    pc=0x41000;
                    run_41000(); return;
                case 0x3ccf0:
                    r16 = r2 + r0;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3cd00;
                    pc=0x40400;
                    run_40400(); return;
                case 0x3cd00:
                    r23 = r16 + r0;
                case 0x3cd04:
                    r12 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r13 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r16 = r12 - r13;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d31c;
                        run_3d200(); return;
                    }
                case 0x3cd1c:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1;
                    r31=0x3cd28;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x3cd28:
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cd50;
                        continue;
                    }
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r2 + r0;
                    r31=0x3cd4c;
                    pc=0x41400;
                    run_41400(); return;
                case 0x3cd4c:
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                case 0x3cd50:
                    r3 = readPages[(r29+92)>>>12][((r29+92)>>>2)&0x3ff];
                    r16 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cda0;
                        continue;
                    }
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cda0;
                        continue;
                    }
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r18 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cda0;
                        continue;
                    }
                    r2 = 32752 << 16;
                    r2 = r18 & r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cda0;
                        continue;
                    }
                    r4 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = r17 + 1;
                    r4 = r4 + 1;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r16 = r0 + 1;
                case 0x3cda0:
                    r5 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r17 + 1;
                    if(r5 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2f0;
                        run_3d200(); return;
                    }
                case 0x3cdb0:
                    r21 = r2 & 31;
                    if(r21 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cdc4;
                        continue;
                    }
                    r2 = r0 + 32;
                    r21 = r2 - r21;
                case 0x3cdc4:
                    r2 = r21 < 5 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2d0;
                        run_3d200(); return;
                    }
                    r13 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r21 = r21 + -4;
                    r13 = r13 + r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r13;
                case 0x3cde0:
                    r20 = r20 + r21;
                    r17 = r17 + r21;
                case 0x3cde8:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    if(r3 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce0c;
                        run_3ce00(); return;
                    }
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                case 0x3ce00:
                    pc=0x3ce00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ce00() throws ExecutionException { /* 0x3ce00 - 0x3d000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ce00:
                    /* Next insn is delay slot */ 
                    r6 = r3 + r0;
                    r31=0x3ce08;
                    pc=0x41600;
                    run_41600(); return;
                case 0x3ce08:
                    r23 = r2 + r0;
                case 0x3ce0c:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce28;
                        continue;
                    }
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x3ce24;
                    pc=0x41600;
                    run_41600(); return;
                case 0x3ce24:
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                case 0x3ce28:
                    r4 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d260;
                        run_3d200(); return;
                    }
                case 0x3ce38:
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d208;
                        run_3d200(); return;
                    }
                case 0x3ce48:
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d1b4;
                        run_3d000(); return;
                    }
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce74;
                        continue;
                    }
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x3ce70;
                    pc=0x41600;
                    run_41600(); return;
                case 0x3ce70:
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                case 0x3ce74:
                    r3 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                        pc=0x3d170;
                        run_3d000(); return;
                    }
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r3;
                case 0x3ce84:
                    r18 = r19 & 1;
                    r21 = r0 + 1;
                    writePages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff] = r18;
                    r19 = r22 + r0;
                case 0x3ce94:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x3cea0;
                    pc=0x3c000;
                    run_3c000(); return;
                case 0x3cea0:
                    r5 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r2 + 48;
                    r31=0x3ceb0;
                    pc=0x41800;
                    run_41800(); return;
                case 0x3ceb0:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r6 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x3cec4;
                    pc=0x41a00;
                    run_41a00(); return;
                case 0x3cec4:
                    r17 = r2 + r0;
                    r2 = readPages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff];
                    r20 = r0 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d15c;
                        run_3d000(); return;
                    }
                case 0x3ced8:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x3cee4;
                    pc=0x40400;
                    run_40400(); return;
                case 0x3cee4:
                    if(r20 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf0c;
                        continue;
                    }
                    r13 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r13 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf0c;
                        continue;
                    }
                    r2 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d140;
                        run_3d000(); return;
                    }
                case 0x3cf0c:
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0dc;
                        run_3d000(); return;
                    }
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf3c;
                        continue;
                    }
                    r4 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cf3c;
                        continue;
                    }
                    r5 = readPages[(r29+88)>>>12][((r29+88)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0dc;
                        run_3d000(); return;
                    }
                case 0x3cf3c:
                    if(r20 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0b4;
                        run_3d000(); return;
                    }
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        r19 = r19 + 1;
                        pc=0x3cfd8;
                        continue;
                    }
                    r19 = r19 + 1;
                    r4 = r30 + r0;
                    r5 = r23 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3cf6c;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3cf6c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    if(r3 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3cfb8;
                        continue;
                    }
                    r5 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3cf94;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3cf94:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r2;
                    r31=0x3cfac;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3cfac:
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                case 0x3cfb0:
                    /* Next insn is delay slot */ 
                    r21 = r21 + 1;
                    pc=0x3ce94;
                    continue;
                case 0x3cfb8:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3cfcc;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3cfcc:
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r2;
                    pc=0x3cfb0;
                    continue;
                case 0x3cfd8:
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x3cfe8;
                    pc=0x41600;
                    run_41600(); return;
                case 0x3cfe8:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    r31=0x3cff8;
                    pc=0x41800;
                    run_41800(); return;
                case 0x3cff8:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d07c;
                        run_3d000(); return;
                    }
                case 0x3d000:
                    pc=0x3d000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d000() throws ExecutionException { /* 0x3d000 - 0x3d200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d000:
                    r22 = r22 + -1;
                    addr=r22+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 57;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d02c;
                        continue;
                    }
                case 0x3d014:
                    r3 = r22 + r0;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r22 = r22 + 1;
                    r2 = r2 + 1;
                case 0x3d024:
                    /* Next insn is delay slot */ 
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3cb60;
                    run_3ca00(); return;
                case 0x3d02c:
                    r4 = r0 + 57;
                    r3 = r22 + r0;
                case 0x3d034:
                    r12 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    if(r22 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x3d060;
                        continue;
                    }
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3d034;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d014;
                    continue;
                case 0x3d060:
                    r13 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r3 = readPages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff];
                    r13 = r13 + 1;
                    r2 = r0 + 49;
                    r22 = r3 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r13;
                    pc=0x3d024;
                    continue;
                case 0x3d07c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d090;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d000;
                        continue;
                    }
                case 0x3d090:
                    r4 = r0 + 48;
                    r3 = r22 + r0;
                case 0x3d098:
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3d098;
                        continue;
                    }
                case 0x3d0ac:
                    /* Next insn is delay slot */ 
                    r22 = r22 + 1;
                    pc=0x3cb60;
                    run_3ca00(); return;
                case 0x3d0b4:
                    r12 = r0 + 57;
                    if(r18 == r12) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0cc;
                        continue;
                    }
                    r2 = r18 + 1;
                    /* Next insn is delay slot */ 
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3d0ac;
                    continue;
                case 0x3d0cc:
                    r13 = r0 + 57;
                    r22 = r22 + 1;
                    /* Next insn is delay slot */ 
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r13&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3d000;
                    continue;
                case 0x3d0dc:
                    if(r20 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d11c;
                        continue;
                    }
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x3d0f4;
                    pc=0x41600;
                    run_41600(); return;
                case 0x3d0f4:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    r31=0x3d104;
                    pc=0x41800;
                    run_41800(); return;
                case 0x3d104:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d124;
                        continue;
                    }
                case 0x3d10c:
                    r18 = r18 + 1;
                    r2 = r0 + 58;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0cc;
                        continue;
                    }
                case 0x3d11c:
                    /* Next insn is delay slot */ 
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3d0ac;
                    continue;
                case 0x3d124:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d11c;
                        continue;
                    }
                    r2 = r18 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d11c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3d10c;
                    continue;
                case 0x3d140:
                    r3 = r0 + 57;
                    if(r18 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3d0cc;
                        continue;
                    }
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d11c;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r18 = r18 + 1;
                    pc=0x3d11c;
                    continue;
                case 0x3d15c:
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r17 + r0;
                    r31=0x3d168;
                    pc=0x41800;
                    run_41800(); return;
                case 0x3d168:
                    /* Next insn is delay slot */ 
                    r20 = r2 + r0;
                    pc=0x3ced8;
                    run_3ce00(); return;
                case 0x3d170:
                    r5 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x3d17c;
                    pc=0x40200;
                    run_40200(); return;
                case 0x3d17c:
                    r12 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r4 = r2 + 12;
                    r6 = readPages[(r12+16)>>>12][((r12+16)>>>2)&0x3ff];
                    r5 = r12 + 12;
                    r6 = r6 << 2;
                    r6 = r6 + 8;
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    r31=0x3d19c;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x3d19c:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 1;
                    r31=0x3d1ac;
                    pc=0x41600;
                    run_41600(); return;
                case 0x3d1ac:
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    pc=0x3ce84;
                    run_3ce00(); return;
                case 0x3d1b4:
                    r21 = r0 + 1;
                    r16 = r22 + -1;
                case 0x3d1bc:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x3d1c8;
                    pc=0x3c000;
                    run_3c000(); return;
                case 0x3d1c8:
                    r18 = r2 + 48;
                    r16 = r16 + 1;
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r18&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r22 = r22 + 1;
                    r2 = r21 < r5 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cfd8;
                        run_3ce00(); return;
                    }
                    r5 = r23 + r0;
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3d1fc;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3d1fc:
                    r23 = r2 + r0;
                case 0x3d200:
                    pc=0x3d200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d200() throws ExecutionException { /* 0x3d200 - 0x3d400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d200:
                    /* Next insn is delay slot */ 
                    r21 = r21 + 1;
                    pc=0x3d1bc;
                    run_3d000(); return;
                case 0x3d208:
                    r3 = readPages[(r29+152)>>>12][((r29+152)>>>2)&0x3ff];
                    r2 = r3 < 3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce48;
                        run_3ce00(); return;
                    }
                    r4 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cb50;
                        run_3ca00(); return;
                    }
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 5;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3d240;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3d240:
                    r5 = r2 + r0;
                    r4 = r23 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r2;
                    r31=0x3d250;
                    pc=0x41800;
                    run_41800(); return;
                case 0x3d250:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cbb0;
                        run_3ca00(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3cb50;
                    run_3ca00(); return;
                case 0x3d260:
                    r5 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r23 + r0;
                    r31=0x3d26c;
                    pc=0x41800;
                    run_41800(); return;
                case 0x3d26c:
                    if(r2 >= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ce38;
                        run_3ce00(); return;
                    }
                    r5 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r5 = r5 + -1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r5;
                    r6 = r0 + 10;
                    r5 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3d294;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3d294:
                    r12 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = r2 + r0;
                    if(r12 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d2b4;
                        continue;
                    }
                case 0x3d2a4:
                    r13 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r13;
                    pc=0x3ce38;
                    run_3ce00(); return;
                case 0x3d2b4:
                    r5 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    r6 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3d2c8;
                    pc=0x40600;
                    run_40600(); return;
                case 0x3d2c8:
                    /* Next insn is delay slot */ 
                    writePages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff] = r2;
                    pc=0x3d2a4;
                    continue;
                case 0x3d2d0:
                    r2 = r21 < 4 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cde8;
                        run_3cc00(); return;
                    }
                    r2 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r21 = r21 + 28;
                    r2 = r2 + r21;
                    /* Next insn is delay slot */ 
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r2;
                    pc=0x3cde0;
                    run_3cc00(); return;
                case 0x3d2f0:
                    r12 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r2 = readPages[(r12+16)>>>12][((r12+16)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r12;
                    r4 = readPages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3d314;
                    pc=0x40a00;
                    run_40a00(); return;
                case 0x3d314:
                    /* Next insn is delay slot */ 
                    r2 = r17 - r2;
                    pc=0x3cdb0;
                    run_3cc00(); return;
                case 0x3d31c:
                    r4 = r30 + r0;
                    r5 = r23 + r0;
                    r6 = r16 + r0;
                case 0x3d328:
                    /* Next insn is delay slot */ 
                    r31=0x3d330;
                    pc=0x41400;
                    run_41400(); return;
                case 0x3d330:
                    /* Next insn is delay slot */ 
                    r23 = r2 + r0;
                    pc=0x3cd1c;
                    run_3cc00(); return;
                case 0x3d338:
                    r6 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r23 + r0;
                    pc=0x3d328;
                    continue;
                case 0x3d348:
                    r12 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r20 = r12 - r21;
                    /* Next insn is delay slot */ 
                    r21 = r0 + r0;
                    pc=0x3cc48;
                    run_3cc00(); return;
                case 0x3d35c:
                    r13 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                    r21 = r3 + 1075;
                    if(r13 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3cc48;
                        run_3cc00(); return;
                    }
                    r2 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r3 = r0 + 54;
                    /* Next insn is delay slot */ 
                    r21 = r3 - r2;
                    pc=0x3cc48;
                    run_3cc00(); return;
                case 0x3d37c:
                    r2 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d4a4;
                        run_3d400(); return;
                    }
                    r12 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r2 = 5 << 16;
                    r3 = r12 << 3;
                    r2 = r2 + -22832;
                    r3 = r3 + r2;
                    f3 = readPages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff];
                    f2 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    f1 = readPages[(r28+-31808)>>>12][((r28+-31808)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31804)>>>12][((r28+-31804)>>>2)&0x3ff];
                    f5 = readPages[(r28+-31840)>>>12][((r28+-31840)>>>2)&0x3ff];
                    f4 = readPages[(r28+-31836)>>>12][((r28+-31836)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))/(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f2 = r5;
                    f3 = r4;
                    r21 = r0 + r0;
                    r8 = r22 + r0;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))-(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-31832)>>>12][((r28+-31832)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31828)>>>12][((r28+-31828)>>>2)&0x3ff];
                    r5 = f0;
                    r4 = f1;
                case 0x3d3e0:
                    f0 = r19;
                    f1 = r18;
                    f6 = r19;
                    f7 = r18;
                    r12 = fcsr;
                    r12 = fcsr;
                    r1 = r12 | 3;
                case 0x3d400:
                    pc=0x3d400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d400() throws ExecutionException { /* 0x3d400 - 0x3d600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d400:
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r12;
                    r3 = f0;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f6 = r5;
                    f7 = r4;
                    r2 = r3 + 48;
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))) ? 0x800000 : 0x000000);
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r19 = f0;
                    r18 = f1;
                    r22 = r22 + 1;
                    r8 = r8 + 1;
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca24;
                        run_3ca00(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca94;
                        run_3ca00(); return;
                    }
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = r21 + 1;
                    r2 = r21 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c92c;
                        run_3c800(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))); f7 = (int)(l >>> 32); f6 = (int)l; }
                    r5 = f0;
                    r4 = f1;
                    r19 = f6;
                    r18 = f7;
                    /* Next insn is delay slot */ 
                    pc=0x3d3e0;
                    run_3d200(); return;
                case 0x3d4a4:
                    r3 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    f2 = r5;
                    f3 = r4;
                    r2 = r3 << 3;
                    r3 = 5 << 16;
                    r3 = r3 + -22832;
                    r2 = r2 + r3;
                    f1 = readPages[(r2+-8)>>>12][((r2+-8)>>>2)&0x3ff];
                    f0 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    r21 = r0 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    f3 = readPages[(r28+-31832)>>>12][((r28+-31832)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31828)>>>12][((r28+-31828)>>>2)&0x3ff];
                    r8 = r22 + r0;
                    r5 = f0;
                    r4 = f1;
                case 0x3d4e4:
                    f0 = r19;
                    f1 = r18;
                    f4 = r19;
                    f5 = r18;
                    r12 = fcsr;
                    r12 = fcsr;
                    r1 = r12 | 3;
                    r1 = r1 ^ 2;
                    fcsr = r1;
                    switch(fcsr & 3) {
                        case 0: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))+0.5); break; // Round to nearest
                        case 1: f0 = (int)(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL))); break; // Round towards zero
                        case 2: f0 = (int)Math.ceil((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards plus infinity
                        case 3: f0 = (int)Math.floor((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); break; // Round towards minus infinity
                    }
                    fcsr = r12;
                    r3 = f0;
                    { long l = Double.doubleToLongBits(((double)f0)); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = r3 + 48;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))-(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r2 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = f0;
                    r18 = f1;
                    r22 = r22 + 1;
                    if(r21 == r2) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 1;
                        pc=0x3d560;
                        continue;
                    }
                    r8 = r8 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))*(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r21 = r21 + 1;
                    r19 = f0;
                    r18 = f1;
                    /* Next insn is delay slot */ 
                    pc=0x3d4e4;
                    continue;
                case 0x3d560:
                    f3 = readPages[(r28+-31808)>>>12][((r28+-31808)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31804)>>>12][((r28+-31804)>>>2)&0x3ff];
                    f4 = r5;
                    f5 = r4;
                    f6 = r19;
                    f7 = r18;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))+(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))<(Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (1!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3ca94;
                        run_3ca00(); return;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))-(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    fcsr = (fcsr&~0x800000) | (((Double.longBitsToDouble(((f7&0xffffffffL) << 32) | (f6&0xffffffffL)))<(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))) ? 0x800000 : 0x000000);
                    if(((fcsr&0x800000)!=0) == (0!=0)) {
                        /* Next insn is delay slot */ 
                        pc=0x3c92c;
                        run_3c800(); return;
                    }
                    r4 = r0 + 48;
                    r3 = r22 + r0;
                case 0x3d5a8:
                    r3 = r3 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r22 = r22 + -1;
                    if(r2 == r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3d5a8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r22 + 1;
                    pc=0x3ca24;
                    run_3ca00(); return;
                case 0x3d5c4:
                    r2 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r20 = r0 - r2;
                    if(r20 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c820;
                        run_3c800(); return;
                    }
                    r2 = r20 & 15;
                    r3 = 5 << 16;
                    r2 = r2 << 3;
                    r3 = r3 + -22832;
                    r2 = r2 + r3;
                    f2 = r19;
                    f3 = r18;
                    f1 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    f0 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r16 = r20 >> 4;
                case 0x3d600:
                    pc=0x3d600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d600() throws ExecutionException { /* 0x3d600 - 0x3d800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d600:
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r19 = f0;
                    r18 = f1;
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c820;
                        run_3c800(); return;
                    }
                    r2 = 5 << 16;
                    r3 = r2 + -22632;
                case 0x3d61c:
                    r2 = r16 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d648;
                        continue;
                    }
                    f4 = r19;
                    f5 = r18;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r4 = r4 + 1;
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r19 = f0;
                    r18 = f1;
                case 0x3d648:
                    r16 = r16 >> 1;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 8;
                        pc=0x3d61c;
                        continue;
                    }
                    r3 = r3 + 8;
                    /* Next insn is delay slot */ 
                    pc=0x3c820;
                    run_3c800(); return;
                case 0x3d65c:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x3d660:
                    r5 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    if(r5 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d684;
                        continue;
                    }
                case 0x3d670:
                    r21 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    /* Next insn is delay slot */ 
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    pc=0x3c708;
                    run_3c600(); return;
                case 0x3d684:
                    r12 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff] = r12;
                    pc=0x3d670;
                    continue;
                case 0x3d690:
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r0;
                case 0x3d694:
                    r13 = readPages[(r29+156)>>>12][((r29+156)>>>2)&0x3ff];
                    r3 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r2 = r13 + r3;
                    r21 = r2 + 1;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r21;
                    if(r21 > 0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                        pc=0x3c708;
                        run_3c600(); return;
                    }
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r21 = r0 + 1;
                    pc=0x3c708;
                    run_3c600(); return;
                case 0x3d6bc:
                    r3 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    r3 = r3 - r4;
                    r5 = r0 - r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r5;
                    pc=0x3c688;
                    run_3c600(); return;
                case 0x3d6dc:
                    r16 = r0 - r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r17 = r0 + r0;
                    pc=0x3c66c;
                    run_3c600(); return;
                case 0x3d6ec:
                    r2 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r5 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r4 = r5 + r2;
                    r21 = r4 + 1074;
                    r2 = r21 < 33 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d764;
                        continue;
                    }
                    r3 = r0 - r21;
                    r2 = r4 + 1042;
                    r3 = r18 << (r3&0x1f);
                    r2 = r19 >>> (r2&0x1f);
                    r2 = r3 | r2;
                case 0x3d720:
                    f0 = r2;
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                        pc=0x3d750;
                        continue;
                    }
                    { long l = Double.doubleToLongBits(((double)f0)); f3 = (int)(l >>> 32); f2 = (int)l; }
                case 0x3d730:
                    r7 = f2;
                    r6 = f3;
                    r2 = 65040 << 16;
                    r6 = r2 + r6;
                    r2 = r0 + 1;
                    r21 = r21 + -1075;
                    /* Next insn is delay slot */ 
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r2;
                    pc=0x3c53c;
                    run_3c400(); return;
                case 0x3d750:
                    f1 = readPages[(r28+-31880)>>>12][((r28+-31880)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31876)>>>12][((r28+-31876)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))+(Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))); f3 = (int)(l >>> 32); f2 = (int)l; }
                    pc=0x3d730;
                    continue;
                case 0x3d764:
                    r2 = r0 - r21;
                    /* Next insn is delay slot */ 
                    r2 = r19 << (r2&0x1f);
                    pc=0x3d720;
                    continue;
                case 0x3d770:
                    r3 = readPages[(r29+160)>>>12][((r29+160)>>>2)&0x3ff];
                    r2 = r0 + 9999;
                    if(r19 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                        pc=0x3d7d0;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r2 = r18 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d7d0;
                        continue;
                    }
                    r2 = 5 << 16;
                    r22 = r2 + -22940;
                case 0x3d79c:
                    r4 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3c4ac;
                        run_3c400(); return;
                    }
                    addr=r22+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    r3 = r22 + 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3d7c0;
                        continue;
                    }
                    r3 = r22 + 3;
                case 0x3d7c0:
                    r5 = readPages[(r29+168)>>>12][((r29+168)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    pc=0x3c4ac;
                    run_3c400(); return;
                case 0x3d7d0:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r22 = r2 + -19388;
                    pc=0x3d79c;
                    continue;
                case 0x3d7dc:
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    r3 = r0 + 1;
                    r18 = r2 & r18;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x3c454;
                    run_3c400(); return;
                case 0x3d7f4:
                    r2 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r2;
                case 0x3d800:
                    pc=0x3d800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3d800() throws ExecutionException { /* 0x3d800 - 0x3da00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3d800:
                    r3 = readPages[(r4+68)>>>12][((r4+68)>>>2)&0x3ff];
                    r2 = r0 + 1;
                    r2 = r2 << (r3&0x1f);
                    /* Next insn is delay slot */ 
                    writePages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff] = r2;
                    r31=0x3d814;
                    pc=0x40400;
                    run_40400(); return;
                case 0x3d814:
                    /* Next insn is delay slot */ 
                    writePages[(r30+64)>>>12][((r30+64)>>>2)&0x3ff] = r0;
                    pc=0x3c448;
                    run_3c400(); return;
                case 0x3da00:
                    pc=0x3da00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3da00() throws ExecutionException { /* 0x3da00 - 0x3dc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3da00:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -1048;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff] = r31;
                    r6 = r29 + 1056;
                    r7 = r0 + -4;
                    r5 = r29 + 20;
                case 0x3da20:
                    r2 = r6 + 3;
                    r2 = r2 & r7;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r6 = r2 + 4;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 4;
                        pc=0x3da20;
                        continue;
                    }
                    r5 = r5 + 4;
                    r2 = readPages[(r28+-31800)>>>12][((r28+-31800)>>>2)&0x3ff];
                    r5 = r29 + 16;
                    r6 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r31=0x3da50;
                    pc=0x38000;
                    run_38000(); return;
                case 0x3da50:
                    r31 = readPages[(r29+1040)>>>12][((r29+1040)>>>2)&0x3ff];
                    r29 = r29 + 1048;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3dc00:
                    pc=0x3dc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3dc00() throws ExecutionException { /* 0x3dc00 - 0x3de00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3dc00:
                    r29 = r29 + -48;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r19 = r5 + r0;
                    r5 = r6 + r0;
                    r6 = r29 + 16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r18 = r4 + r0;
                    r31=0x3dc2c;
                    pc=0x3e000;
                    run_3e000(); return;
                case 0x3dc2c:
                    r17 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3dcf4;
                        continue;
                    }
                    r2 = r0 + r0;
                    r4 = r18 + r0;
                    r5 = r19 + r0;
                    r6 = r0 + 3;
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x3dc4c;
                    pc=0x2e3d0;
                    run_2e200(); return;
                case 0x3dc4c:
                    r16 = r2 + r0;
                    if(r16 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3dcf4;
                        continue;
                    }
                    r2 = r0 + r0;
                    r3 = r16 & 3;
                    r2 = r0 + 2;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3dc7c;
                        continue;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r2 & 3;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3dd10;
                        continue;
                    }
                case 0x3dc7c:
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x3dc84;
                    pc=0x20e00;
                    run_20e00(); return;
                case 0x3dc84:
                    r4 = r2 + r0;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3dcf4;
                        continue;
                    }
                    r2 = r0 + r0;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r17&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dcb8;
                        continue;
                    }
                    r2 = r16 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3dcb8;
                        continue;
                    }
                    r2 = r17 | 256;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x3dcb8:
                    r2 = 2 << 16;
                    r3 = 2 << 16;
                    r2 = r2 + 26112;
                    r3 = r3 + 26624;
                    writePages[(r4+32)>>>12][((r4+32)>>>2)&0x3ff] = r2;
                    writePages[(r4+36)>>>12][((r4+36)>>>2)&0x3ff] = r3;
                    r2 = 2 << 16;
                    r3 = 2 << 16;
                    r2 = r2 + 27136;
                    r3 = r3 + 27648;
                    writePages[(r4+40)>>>12][((r4+40)>>>2)&0x3ff] = r2;
                    addr=r4+14;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r19&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r4+28)>>>12][((r4+28)>>>2)&0x3ff] = r4;
                    writePages[(r4+44)>>>12][((r4+44)>>>2)&0x3ff] = r3;
                    r2 = r4 + r0;
                case 0x3dcf4:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x3dd10:
                    r2 = r0 + 9;
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x3dcf4;
                    continue;
                case 0x3de00:
                    pc=0x3de00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3de00() throws ExecutionException { /* 0x3de00 - 0x3e000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3de00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3de20;
                    pc=0x3dc00;
                    run_3dc00(); return;
                case 0x3de20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3e000:
                    pc=0x3e000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e000() throws ExecutionException { /* 0x3e000 - 0x3e200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e000:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 114;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e0a8;
                        continue;
                    }
                    r2 = r3 < 115 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e08c;
                        continue;
                    }
                    r2 = r0 + 97;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e038;
                        continue;
                    }
                case 0x3e028:
                    r2 = r0 + 22;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x3e038:
                    r8 = r0 + 264;
                    r7 = r0 + 1;
                    r4 = r0 + 520;
                case 0x3e044:
                    addr=r5+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e070;
                        continue;
                    }
                    r3 = r0 + 43;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3e080;
                        continue;
                    }
                    addr=r5+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r2 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x3e080;
                        continue;
                    }
                case 0x3e070:
                    r2 = r7 | r4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r2 = r8 + r0;
                    pc=r31;
                    return;
                case 0x3e080:
                    r8 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r7 = r0 + 2;
                    pc=0x3e070;
                    continue;
                case 0x3e08c:
                    r2 = r0 + 119;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3e028;
                        continue;
                    }
                    r8 = r0 + 8;
                    r7 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r4 = r0 + 1536;
                    pc=0x3e044;
                    continue;
                case 0x3e0a8:
                    r8 = r0 + 4;
                    r7 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x3e044;
                    continue;
                case 0x3e200:
                    pc=0x3e200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e200() throws ExecutionException { /* 0x3e200 - 0x3e400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e200:
                    r29 = r29 + -48;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r16 = r5 + r0;
                    r31=0x3e218;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x3e218:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r3 = r0 + 1;
                    r2 = r29 + 32;
                    r4 = r16 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r31=0x3e23c;
                    pc=0x3e400;
                    run_3e400(); return;
                case 0x3e23c:
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r16 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x3e400:
                    pc=0x3e400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e400() throws ExecutionException { /* 0x3e400 - 0x3e600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e400:
                    r29 = r29 + -56;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r17 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r21 = r5 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3e4f4;
                        continue;
                    }
                    r3 = r0 + r0;
                    addr=r4+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    r2 = r3 & 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e460;
                        continue;
                    }
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e478;
                        continue;
                    }
                case 0x3e460:
                    /* Next insn is delay slot */ 
                    r31=0x3e468;
                    pc=0x2dc00;
                    run_2dc00(); return;
                case 0x3e468:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x3e4f4;
                        continue;
                    }
                    r3 = r0 + -1;
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                case 0x3e478:
                    r4 = r3 & 65535;
                    r2 = r4 & 2;
                    r18 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + r0;
                        pc=0x3e538;
                        continue;
                    }
                    r17 = r0 + r0;
                case 0x3e48c:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e4ac;
                        continue;
                    }
                    r2 = r18 + r0;
                case 0x3e498:
                    r17 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 8;
                        pc=0x3e498;
                        continue;
                    }
                    r2 = r2 + 8;
                case 0x3e4ac:
                    r2 = (r17&0xffffffffL) < (1025&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r17 + r0;
                        pc=0x3e4bc;
                        continue;
                    }
                    r6 = r17 + r0;
                    r6 = r0 + 1024;
                case 0x3e4bc:
                    r2 = readPages[(r20+36)>>>12][((r20+36)>>>2)&0x3ff];
                    r4 = readPages[(r20+28)>>>12][((r20+28)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    pc=r2;
                    r31=0x3e4cc;
                    return;
                case 0x3e4cc:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x3e524;
                        continue;
                    }
                    r16 = r2 + r0;
                    r19 = r19 + r2;
                    r17 = r17 - r2;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r2 = r2 - r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                        pc=0x3e48c;
                        continue;
                    }
                    writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                case 0x3e4f0:
                    r3 = r0 + r0;
                case 0x3e4f4:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x3e524:
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r3 = r0 + -1;
                    r2 = r2 | 64;
                    /* Next insn is delay slot */ 
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x3e4f4;
                    continue;
                case 0x3e538:
                    r2 = r4 & 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r18 + r0;
                        pc=0x3e6a8;
                        run_3e600(); return;
                    }
                    r22 = r18 + r0;
                    r22 = r0 + r0;
                case 0x3e548:
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e56c;
                        continue;
                    }
                    r22 = r0 + r0;
                    r2 = r18 + r0;
                case 0x3e558:
                    r17 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r19 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    r18 = r18 + 8;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 8;
                        pc=0x3e558;
                        continue;
                    }
                    r2 = r2 + 8;
                case 0x3e56c:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e680;
                        run_3e600(); return;
                    }
                case 0x3e574:
                    r2 = ((r17 & 0xffffffffL) < (r23 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r23 + r0;
                        pc=0x3e584;
                        continue;
                    }
                    r3 = r23 + r0;
                    r3 = r17 + r0;
                case 0x3e584:
                    r2 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r5 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r16 = r2 + r5;
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e5b4;
                        continue;
                    }
                    r2 = r16 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e650;
                        run_3e600(); return;
                    }
                case 0x3e5b4:
                    r2 = r3 < r5 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r5 + r0;
                        pc=0x3e620;
                        run_3e600(); return;
                    }
                    r16 = r5 + r0;
                    r2 = readPages[(r20+36)>>>12][((r20+36)>>>2)&0x3ff];
                    r4 = readPages[(r20+28)>>>12][((r20+28)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    pc=r2;
                    r31=0x3e5d4;
                    return;
                case 0x3e5d4:
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x3e524;
                        continue;
                    }
                    r16 = r2 + r0;
                case 0x3e5dc:
                    r23 = r23 - r16;
                    if(r23 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e608;
                        run_3e600(); return;
                    }
                case 0x3e5e8:
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r19 = r19 + r16;
                    r2 = r2 - r16;
                    r17 = r17 - r16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                        pc=0x3e548;
                        continue;
                    }
                    writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                case 0x3e600:
                    pc=0x3e600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e600() throws ExecutionException { /* 0x3e600 - 0x3e800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e600:
                    /* Next insn is delay slot */ 
                    pc=0x3e4f0;
                    run_3e400(); return;
                case 0x3e608:
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x3e610;
                    pc=0x20600;
                    run_20600(); return;
                case 0x3e610:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e524;
                        run_3e400(); return;
                    }
                    /* Next insn is delay slot */ 
                    r22 = r0 + r0;
                    pc=0x3e5e8;
                    run_3e400(); return;
                case 0x3e620:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r6 = r3 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r16 = r3 + r0;
                    r31=0x3e634;
                    pc=0x40000;
                    run_40000(); return;
                case 0x3e634:
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r3 = r3 - r16;
                    r2 = r2 + r16;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    pc=0x3e5dc;
                    run_3e400(); return;
                case 0x3e650:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x3e65c;
                    pc=0x40000;
                    run_40000(); return;
                case 0x3e65c:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r3 = r3 + r16;
                    /* Next insn is delay slot */ 
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r31=0x3e670;
                    pc=0x20600;
                    run_20600(); return;
                case 0x3e670:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e5dc;
                        run_3e400(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3e524;
                    run_3e400(); return;
                case 0x3e680:
                    r4 = r19 + r0;
                    r5 = r0 + 10;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x3e690;
                    pc=0x24a00;
                    run_24a00(); return;
                case 0x3e690:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r23 = r17 + 1;
                        pc=0x3e6a0;
                        continue;
                    }
                    r23 = r17 + 1;
                    r2 = r2 - r19;
                    r23 = r2 + 1;
                case 0x3e6a0:
                    /* Next insn is delay slot */ 
                    r22 = r0 + 1;
                    pc=0x3e574;
                    run_3e400(); return;
                case 0x3e6a8:
                    r17 = readPages[(r22+4)>>>12][((r22+4)>>>2)&0x3ff];
                    r19 = readPages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff];
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r22 = r22 + 8;
                        pc=0x3e6a8;
                        continue;
                    }
                    r22 = r22 + 8;
                case 0x3e6b8:
                    r3 = r3 & 65535;
                    r2 = r3 & 512;
                    r16 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e78c;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6e4;
                        continue;
                    }
                    r2 = r3 & 128;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e74c;
                        continue;
                    }
                case 0x3e6e4:
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6f4;
                        continue;
                    }
                    r16 = r17 + r0;
                case 0x3e6f4:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    r31=0x3e704;
                    pc=0x40000;
                    run_40000(); return;
                case 0x3e704:
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r3 = r3 - r16;
                    r2 = r2 + r16;
                case 0x3e714:
                    r16 = r17 + r0;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r3;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                case 0x3e720:
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r19 = r19 + r16;
                    r2 = r2 - r16;
                    r17 = r17 - r16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                        pc=0x3e4f0;
                        run_3e400(); return;
                    }
                    writePages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff] = r2;
                    addr=r20+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r3 = tmp;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e6b8;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3e6a8;
                    continue;
                case 0x3e74c:
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r4 = readPages[(r20+84)>>>12][((r20+84)>>>2)&0x3ff];
                    r16 = r2 - r5;
                    r18 = r16 + r17;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x3e768;
                    pc=0x42800;
                    run_42800(); return;
                case 0x3e768:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e524;
                        run_3e400(); return;
                    }
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                    r2 = r2 + r16;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r18;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r16 = r17 + r0;
                    pc=0x3e6e4;
                    continue;
                case 0x3e78c:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e7b0;
                        continue;
                    }
                    r2 = ((r16 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e80c;
                        run_3e800(); return;
                    }
                case 0x3e7b0:
                    r16 = readPages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff];
                    r2 = ((r17 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e7e8;
                        continue;
                    }
                    r2 = readPages[(r20+36)>>>12][((r20+36)>>>2)&0x3ff];
                    r4 = readPages[(r20+28)>>>12][((r20+28)>>>2)&0x3ff];
                    r6 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r19 + r0;
                    pc=r2;
                    r31=0x3e7d8;
                    return;
                case 0x3e7d8:
                    if(r2 > 0) {
                        /* Next insn is delay slot */ 
                        r16 = r2 + r0;
                        pc=0x3e720;
                        continue;
                    }
                    r16 = r2 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3e524;
                    run_3e400(); return;
                case 0x3e7e8:
                    r4 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r17 + r0;
                    r31=0x3e7f8;
                    pc=0x40000;
                    run_40000(); return;
                case 0x3e7f8:
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    r2 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                case 0x3e800:
                    pc=0x3e800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3e800() throws ExecutionException { /* 0x3e800 - 0x3ea00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3e800:
                    r3 = r3 - r17;
                    /* Next insn is delay slot */ 
                    r2 = r2 + r17;
                    pc=0x3e714;
                    run_3e600(); return;
                case 0x3e80c:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x3e818;
                    pc=0x40000;
                    run_40000(); return;
                case 0x3e818:
                    r3 = readPages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    r3 = r3 + r16;
                    /* Next insn is delay slot */ 
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r3;
                    r31=0x3e82c;
                    pc=0x20600;
                    run_20600(); return;
                case 0x3e82c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3e720;
                        run_3e600(); return;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x3e524;
                    run_3e400(); return;
                case 0x3ea00:
                    pc=0x3ea00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ea00() throws ExecutionException { /* 0x3ea00 - 0x3ec00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ea00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3ea20;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3ea20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ec00:
                    pc=0x3ec00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ec00() throws ExecutionException { /* 0x3ec00 - 0x3ee00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ec00:
                    r29 = r29 + -32;
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r6 = r29 + 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3ec1c;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3ec1c:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3ee00:
                    pc=0x3ee00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3ee00() throws ExecutionException { /* 0x3ee00 - 0x3f000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3ee00:
                    r29 = r29 + -56;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r23;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r31;
                    r21 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r22 = r4 + r0;
                    r23 = r6 + r0;
                    /* Next insn is delay slot */ 
                    r31=0x3ee3c;
                    pc=0x46e00;
                    run_46e00(); return;
                case 0x3ee3c:
                    r5 = readPages[(r28+-31796)>>>12][((r28+-31796)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eefc;
                        continue;
                    }
                    addr=r21+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r19 = r0 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee94;
                        continue;
                    }
                    r2 = r0 + 61;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee94;
                        continue;
                    }
                    r4 = r0 + 61;
                    r2 = r21 + r0;
                case 0x3ee78:
                    r2 = r2 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r19 = r19 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee94;
                        continue;
                    }
                    if(r3 != r4) {
                        /* Next insn is delay slot */ 
                        pc=0x3ee78;
                        continue;
                    }
                case 0x3ee94:
                    r17 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eefc;
                        continue;
                    }
                    r20 = r0 + 61;
                    r16 = r17 + r0;
                case 0x3eeb4:
                    r4 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r5 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r19 + r0;
                    r31=0x3eec4;
                    pc=0x44c00;
                    run_44c00(); return;
                case 0x3eec4:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eee8;
                        continue;
                    }
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r18 = r2 + r19;
                    addr=r18+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    if(r3 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x3ef34;
                        continue;
                    }
                case 0x3eee8:
                    r16 = r16 + 4;
                    r2 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r17 = r17 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3eeb4;
                        continue;
                    }
                case 0x3eefc:
                    /* Next insn is delay slot */ 
                    r4 = r22 + r0;
                    r31=0x3ef04;
                    pc=0x47000;
                    run_47000(); return;
                case 0x3ef04:
                    r2 = r0 + r0;
                case 0x3ef08:
                    r31 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r23 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x3ef34:
                    r3 = readPages[(r28+-31796)>>>12][((r28+-31796)>>>2)&0x3ff];
                    r4 = r22 + r0;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r2 = r17 - r2;
                    r2 = r2 >> 2;
                    /* Next insn is delay slot */ 
                    writePages[(r23+0)>>>12][((r23+0)>>>2)&0x3ff] = r2;
                    r31=0x3ef54;
                    pc=0x47000;
                    run_47000(); return;
                case 0x3ef54:
                    /* Next insn is delay slot */ 
                    r2 = r18 + 1;
                    pc=0x3ef08;
                    continue;
                case 0x3f000:
                    pc=0x3f000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f000() throws ExecutionException { /* 0x3f000 - 0x3f200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f000:
                    r29 = r29 + -32;
                    r6 = r29 + 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3f014;
                    pc=0x3ee00;
                    run_3ee00(); return;
                case 0x3f014:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r29 = r29 + 32;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f200:
                    pc=0x3f200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f200() throws ExecutionException { /* 0x3f200 - 0x3f400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f200:
                    r29 = r29 + -88;
                    r5 = r29 + 16;
                    writePages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3f214;
                    pc=0x45e00;
                    run_45e00(); return;
                case 0x3f214:
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3f230;
                        continue;
                    }
                    r3 = r0 + r0;
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r2 = r2 & 61440;
                    r2 = r2 ^ 8192;
                    r3 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                case 0x3f230:
                    r31 = readPages[(r29+80)>>>12][((r29+80)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 88;
                    pc=r31;
                    return;
                case 0x3f400:
                    pc=0x3f400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f400() throws ExecutionException { /* 0x3f400 - 0x3f600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f400:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = r4 + r0;
                    r19 = r5 + r0;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r6 + r0;
                        pc=0x3f48c;
                        continue;
                    }
                    r16 = r6 + r0;
                    r17 = 5 << 16;
                    r5 = r17 + -19284;
                    /* Next insn is delay slot */ 
                    r4 = r6 + r0;
                    r31=0x3f438;
                    pc=0x27200;
                    run_27200(); return;
                case 0x3f438:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3f46c;
                        continue;
                    }
                case 0x3f440:
                    writePages[(r18+48)>>>12][((r18+48)>>>2)&0x3ff] = r19;
                    writePages[(r18+52)>>>12][((r18+52)>>>2)&0x3ff] = r16;
                case 0x3f448:
                    r3 = r17 + -19284;
                case 0x3f44c:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x3f46c:
                    r5 = 5 << 16;
                    r4 = r16 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + -19288;
                    r31=0x3f47c;
                    pc=0x27200;
                    run_27200(); return;
                case 0x3f47c:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x3f440;
                        continue;
                    }
                    r3 = r0 + r0;
                    /* Next insn is delay slot */ 
                    pc=0x3f44c;
                    continue;
                case 0x3f48c:
                    /* Next insn is delay slot */ 
                    r17 = 5 << 16;
                    pc=0x3f448;
                    continue;
                case 0x3f600:
                    pc=0x3f600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f600() throws ExecutionException { /* 0x3f600 - 0x3f800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f600:
                    r2 = readPages[(r28+-31776)>>>12][((r28+-31776)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3f800:
                    pc=0x3f800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3f800() throws ExecutionException { /* 0x3f800 - 0x3fa00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3f800:
                    r2 = 5 << 16;
                    /* Next insn is delay slot */ 
                    r2 = r2 + -22904;
                    pc=r31;
                    return;
                case 0x3fa00:
                    pc=0x3fa00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fa00() throws ExecutionException { /* 0x3fa00 - 0x3fc00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fa00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3fa20;
                    pc=0x3f400;
                    run_3f400(); return;
                case 0x3fa20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fc00:
                    pc=0x3fc00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fc00() throws ExecutionException { /* 0x3fc00 - 0x3fe00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fc00:
                    r29 = r29 + -24;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x3fc14;
                    pc=0x3f800;
                    run_3f800(); return;
                case 0x3fc14:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x3fe00:
                    pc=0x3fe00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_3fe00() throws ExecutionException { /* 0x3fe00 - 0x40000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x3fe00:
                    r29 = r29 + -8;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x3fe3c;
                        continue;
                    }
                case 0x3fe0c:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x3fe34;
                        continue;
                    }
                    r2 = r0 + r0;
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + -2;
                        pc=0x3fe34;
                        continue;
                    }
                    r2 = r0 + -2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    addr=r6+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r3 = tmp;
                    r2 = ((r0 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                case 0x3fe34:
                    /* Next insn is delay slot */ 
                    r29 = r29 + 8;
                    pc=r31;
                    return;
                case 0x3fe3c:
                    /* Next insn is delay slot */ 
                    r5 = r29 + r0;
                    pc=0x3fe0c;
                    continue;
                case 0x40000:
                    pc=0x40000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40000() throws ExecutionException { /* 0x40000 - 0x40200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40000:
                    r2 = ((r5 & 0xffffffffL) < (r4 & 0xffffffffL)) ? 1 : 0;
                    r9 = r5 + r0;
                    r8 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r7 = r6 + r0;
                        pc=0x40060;
                        continue;
                    }
                    r7 = r6 + r0;
                    r3 = r5 + r6;
                    r2 = ((r4 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40060;
                        continue;
                    }
                    r7 = r6 + -1;
                    r2 = r0 + -1;
                    r5 = r3 + r0;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        r8 = r4 + r6;
                        pc=0x40058;
                        continue;
                    }
                    r8 = r4 + r6;
                    r6 = r0 + -1;
                    r3 = r8 + r0;
                case 0x40040:
                    r5 = r5 + -1;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r3 = r3 + -1;
                    r7 = r7 + -1;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        addr=r3+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x40040;
                        continue;
                    }
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x40058:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x40060:
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40118;
                        continue;
                    }
                    r2 = r9 | r4;
                    r2 = r2 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40118;
                        continue;
                    }
                    r8 = r4 + r0;
                    r5 = r9 + r0;
                    r6 = r4 + r0;
                    r3 = r9 + r0;
                case 0x4008c:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r3 = r3 + 4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r3 = r3 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r3 = r3 + 4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r7 = r7 + -16;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = (r7&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    r5 = r5 + 16;
                    r3 = r3 + 4;
                    r8 = r8 + 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + 4;
                        pc=0x4008c;
                        continue;
                    }
                    r6 = r6 + 4;
                    r2 = (r7&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40118;
                        continue;
                    }
                    r6 = r8 + r0;
                    r3 = r5 + r0;
                case 0x400f4:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = r7 + -4;
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                    r2 = (r7&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r5 = r5 + 4;
                    r3 = r3 + 4;
                    r8 = r8 + 4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + 4;
                        pc=0x400f4;
                        continue;
                    }
                    r6 = r6 + 4;
                case 0x40118:
                    r7 = r7 + -1;
                    r2 = r0 + -1;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x40058;
                        continue;
                    }
                    r6 = r0 + -1;
                    r3 = r8 + r0;
                case 0x40130:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r7 = r7 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 1;
                    if(r7 != r6) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x40130;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x40058;
                    continue;
                case 0x40200:
                    pc=0x40200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40200() throws ExecutionException { /* 0x40200 - 0x40400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40200:
                    r29 = r29 + -32;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r3 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r17 = r5 + r0;
                        pc=0x402a4;
                        continue;
                    }
                    r17 = r5 + r0;
                case 0x40224:
                    r2 = r17 << 2;
                    r4 = r2 + r3;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40270;
                        continue;
                    }
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x40248:
                    writePages[(r3+16)>>>12][((r3+16)>>>2)&0x3ff] = r0;
                    writePages[(r3+12)>>>12][((r3+12)>>>2)&0x3ff] = r0;
                    r4 = r3 + r0;
                case 0x40254:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r4 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x40270:
                    r2 = r0 + 1;
                    r18 = r2 << (r17&0x1f);
                    r6 = r18 << 2;
                    r4 = r16 + r0;
                    r6 = r6 + 20;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1;
                    r31=0x4028c;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x4028c:
                    r3 = r2 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x40254;
                        continue;
                    }
                    r4 = r0 + r0;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    writePages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff] = r18;
                    pc=0x40248;
                    continue;
                case 0x402a4:
                    r5 = r0 + 4;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 16;
                    r31=0x402b0;
                    pc=0x1fe00;
                    run_1fe00(); return;
                case 0x402b0:
                    writePages[(r16+76)>>>12][((r16+76)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + r0;
                        pc=0x40254;
                        continue;
                    }
                    r4 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r3 = r2 + r0;
                    pc=0x40224;
                    continue;
                case 0x40400:
                    pc=0x40400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40400() throws ExecutionException { /* 0x40400 - 0x40600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40400:
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40428;
                        continue;
                    }
                    r2 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r4 = readPages[(r4+76)>>>12][((r4+76)>>>2)&0x3ff];
                    r2 = r2 << 2;
                    r2 = r2 + r4;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r3;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r5;
                case 0x40428:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x40600:
                    pc=0x40600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40600() throws ExecutionException { /* 0x40600 - 0x40800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40600:
                    r29 = r29 + -40;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r19 = r5 + r0;
                    r17 = r7 + r0;
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r20 = r4 + r0;
                    r7 = r0 + r0;
                    r5 = r5 + 20;
                case 0x40634:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r7 = r7 + 1;
                    r3 = r2 & 65535;
                    { long hilo = (long)(r3) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r2 = r2 >>> 16;
                    r3 = lo;
                    r3 = r3 + r17;
                    r4 = r3 >>> 16;
                    { long hilo = (long)(r2) * ((long)r6); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = r3 & 65535;
                    r2 = lo;
                    r2 = r2 + r4;
                    r17 = r2 >>> 16;
                    r2 = r2 << 16;
                    r2 = r2 + r3;
                    writePages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff] = r2;
                    r2 = r7 < r18 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 4;
                        pc=0x40634;
                        continue;
                    }
                    r5 = r5 + 4;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406b0;
                        continue;
                    }
                    r2 = readPages[(r19+8)>>>12][((r19+8)>>>2)&0x3ff];
                    r2 = r18 < r2 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x406d4;
                        continue;
                    }
                case 0x4069c:
                    r2 = r18 << 2;
                    r2 = r2 + r19;
                    r18 = r18 + 1;
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r17;
                    writePages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff] = r18;
                case 0x406b0:
                    r2 = r19 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x406d4:
                    r5 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 1;
                    r31=0x406e4;
                    pc=0x40200;
                    run_40200(); return;
                case 0x406e4:
                    r6 = readPages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff];
                    r5 = r19 + 12;
                    r6 = r6 << 2;
                    r4 = r2 + 12;
                    r6 = r6 + 8;
                    /* Next insn is delay slot */ 
                    r16 = r2 + r0;
                    r31=0x40700;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x40700:
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x4070c;
                    pc=0x40400;
                    run_40400(); return;
                case 0x4070c:
                    /* Next insn is delay slot */ 
                    r19 = r16 + r0;
                    pc=0x4069c;
                    continue;
                case 0x40800:
                    pc=0x40800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40800() throws ExecutionException { /* 0x40800 - 0x40a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40800:
                    r3 = 14563 << 16;
                    r2 = r7 + 8;
                    r3 = r3 | 36409;
                    { long hilo = (long)(r2) * ((long)r3); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r29 = r29 + -48;
                    r2 = r2 >> 31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r19 = r4 + r0;
                    r4 = r0 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    r18 = r5 + r0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r3 = hi;
                    r3 = r3 >> 1;
                    r3 = r3 - r2;
                    r2 = r4 < r3 ? 1 : 0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r21 = r6 + r0;
                    r20 = r7 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x40870;
                        continue;
                    }
                    r5 = r0 + r0;
                case 0x40860:
                    r4 = r4 << 1;
                    r2 = r4 < r3 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x40860;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x40870:
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x40878;
                    pc=0x40200;
                    run_40200(); return;
                case 0x40878:
                    r5 = r2 + r0;
                    r2 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r5+20)>>>12][((r5+20)>>>2)&0x3ff] = r2;
                    r2 = r21 < 10 ? 1 : 0;
                    writePages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r0 + 9;
                        pc=0x40930;
                        continue;
                    }
                    r17 = r0 + 9;
                    r18 = r18 + 9;
                    r16 = r18 + r0;
                case 0x408a0:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r19 + r0;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 10;
                    r31=0x408b4;
                    pc=0x40600;
                    run_40600(); return;
                case 0x408b4:
                    r17 = r17 + 1;
                    r5 = r2 + r0;
                    r2 = r17 < r21 ? 1 : 0;
                    r18 = r18 + 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 1;
                        pc=0x408a0;
                        continue;
                    }
                    r16 = r16 + 1;
                    r18 = r18 + 1;
                case 0x408d0:
                    r2 = r17 < r20 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40908;
                        continue;
                    }
                    r17 = r20 - r17;
                    r16 = r18 + r0;
                case 0x408e4:
                    addr=r16+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r7 = tmp;
                    r4 = r19 + r0;
                    r7 = r7 + -48;
                    /* Next insn is delay slot */ 
                    r6 = r0 + 10;
                    r31=0x408f8;
                    pc=0x40600;
                    run_40600(); return;
                case 0x408f8:
                    r17 = r17 + -1;
                    r16 = r16 + 1;
                    if(r17 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 + r0;
                        pc=0x408e4;
                        continue;
                    }
                    r5 = r2 + r0;
                case 0x40908:
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x40930:
                    /* Next insn is delay slot */ 
                    r18 = r18 + 10;
                    pc=0x408d0;
                    continue;
                case 0x40a00:
                    pc=0x40a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40a00() throws ExecutionException { /* 0x40a00 - 0x40c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40a00:
                    r2 = 65535 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + r0;
                        pc=0x40a18;
                        continue;
                    }
                    r3 = r0 + r0;
                    r3 = r0 + 16;
                    r4 = r4 << 16;
                case 0x40a18:
                    r2 = 65280 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40a30;
                        continue;
                    }
                    r3 = r3 + 8;
                    r4 = r4 << 8;
                case 0x40a30:
                    r2 = 61440 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40a48;
                        continue;
                    }
                    r3 = r3 + 4;
                    r4 = r4 << 4;
                case 0x40a48:
                    r2 = 49152 << 16;
                    r2 = r4 & r2;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40a60;
                        continue;
                    }
                    r3 = r3 + 2;
                    r4 = r4 << 2;
                case 0x40a60:
                    if(r4 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x40a7c;
                        continue;
                    }
                    r2 = 16384 << 16;
                    r2 = r4 & r2;
                    r3 = r3 + 1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r4 = r0 + 32;
                        pc=0x40a80;
                        continue;
                    }
                    r4 = r0 + 32;
                case 0x40a7c:
                    r4 = r3 + r0;
                case 0x40a80:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x40c00:
                    pc=0x40c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40c00() throws ExecutionException { /* 0x40c00 - 0x40e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40c00:
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = r3 & 7;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c4c;
                        continue;
                    }
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x40c38;
                        continue;
                    }
                    r5 = r0 + r0;
                    r2 = r3 & 2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c40;
                        continue;
                    }
                    r2 = r3 >>> 1;
                    r5 = r0 + 1;
                case 0x40c34:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x40c38:
                    /* Next insn is delay slot */ 
                    r2 = r5 + r0;
                    pc=r31;
                    return;
                case 0x40c40:
                    r2 = r3 >>> 2;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 2;
                    pc=0x40c34;
                    continue;
                case 0x40c4c:
                    r2 = r3 & 65535;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x40c60;
                        continue;
                    }
                    r6 = r0 + r0;
                    r6 = r0 + 16;
                    r3 = r3 >>> 16;
                case 0x40c60:
                    r2 = r3 & 255;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c74;
                        continue;
                    }
                    r6 = r6 + 8;
                    r3 = r3 >>> 8;
                case 0x40c74:
                    r2 = r3 & 15;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c88;
                        continue;
                    }
                    r6 = r6 + 4;
                    r3 = r3 >>> 4;
                case 0x40c88:
                    r2 = r3 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40c9c;
                        continue;
                    }
                    r6 = r6 + 2;
                    r3 = r3 >>> 2;
                case 0x40c9c:
                    r2 = r3 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x40cb8;
                        continue;
                    }
                    r3 = r3 >>> 1;
                    r6 = r6 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 32;
                        pc=0x40c38;
                        continue;
                    }
                    r5 = r0 + 32;
                case 0x40cb8:
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r5 = r6 + r0;
                    pc=0x40c38;
                    continue;
                case 0x40e00:
                    pc=0x40e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_40e00() throws ExecutionException { /* 0x40e00 - 0x41000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x40e00:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r0 + 1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x40e1c;
                    pc=0x40200;
                    run_40200(); return;
                case 0x40e1c:
                    writePages[(r2+20)>>>12][((r2+20)>>>2)&0x3ff] = r16;
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r2+16)>>>12][((r2+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x41000:
                    pc=0x41000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41000() throws ExecutionException { /* 0x41000 - 0x41200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41000:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r31;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r18 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r19 = readPages[(r6+16)>>>12][((r6+16)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    r2 = r18 < r19 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r6 + r0;
                        pc=0x4104c;
                        continue;
                    }
                    r20 = r6 + r0;
                    r18 = r19 + r0;
                    r19 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r16 = r6 + r0;
                    r20 = r5 + r0;
                case 0x4104c:
                    r2 = readPages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff];
                    r17 = r18 + r19;
                    r2 = r2 < r17 ? 1 : 0;
                    r5 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41068;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x41068:
                    /* Next insn is delay slot */ 
                    r31=0x41070;
                    pc=0x40200;
                    run_40200(); return;
                case 0x41070:
                    r25 = r2 + 20;
                    r22 = r17 << 2;
                    r24 = r25 + r22;
                    r21 = r2 + r0;
                    r2 = ((r25 & 0xffffffffL) < (r24 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r9 = r25 + r0;
                        pc=0x410a4;
                        continue;
                    }
                    r9 = r25 + r0;
                    r3 = r25 + r0;
                case 0x41090:
                    r9 = r9 + 4;
                    r2 = ((r9 & 0xffffffffL) < (r24 & 0xffffffffL)) ? 1 : 0;
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 4;
                        pc=0x41090;
                        continue;
                    }
                    r3 = r3 + 4;
                case 0x410a4:
                    r2 = r18 << 2;
                    r24 = r16 + 20;
                    r6 = r20 + 20;
                    r14 = r24 + r2;
                    r2 = r19 << 2;
                    r18 = r6 + r2;
                    r2 = ((r6 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r25 + r0;
                        pc=0x41208;
                        run_41200(); return;
                    }
                    r16 = r25 + r0;
                    r15 = r6 + r0;
                case 0x410cc:
                    r2 = readPages[(r15+0)>>>12][((r15+0)>>>2)&0x3ff];
                    r12 = r2 & 65535;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41160;
                        continue;
                    }
                    r9 = r24 + r0;
                    r10 = r16 + r0;
                    r11 = r0 + r0;
                    r7 = r16 + r0;
                    r8 = r24 + r0;
                case 0x410f4:
                    r3 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r5 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r2 = r3 & 65535;
                    { long hilo = (long)(r2) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r3 = r3 >>> 16;
                    r4 = r5 & 65535;
                    r5 = r5 >>> 16;
                    r9 = r9 + 4;
                    r8 = r8 + 4;
                    r10 = r10 + 4;
                    r2 = lo;
                    r2 = r2 + r4;
                    r2 = r2 + r11;
                    { long hilo = (long)(r3) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r11 = r2 >>> 16;
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r3 = lo;
                    r3 = r3 + r5;
                    r5 = r3 + r11;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r11 = r5 >>> 16;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 4;
                        pc=0x410f4;
                        continue;
                    }
                    r7 = r7 + 4;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r11;
                    r2 = readPages[(r15+0)>>>12][((r15+0)>>>2)&0x3ff];
                case 0x41160:
                    r12 = r2 >>> 16;
                    if(r12 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x411f4;
                        continue;
                    }
                    r5 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r9 = r24 + r0;
                    r10 = r16 + r0;
                    r11 = r0 + r0;
                    r8 = r5 + r0;
                    r13 = r24 + r0;
                    r7 = r16 + r0;
                case 0x41188:
                    r4 = readPages[(r13+0)>>>12][((r13+0)>>>2)&0x3ff];
                    r3 = r8 >>> 16;
                    r2 = r4 & 65535;
                    { long hilo = (long)(r2) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r4 = r4 >>> 16;
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r5&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r9 = r9 + 4;
                    r10 = r10 + 4;
                    r13 = r13 + 4;
                    r2 = lo;
                    r2 = r2 + r3;
                    r2 = r2 + r11;
                    { long hilo = (long)(r4) * ((long)r12); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r7 = r7 + 4;
                    r11 = r2 >>> 16;
                    r2 = readPages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff];
                    r3 = r2 & 65535;
                    r8 = r2 + r0;
                    r2 = ((r9 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    r4 = lo;
                    r4 = r4 + r3;
                    r5 = r4 + r11;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r11 = r5 >>> 16;
                        pc=0x41188;
                        continue;
                    }
                    r11 = r5 >>> 16;
                    writePages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff] = r5;
                case 0x411f4:
                    r6 = r6 + 4;
                    r2 = ((r6 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r15 = r15 + 4;
                case 0x41200:
                    pc=0x41200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41200() throws ExecutionException { /* 0x41200 - 0x41400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41200:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r16 = r16 + 4;
                        pc=0x410cc;
                        run_41000(); return;
                    }
                    r16 = r16 + 4;
                case 0x41208:
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        r10 = r25 + r22;
                        pc=0x41248;
                        continue;
                    }
                    r10 = r25 + r22;
                    r10 = r10 + -4;
                    r2 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41248;
                        continue;
                    }
                    r3 = r10 + r0;
                case 0x41228:
                    r17 = r17 + -1;
                    if(r17 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x41248;
                        continue;
                    }
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41228;
                        continue;
                    }
                case 0x41248:
                    writePages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff] = r17;
                    r2 = r21 + r0;
                    r31 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r22 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x41400:
                    pc=0x41400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41400() throws ExecutionException { /* 0x41400 - 0x41600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41400:
                    r29 = r29 + -40;
                    r3 = r6 & 3;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r20 = r4 + r0;
                    r19 = r5 + r0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r17 = r6 + r0;
                        pc=0x41500;
                        continue;
                    }
                    r17 = r6 + r0;
                case 0x41430:
                    r17 = r17 >> 2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41498;
                        continue;
                    }
                    r18 = readPages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff];
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x414e4;
                        continue;
                    }
                case 0x4144c:
                    r2 = r17 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x414bc;
                        continue;
                    }
                case 0x41458:
                    r17 = r17 >> 1;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41498;
                        continue;
                    }
                    r2 = readPages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4147c;
                        continue;
                    }
                case 0x41474:
                    /* Next insn is delay slot */ 
                    r18 = r2 + r0;
                    pc=0x4144c;
                    continue;
                case 0x4147c:
                    r4 = r20 + r0;
                    r5 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x4148c;
                    pc=0x41000;
                    run_41000(); return;
                case 0x4148c:
                    writePages[(r18+0)>>>12][((r18+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    pc=0x41474;
                    continue;
                case 0x41498:
                    r2 = r19 + r0;
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x414bc:
                    r5 = r19 + r0;
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x414cc;
                    pc=0x41000;
                    run_41000(); return;
                case 0x414cc:
                    r16 = r2 + r0;
                    r5 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r20 + r0;
                    r31=0x414dc;
                    pc=0x40400;
                    run_40400(); return;
                case 0x414dc:
                    /* Next insn is delay slot */ 
                    r19 = r16 + r0;
                    pc=0x41458;
                    continue;
                case 0x414e4:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + 625;
                    r31=0x414f0;
                    pc=0x40e00;
                    run_40e00(); return;
                case 0x414f0:
                    writePages[(r20+72)>>>12][((r20+72)>>>2)&0x3ff] = r2;
                    r18 = r2 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    pc=0x4144c;
                    continue;
                case 0x41500:
                    r2 = 5 << 16;
                    r2 = r2 + -22844;
                    r3 = r3 << 2;
                    r3 = r3 + r2;
                    r6 = readPages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r7 = r0 + r0;
                    r31=0x4151c;
                    pc=0x40600;
                    run_40600(); return;
                case 0x4151c:
                    /* Next insn is delay slot */ 
                    r19 = r2 + r0;
                    pc=0x41430;
                    continue;
                case 0x41600:
                    pc=0x41600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41600() throws ExecutionException { /* 0x41600 - 0x41800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41600:
                    r29 = r29 + -48;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    r20 = r5 + r0;
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r16 = r6 >> 5;
                    r2 = r16 + r2;
                    r3 = readPages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff];
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r18 = r2 + 1;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    r2 = r3 < r18 ? 1 : 0;
                    r21 = r4 + r0;
                    r17 = r6 + r0;
                    r5 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41660;
                        continue;
                    }
                case 0x41650:
                    r3 = r3 << 1;
                    r2 = r3 < r18 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 1;
                        pc=0x41650;
                        continue;
                    }
                    r5 = r5 + 1;
                case 0x41660:
                    /* Next insn is delay slot */ 
                    r4 = r21 + r0;
                    r31=0x41668;
                    pc=0x40200;
                    run_40200(); return;
                case 0x41668:
                    r19 = r2 + r0;
                    if(r16 <= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r2 + 20;
                        pc=0x41690;
                        continue;
                    }
                    r4 = r2 + 20;
                    r3 = r16 + r0;
                    r2 = r4 + r0;
                case 0x4167c:
                    r3 = r3 + -1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    r4 = r4 + 4;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 4;
                        pc=0x4167c;
                        continue;
                    }
                    r2 = r2 + 4;
                case 0x41690:
                    r2 = readPages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff];
                    r6 = r20 + 20;
                    r2 = r2 << 2;
                    r17 = r17 & 31;
                    r9 = r6 + r2;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r6 + r0;
                        pc=0x41738;
                        continue;
                    }
                    r3 = r6 + r0;
                    r2 = r0 + 32;
                    r5 = r2 - r17;
                    r8 = r0 + r0;
                    r3 = r6 + r0;
                    r7 = r4 + r0;
                case 0x416c0:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    r2 = r2 << (r17&0x1f);
                    r2 = r2 | r8;
                    writePages[(r7+0)>>>12][((r7+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    r8 = r2 >>> (r5&0x1f);
                    r2 = ((r6 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r7 = r7 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 4;
                        pc=0x416c0;
                        continue;
                    }
                    r3 = r3 + 4;
                    if(r8 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r8;
                        pc=0x416fc;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r8;
                    r18 = r18 + 1;
                case 0x416fc:
                    r2 = r18 + -1;
                    writePages[(r19+16)>>>12][((r19+16)>>>2)&0x3ff] = r2;
                    r4 = r21 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r20 + r0;
                    r31=0x41710;
                    pc=0x40400;
                    run_40400(); return;
                case 0x41710:
                    r2 = r19 + r0;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x41738:
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r6 = r6 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = ((r6 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r3 = r3 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 4;
                        pc=0x41738;
                        continue;
                    }
                    r4 = r4 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x416fc;
                    continue;
                case 0x41800:
                    pc=0x41800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41800() throws ExecutionException { /* 0x41800 - 0x41a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41800:
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r3 = readPages[(r5+16)>>>12][((r5+16)>>>2)&0x3ff];
                    r2 = r2 - r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r6 = r2 + r0;
                        pc=0x4185c;
                        continue;
                    }
                    r6 = r2 + r0;
                    r3 = r3 << 2;
                    r4 = r4 + 20;
                    r7 = r4 + r3;
                    r2 = r5 + 20;
                    r3 = r2 + r3;
                    r6 = r7 + r0;
                case 0x41830:
                    r6 = r6 + -4;
                    r3 = r3 + -4;
                    r5 = readPages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff];
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r7 = r7 + -4;
                    if(r5 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x41864;
                        continue;
                    }
                    r2 = ((r4 & 0xffffffffL) < (r7 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41830;
                        continue;
                    }
                    r6 = r0 + r0;
                case 0x4185c:
                    /* Next insn is delay slot */ 
                    r2 = r6 + r0;
                    pc=r31;
                    return;
                case 0x41864:
                    r2 = ((r5 & 0xffffffffL) < (r2 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x41874;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = r0 + 1;
                case 0x41874:
                    /* Next insn is delay slot */ 
                    r6 = r3 + r0;
                    pc=0x4185c;
                    continue;
                case 0x41a00:
                    pc=0x41a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41a00() throws ExecutionException { /* 0x41a00 - 0x41c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41a00:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    r19 = r4 + r0;
                    r17 = r5 + r0;
                    r4 = r5 + r0;
                    r5 = r6 + r0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r31;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    /* Next insn is delay slot */ 
                    r18 = r6 + r0;
                    r31=0x41a30;
                    pc=0x41800;
                    run_41800(); return;
                case 0x41a30:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b94;
                        continue;
                    }
                    if(r2 < 0) {
                        /* Next insn is delay slot */ 
                        r16 = r0 + r0;
                        pc=0x41b80;
                        continue;
                    }
                    r16 = r0 + r0;
                case 0x41a40:
                    r5 = readPages[(r17+4)>>>12][((r17+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r4 = r19 + r0;
                    r31=0x41a4c;
                    pc=0x40200;
                    run_40200(); return;
                case 0x41a4c:
                    r15 = r2 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r16;
                    r13 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r2 = readPages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff];
                    r11 = r17 + 20;
                    r6 = r18 + 20;
                    r3 = r13 << 2;
                    r2 = r2 << 2;
                    r12 = r15 + 20;
                    r16 = r11 + r3;
                    r14 = r6 + r2;
                    r9 = r0 + r0;
                    r7 = r12 + r0;
                    r10 = r11 + r0;
                    r8 = r6 + r0;
                case 0x41a88:
                    r5 = readPages[(r10+0)>>>12][((r10+0)>>>2)&0x3ff];
                    r4 = readPages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff];
                    r2 = r5 & 65535;
                    r3 = r4 & 65535;
                    r2 = r2 - r3;
                    r3 = r2 + r9;
                    r5 = r5 >>> 16;
                    r4 = r4 >>> 16;
                    r9 = r3 >> 16;
                    r5 = r5 - r4;
                    r2 = r5 + r9;
                    r6 = r6 + 4;
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r9 = r2 >> 16;
                    r2 = ((r6 & 0xffffffffL) < (r14 & 0xffffffffL)) ? 1 : 0;
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 4;
                    r11 = r11 + 4;
                    r10 = r10 + 4;
                    r12 = r12 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 4;
                        pc=0x41a88;
                        continue;
                    }
                    r7 = r7 + 4;
                    r2 = ((r11 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b30;
                        continue;
                    }
                    r4 = r12 + r0;
                    r5 = r11 + r0;
                case 0x41af4:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r11 = r11 + 4;
                    r3 = r2 & 65535;
                    r3 = r3 + r9;
                    r9 = r3 >> 16;
                    r2 = r2 >>> 16;
                    r2 = r2 + r9;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r9 = r2 >> 16;
                    r2 = ((r11 & 0xffffffffL) < (r16 & 0xffffffffL)) ? 1 : 0;
                    addr=r4+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r3&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r5 + 4;
                    r12 = r12 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + 4;
                        pc=0x41af4;
                        continue;
                    }
                    r4 = r4 + 4;
                case 0x41b30:
                    r12 = r12 + -4;
                    r2 = readPages[(r12+0)>>>12][((r12+0)>>>2)&0x3ff];
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b5c;
                        continue;
                    }
                    r3 = r12 + r0;
                case 0x41b48:
                    r3 = r3 + -4;
                    r2 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    r13 = r13 + -1;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41b48;
                        continue;
                    }
                case 0x41b5c:
                    writePages[(r15+16)>>>12][((r15+16)>>>2)&0x3ff] = r13;
                case 0x41b60:
                    r31 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r15 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x41b80:
                    r15 = r17 + r0;
                    r16 = r0 + 1;
                    r17 = r18 + r0;
                    /* Next insn is delay slot */ 
                    r18 = r15 + r0;
                    pc=0x41a40;
                    continue;
                case 0x41b94:
                    r4 = r19 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r0 + r0;
                    r31=0x41ba0;
                    pc=0x40200;
                    run_40200(); return;
                case 0x41ba0:
                    r15 = r2 + r0;
                    r2 = r0 + 1;
                    writePages[(r15+16)>>>12][((r15+16)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r15+20)>>>12][((r15+20)>>>2)&0x3ff] = r0;
                    pc=0x41b60;
                    continue;
                case 0x41c00:
                    pc=0x41c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41c00() throws ExecutionException { /* 0x41c00 - 0x41e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41c00:
                    r3 = f12;
                    r2 = f13;
                    r4 = 32752 << 16;
                    r2 = r2 & r4;
                    r5 = 64704 << 16;
                    r4 = r2 + r5;
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        r6 = r4 + r0;
                        pc=0x41c34;
                        continue;
                    }
                    r6 = r4 + r0;
                case 0x41c20:
                    r7 = r0 + r0;
                case 0x41c24:
                    f0 = r7;
                    f1 = r6;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x41c34:
                    r2 = r0 - r4;
                    r4 = r2 >> 20;
                    r3 = r4 < 20 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41c54;
                        continue;
                    }
                    r2 = 8 << 16;
                    /* Next insn is delay slot */ 
                    r6 = r2 >> (r4&0x1f);
                    pc=0x41c20;
                    continue;
                case 0x41c54:
                    r4 = r4 + -20;
                    r2 = r4 < 31 ? 1 : 0;
                    r6 = r0 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + 1;
                        pc=0x41c74;
                        continue;
                    }
                    r3 = r0 + 1;
                    r3 = ~(r0 | r4);
                    r2 = r0 + 1;
                    r3 = r2 << (r3&0x1f);
                case 0x41c74:
                    /* Next insn is delay slot */ 
                    r7 = r3 + r0;
                    pc=0x41c24;
                    continue;
                case 0x41e00:
                    pc=0x41e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_41e00() throws ExecutionException { /* 0x41e00 - 0x42000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x41e00:
                    r29 = r29 + -48;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r21;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    r2 = readPages[(r4+16)>>>12][((r4+16)>>>2)&0x3ff];
                    r19 = r4 + 20;
                    r2 = r2 << 2;
                    r17 = r19 + r2;
                    r17 = r17 + -4;
                    r18 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                    r16 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r18 + r0;
                    r31=0x41e44;
                    pc=0x40a00;
                    run_40a00(); return;
                case 0x41e44:
                    r5 = r2 + r0;
                    r2 = r0 + 32;
                    r2 = r2 - r5;
                    r3 = r5 < 11 ? 1 : 0;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                        pc=0x41ef0;
                        continue;
                    }
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    r2 = ((r19 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x41e70;
                        continue;
                    }
                    r6 = r0 + r0;
                    r17 = r17 + -4;
                    r6 = readPages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff];
                case 0x41e70:
                    r5 = r5 + -11;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x41ee0;
                        continue;
                    }
                    r2 = r0 - r5;
                    r4 = r18 << (r5&0x1f);
                    r2 = r6 >>> (r2&0x1f);
                    r4 = r4 | r2;
                    r3 = 16368 << 16;
                    r2 = ((r19 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r20 = r4 | r3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r18 = r0 + r0;
                        pc=0x41ea4;
                        continue;
                    }
                    r18 = r0 + r0;
                    r18 = readPages[(r17+-4)>>>12][((r17+-4)>>>2)&0x3ff];
                case 0x41ea4:
                    r2 = r0 - r5;
                    r3 = r6 << (r5&0x1f);
                    r2 = r18 >>> (r2&0x1f);
                case 0x41eb0:
                    r21 = r3 | r2;
                case 0x41eb4:
                    f0 = r21;
                    f1 = r20;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r21 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x41ee0:
                    r2 = 16368 << 16;
                    r20 = r18 | r2;
                    /* Next insn is delay slot */ 
                    r21 = r6 + r0;
                    pc=0x41eb4;
                    continue;
                case 0x41ef0:
                    r2 = r0 + 11;
                    r2 = r2 - r5;
                    r2 = r18 >>> (r2&0x1f);
                    r3 = 16368 << 16;
                    r4 = ((r19 & 0xffffffffL) < (r17 & 0xffffffffL)) ? 1 : 0;
                    r20 = r2 | r3;
                    if(r4 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r0 + r0;
                        pc=0x41f14;
                        continue;
                    }
                    r6 = r0 + r0;
                    r6 = readPages[(r17+-4)>>>12][((r17+-4)>>>2)&0x3ff];
                case 0x41f14:
                    r2 = r0 + 11;
                    r3 = r5 + 21;
                    r2 = r2 - r5;
                    r3 = r18 << (r3&0x1f);
                    /* Next insn is delay slot */ 
                    r2 = r6 >>> (r2&0x1f);
                    pc=0x41eb0;
                    continue;
                case 0x42000:
                    pc=0x42000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42000() throws ExecutionException { /* 0x42000 - 0x42200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42000:
                    r29 = r29 + -56;
                    r5 = r0 + 1;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    r21 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    r22 = readPages[(r29+76)>>>12][((r29+76)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r17 = r7 + r0;
                    r31=0x4203c;
                    pc=0x40200;
                    run_40200(); return;
                case 0x4203c:
                    r18 = r2 + r0;
                    r20 = r2 + 20;
                    r2 = 15 << 16;
                    r2 = r2 | 65535;
                    r3 = r16 & r2;
                    r2 = 32767 << 16;
                    r2 = r2 | 65535;
                    r16 = r2 & r16;
                    r19 = r16 >>> 20;
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                        pc=0x42074;
                        continue;
                    }
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                    r2 = 16 << 16;
                    r2 = r3 | r2;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                case 0x42074:
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42158;
                        continue;
                    }
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r17;
                    r31=0x42088;
                    pc=0x40c00;
                    run_40c00(); return;
                case 0x42088:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r2 + r0;
                        pc=0x42148;
                        continue;
                    }
                    r5 = r2 + r0;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = r0 - r2;
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r3 = r3 << (r4&0x1f);
                    r2 = r2 | r3;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r3 >>> (r5&0x1f);
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r3;
                case 0x420b8:
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 + 2;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r2;
                    r2 = (r2&0xffffffffL) < (1&0xffffffffL) ? 1 : 0;
                    r2 = r3 - r2;
                    r3 = r2 + r0;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                case 0x420d4:
                    if(r19 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42120;
                        continue;
                    }
                    r2 = r19 + r5;
                    r3 = r0 + 53;
                    r2 = r2 + -1075;
                    r3 = r3 - r5;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r3;
                case 0x420f4:
                    r2 = r18 + r0;
                    r31 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 56;
                    pc=r31;
                    return;
                case 0x42120:
                    r2 = r5 + -1074;
                    writePages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff] = r2;
                    r2 = r3 << 2;
                    r2 = r2 + r20;
                    r4 = readPages[(r2+-4)>>>12][((r2+-4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r16 = r3 << 5;
                    r31=0x4213c;
                    pc=0x40a00;
                    run_40a00(); return;
                case 0x4213c:
                    r16 = r16 - r2;
                    /* Next insn is delay slot */ 
                    writePages[(r22+0)>>>12][((r22+0)>>>2)&0x3ff] = r16;
                    pc=0x420f4;
                    continue;
                case 0x42148:
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    pc=0x420b8;
                    continue;
                case 0x42158:
                    /* Next insn is delay slot */ 
                    r4 = r29 + 20;
                    r31=0x42160;
                    pc=0x40c00;
                    run_40c00(); return;
                case 0x42160:
                    r5 = r2 + r0;
                    r2 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r3 = r0 + 1;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r2;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r3;
                    /* Next insn is delay slot */ 
                    r5 = r5 + 32;
                    pc=0x420d4;
                    continue;
                case 0x42200:
                    pc=0x42200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42200() throws ExecutionException { /* 0x42200 - 0x42400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42200:
                    r29 = r29 + -48;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    r5 = r29 + 16;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r31;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    /* Next insn is delay slot */ 
                    r17 = r4 + r0;
                    r31=0x42228;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x42228:
                    r4 = r16 + r0;
                    r5 = r29 + 20;
                    r19 = f0;
                    r18 = f1;
                    /* Next insn is delay slot */ 
                    r31=0x42240;
                    pc=0x41e00;
                    run_41e00(); return;
                case 0x42240:
                    r3 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r4 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = readPages[(r17+16)>>>12][((r17+16)>>>2)&0x3ff];
                    r4 = r4 - r3;
                    r3 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    r7 = f0;
                    r6 = f1;
                    r2 = r2 - r3;
                    r2 = r2 << 5;
                    r2 = r4 + r2;
                    if(r2 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x422a8;
                        continue;
                    }
                    r2 = r2 << 20;
                    r18 = r2 + r18;
                case 0x42278:
                    f2 = r19;
                    f3 = r18;
                    f4 = r7;
                    f5 = r6;
                    r31 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))/(Double.longBitsToDouble(((f5&0xffffffffL) << 32) | (f4&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 48;
                    pc=r31;
                    return;
                case 0x422a8:
                    r2 = r2 << 20;
                    /* Next insn is delay slot */ 
                    r6 = r6 - r2;
                    pc=0x42278;
                    continue;
                case 0x42400:
                    pc=0x42400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42400() throws ExecutionException { /* 0x42400 - 0x42600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42400:
                    r2 = r4 < 24 ? 1 : 0;
                    f1 = readPages[(r28+-31768)>>>12][((r28+-31768)>>>2)&0x3ff];
                    f0 = readPages[(r28+-31764)>>>12][((r28+-31764)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42434;
                        continue;
                    }
                    r2 = 5 << 16;
                    r3 = r4 << 3;
                    r2 = r2 + -22832;
                    r3 = r3 + r2;
                    f1 = readPages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff];
                    f0 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42434:
                    if(r4 <= 0) {
                        /* Next insn is delay slot */ 
                        pc=0x42450;
                        continue;
                    }
                    f3 = readPages[(r28+-31760)>>>12][((r28+-31760)>>>2)&0x3ff];
                    f2 = readPages[(r28+-31756)>>>12][((r28+-31756)>>>2)&0x3ff];
                case 0x42444:
                    r4 = r4 + -1;
                    if(r4 > 0) {
                        /* Next insn is delay slot */ 
                        { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                        pc=0x42444;
                        continue;
                    }
                    { long l = Double.doubleToLongBits((Double.longBitsToDouble(((f1&0xffffffffL) << 32) | (f0&0xffffffffL)))*(Double.longBitsToDouble(((f3&0xffffffffL) << 32) | (f2&0xffffffffL)))); f1 = (int)(l >>> 32); f0 = (int)l; }
                case 0x42450:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42600:
                    pc=0x42600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42600() throws ExecutionException { /* 0x42600 - 0x42800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42600:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x42620;
                    pc=0x42800;
                    run_42800(); return;
                case 0x42620:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x42800:
                    pc=0x42800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42800() throws ExecutionException { /* 0x42800 - 0x42a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42800:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    r30 = r4 + r0;
                    r21 = r5 + r0;
                    r20 = r6 + r0;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42da0;
                        run_42c00(); return;
                    }
                    /* Next insn is delay slot */ 
                    r16 = r21 + -8;
                    r31=0x42848;
                    pc=0x24c00;
                    run_24c00(); return;
                case 0x42848:
                    r7 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    r3 = r20 + 11;
                    r18 = r7 & r2;
                    r2 = (r3&0xffffffffL) < (23&0xffffffffL) ? 1 : 0;
                    r19 = r16 + r0;
                    r17 = r18 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + 16;
                        pc=0x42874;
                        continue;
                    }
                    r22 = r0 + 16;
                    r2 = r0 + -8;
                    r22 = r3 & r2;
                case 0x42874:
                    if(r22 < 0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x42a2c;
                        run_42a00(); return;
                    }
                    r2 = r0 + r0;
                    r2 = r17 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a84;
                        run_42a00(); return;
                    }
                    r23 = 5 << 16;
                    r8 = r23 + -21344;
                    r6 = readPages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff];
                    r5 = r19 + r17;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x42d94;
                        run_42c00(); return;
                    }
                    r4 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    r2 = r0 + -2;
                    r2 = r4 & r2;
                    r2 = r5 + r2;
                    r3 = readPages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff];
                    r3 = r3 & 1;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d88;
                        run_42c00(); return;
                    }
                case 0x428c4:
                    r2 = r0 + -4;
                    if(r5 == r6) {
                        /* Next insn is delay slot */ 
                        r4 = r4 & r2;
                        pc=0x42d40;
                        run_42c00(); return;
                    }
                    r4 = r4 & r2;
                    r3 = r4 + r17;
                    r2 = r3 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d28;
                        run_42c00(); return;
                    }
                case 0x428e0:
                    r2 = r7 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42948;
                        continue;
                    }
                    r2 = readPages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff];
                    r18 = r19 - r2;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r2 = r0 + -4;
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r3 & r2;
                        pc=0x42930;
                        continue;
                    }
                    r6 = r3 & r2;
                    r2 = r23 + -21344;
                    r3 = readPages[(r2+8)>>>12][((r2+8)>>>2)&0x3ff];
                    if(r5 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x42c14;
                        run_42c00(); return;
                    }
                    r2 = r4 + r6;
                    r7 = r2 + r17;
                    r3 = r7 < r22 ? 1 : 0;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42be8;
                        run_42a00(); return;
                    }
                case 0x42930:
                    if(r18 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42948;
                        continue;
                    }
                    r3 = r6 + r17;
                    r2 = r3 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42b18;
                        run_42a00(); return;
                    }
                case 0x42948:
                    r5 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x42954;
                    pc=0x24200;
                    run_24200(); return;
                case 0x42954:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r20 = r2 + r0;
                        pc=0x42b08;
                        run_42a00(); return;
                    }
                    r20 = r2 + r0;
                    r16 = r2 + -8;
                    r2 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    r3 = r0 + -2;
                    r2 = r2 & r3;
                    r2 = r19 + r2;
                    if(r16 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x42a70;
                        run_42a00(); return;
                    }
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42a5c;
                        run_42a00(); return;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    r5 = r21 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + r0;
                        pc=0x429f0;
                        continue;
                    }
                    r4 = r20 + r0;
                    r2 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r21 + 8;
                    writePages[(r20+0)>>>12][((r20+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+4)>>>12][((r21+4)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r20+4)>>>12][((r20+4)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + 8;
                        pc=0x429f0;
                        continue;
                    }
                    r4 = r20 + 8;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r5 = r21 + 16;
                    writePages[(r20+8)>>>12][((r20+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r20+12)>>>12][((r20+12)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + 16;
                        pc=0x429f0;
                        continue;
                    }
                    r4 = r20 + 16;
                    r2 = readPages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff];
                    r5 = r21 + 24;
                    writePages[(r20+16)>>>12][((r20+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+20)>>>12][((r21+20)>>>2)&0x3ff];
                    r4 = r20 + 24;
                    writePages[(r20+20)>>>12][((r20+20)>>>2)&0x3ff] = r3;
                case 0x429f0:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                case 0x42a00:
                    pc=0x42a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42a00() throws ExecutionException { /* 0x42a00 - 0x42c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42a00:
                    r4 = r4 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                case 0x42a14:
                    r4 = r30 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x42a20;
                    pc=0x22000;
                    run_22000(); return;
                case 0x42a20:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x42a28;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x42a28:
                    r2 = r20 + r0;
                case 0x42a2c:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x42a5c:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x42a68;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x42a68:
                    /* Next insn is delay slot */ 
                    pc=0x42a14;
                    continue;
                case 0x42a70:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r0 + -4;
                    r2 = r2 & r3;
                    r18 = r17 + r2;
                    r16 = r19 + r0;
                case 0x42a84:
                    r4 = r18 - r22;
                    r2 = (r4&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42ac8;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = r16 + r18;
                    r2 = r2 & 1;
                    r2 = r2 | r18;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff];
                    r2 = r2 | 1;
                    writePages[(r3+4)>>>12][((r3+4)>>>2)&0x3ff] = r2;
                case 0x42ab8:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x42ac0;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x42ac0:
                    /* Next insn is delay slot */ 
                    r2 = r16 + 8;
                    pc=0x42a2c;
                    continue;
                case 0x42ac8:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r5 = r16 + r22;
                    r2 = r2 & 1;
                    r2 = r2 | r22;
                    r3 = r4 | 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                    r4 = r5 + r4;
                    writePages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff];
                    r5 = r5 + 8;
                    r2 = r2 | 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x42b00;
                    pc=0x22000;
                    run_22000(); return;
                case 0x42b00:
                    /* Next insn is delay slot */ 
                    pc=0x42ab8;
                    continue;
                case 0x42b08:
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x42b10;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x42b10:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=0x42a2c;
                    continue;
                case 0x42b18:
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r16 = r18 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r18 = r3 + r0;
                case 0x42b30:
                    r6 = r17 + -4;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r20 = r16 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42bd4;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    r5 = r21 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + r0;
                        pc=0x42bac;
                        continue;
                    }
                    r4 = r20 + r0;
                    r2 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r21 + 8;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+4)>>>12][((r21+4)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r16+12)>>>12][((r16+12)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r16 + 16;
                        pc=0x42bac;
                        continue;
                    }
                    r4 = r16 + 16;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r5 = r21 + 16;
                    writePages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r16+20)>>>12][((r16+20)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r16 + 24;
                        pc=0x42bac;
                        continue;
                    }
                    r4 = r16 + 24;
                    r2 = readPages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff];
                    r5 = r21 + 24;
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+20)>>>12][((r21+20)>>>2)&0x3ff];
                    r4 = r16 + 32;
                    writePages[(r16+28)>>>12][((r16+28)>>>2)&0x3ff] = r3;
                case 0x42bac:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                    pc=0x42a84;
                    continue;
                case 0x42bd4:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x42be0;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x42be0:
                    /* Next insn is delay slot */ 
                    pc=0x42a84;
                    continue;
                case 0x42be8:
                    r4 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r16 = r18 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                case 0x42c00:
                    pc=0x42c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42c00() throws ExecutionException { /* 0x42c00 - 0x42e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42c00:
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r18 = r7 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    pc=0x42b30;
                    run_42a00(); return;
                case 0x42c14:
                    r3 = r4 + r6;
                    r3 = r3 + r17;
                    r2 = r22 + 16;
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                        pc=0x42930;
                        run_42800(); return;
                    }
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r2 = readPages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff];
                    r4 = readPages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff];
                    r6 = r17 + -4;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    r2 = (r6&0xffffffffL) < (37&0xffffffffL) ? 1 : 0;
                    r20 = r18 + 8;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x42d14;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (20&0xffffffffL) ? 1 : 0;
                    r5 = r21 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r20 + r0;
                        pc=0x42cb8;
                        continue;
                    }
                    r4 = r20 + r0;
                    r2 = readPages[(r21+0)>>>12][((r21+0)>>>2)&0x3ff];
                    r5 = r21 + 8;
                    writePages[(r18+8)>>>12][((r18+8)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+4)>>>12][((r21+4)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (28&0xffffffffL) ? 1 : 0;
                    writePages[(r18+12)>>>12][((r18+12)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r18 + 16;
                        pc=0x42cb8;
                        continue;
                    }
                    r4 = r18 + 16;
                    r2 = readPages[(r21+8)>>>12][((r21+8)>>>2)&0x3ff];
                    r5 = r21 + 16;
                    writePages[(r18+16)>>>12][((r18+16)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+12)>>>12][((r21+12)>>>2)&0x3ff];
                    r2 = (r6&0xffffffffL) < (36&0xffffffffL) ? 1 : 0;
                    writePages[(r18+20)>>>12][((r18+20)>>>2)&0x3ff] = r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r18 + 24;
                        pc=0x42cb8;
                        continue;
                    }
                    r4 = r18 + 24;
                    r2 = readPages[(r21+16)>>>12][((r21+16)>>>2)&0x3ff];
                    r5 = r21 + 24;
                    writePages[(r18+24)>>>12][((r18+24)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r21+20)>>>12][((r21+20)>>>2)&0x3ff];
                    r4 = r18 + 32;
                    writePages[(r18+28)>>>12][((r18+28)>>>2)&0x3ff] = r3;
                case 0x42cb8:
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r5 = r5 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r4 = r4 + 4;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r3;
                case 0x42cdc:
                    r3 = r23 + -21344;
                    r4 = r18 + r22;
                    writePages[(r3+8)>>>12][((r3+8)>>>2)&0x3ff] = r4;
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 - r22;
                    r2 = r2 | 1;
                    writePages[(r4+4)>>>12][((r4+4)>>>2)&0x3ff] = r2;
                    r3 = readPages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff];
                    r3 = r3 & 1;
                    r3 = r3 | r22;
                    /* Next insn is delay slot */ 
                    writePages[(r18+4)>>>12][((r18+4)>>>2)&0x3ff] = r3;
                    pc=0x42a20;
                    run_42a00(); return;
                case 0x42d14:
                    r4 = r20 + r0;
                    /* Next insn is delay slot */ 
                    r5 = r21 + r0;
                    r31=0x42d20;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x42d20:
                    /* Next insn is delay slot */ 
                    pc=0x42cdc;
                    continue;
                case 0x42d28:
                    r4 = readPages[(r5+12)>>>12][((r5+12)>>>2)&0x3ff];
                    r2 = readPages[(r5+8)>>>12][((r5+8)>>>2)&0x3ff];
                    r18 = r3 + r0;
                    writePages[(r2+12)>>>12][((r2+12)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    writePages[(r4+8)>>>12][((r4+8)>>>2)&0x3ff] = r2;
                    pc=0x42a84;
                    run_42a00(); return;
                case 0x42d40:
                    r3 = r4 + r17;
                    r2 = r22 + 16;
                    r2 = r3 < r2 ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x428e0;
                        run_42800(); return;
                    }
                    r3 = r3 - r22;
                    r2 = r19 + r22;
                    r3 = r3 | 1;
                    writePages[(r2+4)>>>12][((r2+4)>>>2)&0x3ff] = r3;
                    r4 = readPages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff];
                    writePages[(r8+8)>>>12][((r8+8)>>>2)&0x3ff] = r2;
                    r4 = r4 & 1;
                    r4 = r4 | r22;
                    writePages[(r19+4)>>>12][((r19+4)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    r4 = r30 + r0;
                    r31=0x42d80;
                    pc=0x24e00;
                    run_24e00(); return;
                case 0x42d80:
                    /* Next insn is delay slot */ 
                    r2 = r19 + 8;
                    pc=0x42a2c;
                    run_42a00(); return;
                case 0x42d88:
                    r5 = r0 + r0;
                    /* Next insn is delay slot */ 
                    r4 = r0 + r0;
                    pc=0x428e0;
                    run_42800(); return;
                case 0x42d94:
                    r4 = readPages[(r5+4)>>>12][((r5+4)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x428c4;
                    run_42800(); return;
                case 0x42da0:
                    /* Next insn is delay slot */ 
                    r5 = r6 + r0;
                    r31=0x42da8;
                    pc=0x24200;
                    run_24200(); return;
                case 0x42da8:
                    /* Next insn is delay slot */ 
                    pc=0x42a2c;
                    run_42a00(); return;
                case 0x42e00:
                    pc=0x42e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_42e00() throws ExecutionException { /* 0x42e00 - 0x43000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x42e00:
                    r5 = f12;
                    r4 = f13;
                    r3 = 32767 << 16;
                    r2 = r0 - r5;
                    r2 = r2 | r5;
                    r3 = r3 | 65535;
                    r3 = r3 & r4;
                    r2 = r2 >>> 31;
                    r3 = r3 | r2;
                    r4 = 32752 << 16;
                    r3 = r4 - r3;
                    r2 = r0 - r3;
                    r3 = r3 | r2;
                    r3 = r3 >>> 31;
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r2 - r3;
                    pc=r31;
                    return;
                case 0x43000:
                    pc=0x43000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43000() throws ExecutionException { /* 0x43000 - 0x43200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43000:
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r31;
                    r2 = readPages[(r4+600)>>>12][((r4+600)>>>2)&0x3ff];
                    r16 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43034;
                        continue;
                    }
                case 0x4301c:
                    r3 = r0 + r0;
                case 0x43020:
                    r31 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 24;
                    pc=r31;
                    return;
                case 0x43034:
                    /* Next insn is delay slot */ 
                    r5 = r0 + 128;
                    r31=0x4303c;
                    pc=0x24200;
                    run_24200(); return;
                case 0x4303c:
                    writePages[(r16+600)>>>12][((r16+600)>>>2)&0x3ff] = r2;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x43020;
                        continue;
                    }
                    r3 = r0 + -1;
                    r3 = r0 + 31;
                case 0x4304c:
                    r3 = r3 + -1;
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r0;
                    if(r3 >= 0) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 4;
                        pc=0x4304c;
                        continue;
                    }
                    r2 = r2 + 4;
                    /* Next insn is delay slot */ 
                    pc=0x4301c;
                    continue;
                case 0x43200:
                    pc=0x43200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43200() throws ExecutionException { /* 0x43200 - 0x43400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43200:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r31;
                    r16 = r4 + r0;
                    r17 = r5 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r18 = r6 + r0;
                        pc=0x43250;
                        continue;
                    }
                    r18 = r6 + r0;
                    r2 = r0 + 22;
                    r3 = r0 + -1;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                case 0x43234:
                    r31 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x43250:
                    r5 = readPages[(r4+600)>>>12][((r4+600)>>>2)&0x3ff];
                    if(r5 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43274;
                        continue;
                    }
                case 0x43260:
                    r2 = r17 << 2;
                    r2 = r2 + r5;
                    r3 = readPages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    writePages[(r2+0)>>>12][((r2+0)>>>2)&0x3ff] = r18;
                    pc=0x43234;
                    continue;
                case 0x43274:
                    /* Next insn is delay slot */ 
                    r31=0x4327c;
                    pc=0x43000;
                    run_43000(); return;
                case 0x4327c:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x43234;
                        continue;
                    }
                    r3 = r0 + -1;
                    r5 = readPages[(r16+600)>>>12][((r16+600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43260;
                    continue;
                case 0x43400:
                    pc=0x43400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43400() throws ExecutionException { /* 0x43400 - 0x43600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43400:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r16 = r5 + r0;
                        pc=0x434d4;
                        continue;
                    }
                    r16 = r5 + r0;
                    r3 = readPages[(r4+600)>>>12][((r4+600)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x434b8;
                        continue;
                    }
                case 0x43430:
                    r2 = r16 << 2;
                    r4 = r2 + r3;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43498;
                        continue;
                    }
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + r0;
                        pc=0x43470;
                        continue;
                    }
                    r5 = r0 + r0;
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x43488;
                        continue;
                    }
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    pc=r3;
                    r31=0x4346c;
                    return;
                case 0x4346c:
                    r5 = r0 + r0;
                case 0x43470:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x43488:
                    r2 = r0 + 22;
                    r5 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r17+0)>>>12][((r17+0)>>>2)&0x3ff] = r2;
                    pc=0x43470;
                    continue;
                case 0x43498:
                    /* Next insn is delay slot */ 
                    r4 = r17 + r0;
                    r31=0x434a0;
                    pc=0x2e020;
                    run_2e000(); return;
                case 0x434a0:
                    r5 = r2 + r0;
                    r4 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r16 + r0;
                    r31=0x434b0;
                    pc=0x2dfe0;
                    run_2de00(); return;
                case 0x434b0:
                    /* Next insn is delay slot */ 
                    r5 = r2 + r0;
                    pc=0x43470;
                    continue;
                case 0x434b8:
                    /* Next insn is delay slot */ 
                    r31=0x434c0;
                    pc=0x43000;
                    run_43000(); return;
                case 0x434c0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x43470;
                        continue;
                    }
                    r5 = r0 + -1;
                    r3 = readPages[(r17+600)>>>12][((r17+600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43430;
                    continue;
                case 0x434d4:
                    r2 = r0 + 22;
                    r5 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    pc=0x43470;
                    continue;
                case 0x43600:
                    pc=0x43600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43600() throws ExecutionException { /* 0x43600 - 0x43800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43600:
                    r29 = r29 + -32;
                    r2 = (r5&0xffffffffL) < (32&0xffffffffL) ? 1 : 0;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r16 = r5 + r0;
                    r17 = r4 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x43674;
                        continue;
                    }
                    r5 = r0 + -1;
                    r3 = readPages[(r4+600)>>>12][((r4+600)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4368c;
                        continue;
                    }
                case 0x43634:
                    r2 = r16 << 2;
                    r4 = r2 + r3;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r5 = r0 + 1;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x43674;
                        continue;
                    }
                    r2 = r0 + -1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 2;
                        pc=0x43674;
                        continue;
                    }
                    r5 = r0 + 2;
                    r2 = r0 + 1;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + 3;
                        pc=0x43674;
                        continue;
                    }
                    r5 = r0 + 3;
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    pc=r3;
                    r31=0x43670;
                    return;
                case 0x43670:
                    r5 = r0 + r0;
                case 0x43674:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r5 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x4368c:
                    /* Next insn is delay slot */ 
                    r31=0x43694;
                    pc=0x43000;
                    run_43000(); return;
                case 0x43694:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r0 + -1;
                        pc=0x43674;
                        continue;
                    }
                    r5 = r0 + -1;
                    r3 = readPages[(r17+600)>>>12][((r17+600)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x43634;
                    continue;
                case 0x43800:
                    pc=0x43800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43800() throws ExecutionException { /* 0x43800 - 0x43a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43800:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x43818;
                    pc=0x43400;
                    run_43400(); return;
                case 0x43818:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43a00:
                    pc=0x43a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43a00() throws ExecutionException { /* 0x43a00 - 0x43c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43a00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x43a20;
                    pc=0x43200;
                    run_43200(); return;
                case 0x43a20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43c00:
                    pc=0x43c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43c00() throws ExecutionException { /* 0x43c00 - 0x43e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43c00:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x43c14;
                    pc=0x43000;
                    run_43000(); return;
                case 0x43c14:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x43e00:
                    pc=0x43e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_43e00() throws ExecutionException { /* 0x43e00 - 0x44000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x43e00:
                    r5 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x43e18;
                    pc=0x43600;
                    run_43600(); return;
                case 0x43e18:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44000:
                    pc=0x44000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44000() throws ExecutionException { /* 0x44000 - 0x44200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44000:
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    r16 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r6 + -1;
                        pc=0x4402c;
                        continue;
                    }
                    r2 = r6 + -1;
                    r2 = r0 + r0;
                case 0x4402c:
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r4;
                    r5 = r7 + r0;
                    r4 = r29 + 16;
                    r6 = r29 + 136;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r31=0x44048;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x44048:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4405c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4405c:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x44200:
                    pc=0x44200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44200() throws ExecutionException { /* 0x44200 - 0x44400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44200:
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    r5 = r6 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r16 + -1;
                        pc=0x44234;
                        continue;
                    }
                    r2 = r16 + -1;
                    r2 = r0 + r0;
                case 0x44234:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    r6 = r29 + 132;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                    r31=0x44250;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x44250:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44264;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x44264:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x44400:
                    pc=0x44400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44400() throws ExecutionException { /* 0x44400 - 0x44600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44400:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x44600:
                    pc=0x44600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44600() throws ExecutionException { /* 0x44600 - 0x44800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44600:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r2 = r0 + 4;
                    r29 = r29 + -120;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    r16 = r5 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    /* Next insn is delay slot */ 
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31=0x4462c;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x4462c:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r2 = 4 << 16;
                    r6 = r16 + r0;
                    r2 = r2 + 17408;
                    r5 = r29 + 16;
                    r7 = r29 + 128;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r4;
                    r31=0x44660;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x44660:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x44800:
                    pc=0x44800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44800() throws ExecutionException { /* 0x44800 - 0x44a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44800:
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -128;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    r2 = r0 + 4;
                    r16 = r4 + r0;
                    r4 = r5 + r0;
                    writePages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff] = r31;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    r17 = r6 + r0;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    /* Next insn is delay slot */ 
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r31=0x44834;
                    pc=0x1d710;
                    run_1d600(); return;
                case 0x44834:
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = 4 << 16;
                    r2 = r2 + 17408;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r4 = r16 + r0;
                    r6 = r17 + r0;
                    r5 = r29 + 16;
                    r7 = r29 + 140;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r0;
                    writePages[(r29+84)>>>12][((r29+84)>>>2)&0x3ff] = r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                    r31=0x4486c;
                    pc=0x2c800;
                    run_2c800(); return;
                case 0x4486c:
                    r31 = readPages[(r29+120)>>>12][((r29+120)>>>2)&0x3ff];
                    r17 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 128;
                    pc=r31;
                    return;
                case 0x44a00:
                    pc=0x44a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44a00() throws ExecutionException { /* 0x44a00 - 0x44c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44a00:
                    r2 = r5 | r4;
                    r2 = r2 & 3;
                    r11 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r4 + r0;
                        pc=0x44a90;
                        continue;
                    }
                    r3 = r4 + r0;
                    r6 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r2 = 65278 << 16;
                    r2 = r2 | 65279;
                    r7 = r4 + r0;
                    r2 = r6 + r2;
                    r4 = ~(r0 | r6);
                    r3 = 32896 << 16;
                    r2 = r2 & r4;
                    r3 = r3 | 32896;
                    r2 = r2 & r3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r5 + r0;
                        pc=0x44a88;
                        continue;
                    }
                    r8 = r5 + r0;
                    r10 = 65278 << 16;
                    r4 = r6 + r0;
                    r10 = r10 | 65279;
                    r9 = r3 + r0;
                    r6 = r11 + r0;
                case 0x44a58:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r4;
                    r5 = r5 + 4;
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    r8 = r8 + 4;
                    r3 = r2 + r10;
                    r4 = r2 + r0;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r9;
                    r7 = r7 + 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + 4;
                        pc=0x44a58;
                        continue;
                    }
                    r6 = r6 + 4;
                case 0x44a88:
                    r3 = r7 + r0;
                    r5 = r8 + r0;
                case 0x44a90:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = r2 << 24;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x44a90;
                        continue;
                    }
                    r3 = r3 + 1;
                    /* Next insn is delay slot */ 
                    r2 = r11 + r0;
                    pc=r31;
                    return;
                case 0x44c00:
                    pc=0x44c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44c00() throws ExecutionException { /* 0x44c00 - 0x44e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44c00:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + r0;
                        pc=0x44c7c;
                        continue;
                    }
                    r2 = r0 + r0;
                    r2 = r4 | r5;
                    r2 = r2 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44c44;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r7 = r4 + r0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r5 + r0;
                        pc=0x44c3c;
                        continue;
                    }
                    r8 = r5 + r0;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44ce4;
                        continue;
                    }
                case 0x44c3c:
                    r4 = r7 + r0;
                    r5 = r8 + r0;
                case 0x44c44:
                    r2 = r6 + r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r6 = r6 + -1;
                        pc=0x44cd4;
                        continue;
                    }
                    r6 = r6 + -1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r7 << 24;
                    r2 = r2 >> 24;
                    r9 = r7 + r0;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x44c84;
                        continue;
                    }
                case 0x44c70:
                    r3 = r7 & 255;
                    r2 = r8 & 255;
                    r2 = r3 - r2;
                case 0x44c7c:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x44c84:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ccc;
                        continue;
                    }
                    r2 = r9 << 24;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ccc;
                        continue;
                    }
                    r4 = r4 + 1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    r5 = r5 + 1;
                    r2 = r7 << 24;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r2 >> 24;
                    r6 = r6 + -1;
                    r9 = r7 + r0;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    if(r2 == r3) {
                        /* Next insn is delay slot */ 
                        pc=0x44c84;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44c70;
                    continue;
                case 0x44ccc:
                    /* Next insn is delay slot */ 
                    r2 = r0 + r0;
                    pc=r31;
                    return;
                case 0x44cd4:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r7 = tmp;
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    /* Next insn is delay slot */ 
                    pc=0x44c70;
                    continue;
                case 0x44ce4:
                    r10 = 65278 << 16;
                    r9 = 32896 << 16;
                    r10 = r10 | 65279;
                    r9 = r9 | 32896;
                case 0x44cf4:
                    r6 = r6 + -4;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ccc;
                        continue;
                    }
                    r2 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r3 = r2 + r10;
                    r2 = ~(r0 | r2);
                    r3 = r3 & r2;
                    r3 = r3 & r9;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ccc;
                        continue;
                    }
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    r7 = r7 + 4;
                    r4 = r4 + 4;
                    r8 = r8 + 4;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r5 = r5 + 4;
                        pc=0x44c3c;
                        continue;
                    }
                    r5 = r5 + 4;
                    r3 = readPages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff];
                    r2 = readPages[(r5+0)>>>12][((r5+0)>>>2)&0x3ff];
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x44cf4;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    pc=0x44c3c;
                    continue;
                case 0x44e00:
                    pc=0x44e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_44e00() throws ExecutionException { /* 0x44e00 - 0x45000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x44e00:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r8 = r4 + r0;
                        pc=0x44e68;
                        continue;
                    }
                    r8 = r4 + r0;
                    r12 = r6 & 3;
                    r6 = r6 - r12;
                    r7 = r4 + r0;
                    r3 = r5 + r0;
                case 0x44e1c:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    addr=r3+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r9 = tmp;
                    addr=r3+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r10 = tmp;
                    addr=r3+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r11 = tmp;
                    r5 = r5 + 4;
                    r3 = r3 + 4;
                    r6 = r6 + -4;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+0;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x44fa0;
                        continue;
                    }
                    addr=r7+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r9 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+1;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x44f94;
                        continue;
                    }
                    addr=r7+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r9&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r10 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+2;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x44f88;
                        continue;
                    }
                    addr=r7+2;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r10&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r11 == r0) {
                        /* Next insn is delay slot */ 
                        addr=r7+3;
                        tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                        tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                        writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                        pc=0x44ebc;
                        continue;
                    }
                    addr=r7+3;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r11&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 4;
                    if(r6 != r0) {
                        /* Next insn is delay slot */ 
                        r7 = r7 + 4;
                        pc=0x44e1c;
                        continue;
                    }
                    r7 = r7 + 4;
                    r6 = r12 + r0;
                case 0x44e68:
                    r6 = r8 + r6;
                    if(r8 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x44e90;
                        continue;
                    }
                case 0x44e74:
                    addr=r5+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r5 = r5 + 1;
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 1;
                        pc=0x44e98;
                        continue;
                    }
                    r8 = r8 + 1;
                    if(r8 != r6) {
                        /* Next insn is delay slot */ 
                        pc=0x44e74;
                        continue;
                    }
                case 0x44e90:
                    /* Next insn is delay slot */ 
                    r2 = r4 + r0;
                    pc=r31;
                    return;
                case 0x44e98:
                    if(r8 == r6) {
                        /* Next insn is delay slot */ 
                        pc=0x44e90;
                        continue;
                    }
                    r2 = r8 + r0;
                case 0x44ea4:
                    r8 = r8 + 1;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r8 != r6) {
                        /* Next insn is delay slot */ 
                        r2 = r2 + 1;
                        pc=0x44ea4;
                        continue;
                    }
                    r2 = r2 + 1;
                    /* Next insn is delay slot */ 
                    pc=0x44e90;
                    continue;
                case 0x44ebc:
                    r6 = r6 + r12;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r8 = r8 + 4;
                        pc=0x44ef8;
                        continue;
                    }
                    r8 = r8 + 4;
                    r2 = r8 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ef8;
                        continue;
                    }
                    r3 = r8 + r0;
                case 0x44ed8:
                    r6 = r6 + -1;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r8 = r8 + 1;
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r3 + 1;
                        pc=0x44ef8;
                        continue;
                    }
                    r3 = r3 + 1;
                    r2 = r8 & 3;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44ed8;
                        continue;
                    }
                case 0x44ef8:
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f2c;
                        continue;
                    }
                    r3 = r8 + -4;
                case 0x44f08:
                    r6 = r6 + -16;
                    r3 = r3 + 16;
                    r2 = (r6&0xffffffffL) < (16&0xffffffffL) ? 1 : 0;
                    r8 = r8 + 16;
                    writePages[(r3+-12)>>>12][((r3+-12)>>>2)&0x3ff] = r0;
                    writePages[(r3+-8)>>>12][((r3+-8)>>>2)&0x3ff] = r0;
                    writePages[(r3+-4)>>>12][((r3+-4)>>>2)&0x3ff] = r0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                        pc=0x44f08;
                        continue;
                    }
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r0;
                case 0x44f2c:
                    r2 = (r6&0xffffffffL) < (8&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f48;
                        continue;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r0;
                    writePages[(r8+4)>>>12][((r8+4)>>>2)&0x3ff] = r0;
                    r6 = r6 + -8;
                    r8 = r8 + 8;
                case 0x44f48:
                    r2 = (r6&0xffffffffL) < (4&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f60;
                        continue;
                    }
                    writePages[(r8+0)>>>12][((r8+0)>>>2)&0x3ff] = r0;
                    r6 = r6 + -4;
                    r8 = r8 + 4;
                case 0x44f60:
                    r2 = (r6&0xffffffffL) < (2&0xffffffffL) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44f78;
                        continue;
                    }
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r0&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r6 = r6 + -2;
                    r8 = r8 + 2;
                case 0x44f78:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x44e90;
                        continue;
                    }
                    /* Next insn is delay slot */ 
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    pc=0x44e90;
                    continue;
                case 0x44f88:
                    r6 = r6 + 1;
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x44ebc;
                    continue;
                case 0x44f94:
                    r6 = r6 + 1;
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x44f88;
                    continue;
                case 0x44fa0:
                    r6 = r6 + 1;
                    /* Next insn is delay slot */ 
                    r8 = r8 + -1;
                    pc=0x44f94;
                    continue;
                case 0x45000:
                    pc=0x45000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45000() throws ExecutionException { /* 0x45000 - 0x45200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45000:
                    r29 = r29 + -64;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    r2 = 5 << 16;
                    r19 = r5 + r0;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    writePages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff] = r5;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r6;
                    r22 = r7 + r0;
                    r30 = r0 + r0;
                    r5 = r2 + -23196;
                    r4 = r19 + r0;
                case 0x45050:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r19 = r19 + 1;
                    r3 = r18 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 1;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45050;
                        continue;
                    }
                    r2 = r0 + 45;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452f8;
                        run_45200(); return;
                    }
                    r2 = r0 + 43;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452ec;
                        run_45200(); return;
                    }
                case 0x45088:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                    r2 = r0 + 16;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452b4;
                        run_45200(); return;
                    }
                case 0x4509c:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x450b4;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + 8;
                        pc=0x450b4;
                        continue;
                    }
                    r22 = r0 + 8;
                    r22 = r0 + 10;
                case 0x450b4:
                    r20 = 32768 << 16;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        r21 = r0 + 0;
                        pc=0x450cc;
                        continue;
                    }
                    r21 = r0 + 0;
                    r20 = 32767 << 16;
                    r20 = r20 | 65535;
                    r21 = r0 + -1;
                case 0x450cc:
                    r23 = r22 >> 31;
                    r4 = r20 + r0;
                    r5 = r21 + r0;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r22 + r0;
                    r31=0x450e4;
                    pc=0x1dd3c;
                    run_1dc00(); return;
                case 0x450e4:
                    r4 = r20 + r0;
                    r5 = r21 + r0;
                    r6 = r23 + r0;
                    r7 = r22 + r0;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r3;
                    r31=0x450fc;
                    pc=0x1d768;
                    run_1d600(); return;
                case 0x450fc:
                    r20 = r2 + r0;
                    r2 = 5 << 16;
                    r21 = r3 + r0;
                    r8 = r0 + r0;
                    r9 = r0 + r0;
                    r11 = r0 + r0;
                    r12 = r2 + -23196;
                    r10 = r19 + r0;
                case 0x4511c:
                    r2 = r18 + r12;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r4 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45290;
                        run_45200(); return;
                    }
                    r18 = r18 + -48;
                case 0x45138:
                    r2 = r18 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x451e8;
                        continue;
                    }
                    if(r11 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x451e0;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x451e0;
                        continue;
                    }
                    if(r8 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x451b8;
                        continue;
                    }
                case 0x45160:
                    { long hilo = (r9 & 0xffffffffL) * (r22 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r2 = r18 >> 31;
                    r11 = r0 + 1;
                    r6 = hi;
                    r7 = lo;
                    { long hilo = (long)(r9) * ((long)r23); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r7 + r18;
                    r4 = lo;
                    r4 = r4 + r6;
                    { long hilo = (long)(r22) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r6 = r4 + r5;
                    r8 = r6 + r2;
                    r4 = ((r9 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 + r4;
                case 0x451a8:
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r19 = r19 + 1;
                    /* Next insn is delay slot */ 
                    r10 = r10 + 1;
                    pc=0x4511c;
                    continue;
                case 0x451b8:
                    r2 = ((r21 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x451e0;
                        continue;
                    }
                    if(r9 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x45160;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 < r18 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45160;
                        continue;
                    }
                case 0x451e0:
                    /* Next insn is delay slot */ 
                    r11 = r0 + -1;
                    pc=0x451a8;
                    continue;
                case 0x451e8:
                    if(r11 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45268;
                        run_45200(); return;
                    }
                    if(r30 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45208;
                        run_45200(); return;
                    }
                    r9 = r0 - r9;
                    r8 = r0 - r8;
                case 0x45200:
                    pc=0x45200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45200() throws ExecutionException { /* 0x45200 - 0x45400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45200:
                    r2 = ((r0 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 - r2;
                case 0x45208:
                    r2 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45230;
                        continue;
                    }
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r19 + -1;
                        pc=0x45224;
                        continue;
                    }
                    r2 = r19 + -1;
                    r2 = readPages[(r29+68)>>>12][((r29+68)>>>2)&0x3ff];
                case 0x45224:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x45230:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r8 + r0;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x45268:
                    r8 = 32768 << 16;
                    if(r30 != r0) {
                        /* Next insn is delay slot */ 
                        r9 = r0 + 0;
                        pc=0x45280;
                        continue;
                    }
                    r9 = r0 + 0;
                    r8 = 32767 << 16;
                    r8 = r8 | 65535;
                    r9 = r0 + -1;
                case 0x45280:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r0 + 34;
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    pc=0x45208;
                    continue;
                case 0x45290:
                    r2 = r4 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x451e8;
                        run_45000(); return;
                    }
                    r2 = r4 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r18 + -55;
                        pc=0x452ac;
                        continue;
                    }
                    r3 = r18 + -55;
                    r3 = r18 + -87;
                case 0x452ac:
                    /* Next insn is delay slot */ 
                    r18 = r3 + r0;
                    pc=0x45138;
                    run_45000(); return;
                case 0x452b4:
                    r2 = r0 + 48;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4509c;
                        run_45000(); return;
                    }
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 120;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x452dc;
                        continue;
                    }
                    r2 = r0 + 88;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4509c;
                        run_45000(); return;
                    }
                case 0x452dc:
                    addr=r19+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r22 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r19 = r19 + 2;
                    pc=0x4509c;
                    run_45000(); return;
                case 0x452ec:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    r19 = r19 + 1;
                    pc=0x45088;
                    run_45000(); return;
                case 0x452f8:
                    /* Next insn is delay slot */ 
                    r30 = r0 + 1;
                    pc=0x452ec;
                    continue;
                case 0x45400:
                    pc=0x45400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45400() throws ExecutionException { /* 0x45400 - 0x45600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45400:
                    r2 = 5 << 16;
                    r11 = r5 + r0;
                    r25 = r0 + r0;
                    r10 = r2 + -23196;
                    r8 = r5 + r0;
                case 0x45414:
                    addr=r8+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r11 = r11 + 1;
                    r3 = r9 + r10;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r8 = r8 + 1;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45414;
                        continue;
                    }
                    r2 = r0 + 45;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x455cc;
                        continue;
                    }
                    r2 = r0 + 43;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x455c0;
                        continue;
                    }
                case 0x4544c:
                    if(r7 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45588;
                        continue;
                    }
                    r2 = r0 + 16;
                    if(r7 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45588;
                        continue;
                    }
                case 0x45460:
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45478;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r9 == r2) {
                        /* Next insn is delay slot */ 
                        r7 = r0 + 8;
                        pc=0x45478;
                        continue;
                    }
                    r7 = r0 + 8;
                    r7 = r0 + 10;
                case 0x45478:
                    r2 = r0 + -1;
                    if(r7!=0) {
                    hi = (int)((r2 & 0xffffffffL) % (r7 & 0xffffffffL)); lo = (int)((r2 & 0xffffffffL) / (r7 & 0xffffffffL));
                    }
                    r2 = 5 << 16;
                    if(r7 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45490;
                        continue;
                    }
                    throw new ExecutionException("Break");
                case 0x45490:
                    r12 = r0 + r0;
                    r13 = r0 + r0;
                    r15 = r2 + -23196;
                    r10 = r11 + r0;
                    r24 = hi;
                    r14 = lo;
                case 0x454a8:
                    r2 = r9 + r15;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r8 = tmp;
                    r3 = r8 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45564;
                        continue;
                    }
                    r9 = r9 + -48;
                case 0x454c4:
                    r2 = r9 < r7 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45520;
                        continue;
                    }
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45518;
                        continue;
                    }
                    r2 = ((r14 & 0xffffffffL) < (r12 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45518;
                        continue;
                    }
                    if(r12 == r14) {
                        /* Next insn is delay slot */ 
                        pc=0x4550c;
                        continue;
                    }
                case 0x454ec:
                    { long hilo = (long)(r12) * ((long)r7); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r13 = r0 + 1;
                    r12 = lo;
                    r12 = r12 + r9;
                case 0x454fc:
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r11 = r11 + 1;
                    /* Next insn is delay slot */ 
                    r10 = r10 + 1;
                    pc=0x454a8;
                    continue;
                case 0x4550c:
                    r2 = r24 < r9 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x454ec;
                        continue;
                    }
                case 0x45518:
                    /* Next insn is delay slot */ 
                    r13 = r0 + -1;
                    pc=0x454fc;
                    continue;
                case 0x45520:
                    if(r13 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45554;
                        continue;
                    }
                    if(r25 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45534;
                        continue;
                    }
                    r12 = r0 - r12;
                case 0x45534:
                    if(r6 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4554c;
                        continue;
                    }
                    if(r13 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r11 + -1;
                        pc=0x45548;
                        continue;
                    }
                    r2 = r11 + -1;
                    r2 = r5 + r0;
                case 0x45548:
                    writePages[(r6+0)>>>12][((r6+0)>>>2)&0x3ff] = r2;
                case 0x4554c:
                    /* Next insn is delay slot */ 
                    r2 = r12 + r0;
                    pc=r31;
                    return;
                case 0x45554:
                    r2 = r0 + 34;
                    r12 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r4+0)>>>12][((r4+0)>>>2)&0x3ff] = r2;
                    pc=0x45534;
                    continue;
                case 0x45564:
                    r2 = r8 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45520;
                        continue;
                    }
                    r2 = r8 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r9 + -55;
                        pc=0x45580;
                        continue;
                    }
                    r3 = r9 + -55;
                    r3 = r9 + -87;
                case 0x45580:
                    /* Next insn is delay slot */ 
                    r9 = r3 + r0;
                    pc=0x454c4;
                    continue;
                case 0x45588:
                    r2 = r0 + 48;
                    if(r9 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45460;
                        continue;
                    }
                    addr=r11+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 120;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x455b0;
                        continue;
                    }
                    r2 = r0 + 88;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45460;
                        continue;
                    }
                case 0x455b0:
                    addr=r11+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    r7 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r11 = r11 + 2;
                    pc=0x45460;
                    continue;
                case 0x455c0:
                    addr=r11+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r9 = tmp;
                    /* Next insn is delay slot */ 
                    r11 = r11 + 1;
                    pc=0x4544c;
                    continue;
                case 0x455cc:
                    /* Next insn is delay slot */ 
                    r25 = r0 + 1;
                    pc=0x455c0;
                    continue;
                case 0x45600:
                    pc=0x45600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45600() throws ExecutionException { /* 0x45600 - 0x45800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45600:
                    r3 = r5 + r0;
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r7 = r6 + r0;
                    r5 = r2 + r0;
                    r6 = r3 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x45628;
                    pc=0x45400;
                    run_45400(); return;
                case 0x45628:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45800:
                    pc=0x45800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45800() throws ExecutionException { /* 0x45800 - 0x45a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45800:
                    r29 = r29 + -64;
                    writePages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff] = r30;
                    r2 = 5 << 16;
                    r30 = r5 + r0;
                    writePages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff] = r22;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r19;
                    writePages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff] = r4;
                    r19 = r5 + r0;
                    writePages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff] = r31;
                    writePages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff] = r23;
                    writePages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff] = r21;
                    writePages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff] = r20;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r18;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r17;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r16;
                    writePages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff] = r6;
                    r22 = r7 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r0;
                    r5 = r2 + -23196;
                    r4 = r30 + r0;
                case 0x45850:
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r19 = r19 + 1;
                    r3 = r18 + r5;
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r4 = r4 + 1;
                    r2 = r2 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45850;
                        continue;
                    }
                    r2 = r0 + 45;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45ad0;
                        run_45a00(); return;
                    }
                    r2 = r0 + 43;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45ac4;
                        run_45a00(); return;
                    }
                case 0x45888:
                    if(r22 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a8c;
                        run_45a00(); return;
                    }
                    r2 = r0 + 16;
                    if(r22 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45a8c;
                        run_45a00(); return;
                    }
                case 0x4589c:
                    if(r22 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x458b4;
                        continue;
                    }
                    r2 = r0 + 48;
                    if(r18 == r2) {
                        /* Next insn is delay slot */ 
                        r22 = r0 + 8;
                        pc=0x458b4;
                        continue;
                    }
                    r22 = r0 + 8;
                    r22 = r0 + 10;
                case 0x458b4:
                    r23 = r22 >> 31;
                    r4 = r0 + -1;
                    r5 = r0 + -1;
                    r6 = r23 + r0;
                    /* Next insn is delay slot */ 
                    r7 = r22 + r0;
                    r31=0x458cc;
                    pc=0x1d768;
                    run_1d600(); return;
                case 0x458cc:
                    r4 = r0 + -1;
                    r5 = r0 + -1;
                    r6 = r23 + r0;
                    r7 = r22 + r0;
                    r20 = r2 + r0;
                    /* Next insn is delay slot */ 
                    r21 = r3 + r0;
                    r31=0x458e8;
                    pc=0x1dd3c;
                    run_1dc00(); return;
                case 0x458e8:
                    r2 = 5 << 16;
                    r13 = r3 + r0;
                    r8 = r0 + r0;
                    r9 = r0 + r0;
                    r11 = r0 + r0;
                    r12 = r2 + -23196;
                    r10 = r19 + r0;
                case 0x45904:
                    r2 = r18 + r12;
                    addr=r2+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r4 = tmp;
                    r3 = r4 & 4;
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a68;
                        run_45a00(); return;
                    }
                    r18 = r18 + -48;
                case 0x45920:
                    r2 = r18 < r22 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x459c8;
                        continue;
                    }
                    if(r11 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x459c0;
                        continue;
                    }
                    r2 = ((r20 & 0xffffffffL) < (r8 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x459c0;
                        continue;
                    }
                    if(r8 == r20) {
                        /* Next insn is delay slot */ 
                        pc=0x459a0;
                        continue;
                    }
                case 0x45948:
                    { long hilo = (r9 & 0xffffffffL) * (r22 & 0xffffffffL); hi = (int) (hilo >>> 32); lo = (int) hilo; } 
                    r2 = r18 >> 31;
                    r11 = r0 + 1;
                    r6 = hi;
                    r7 = lo;
                    { long hilo = (long)(r9) * ((long)r23); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r9 = r7 + r18;
                    r4 = lo;
                    r4 = r4 + r6;
                    { long hilo = (long)(r22) * ((long)r8); hi = (int) (hilo >>> 32); lo = (int) hilo; }
                    r5 = lo;
                    r6 = r4 + r5;
                    r8 = r6 + r2;
                    r4 = ((r9 & 0xffffffffL) < (r18 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 + r4;
                case 0x45990:
                    addr=r10+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r19 = r19 + 1;
                    /* Next insn is delay slot */ 
                    r10 = r10 + 1;
                    pc=0x45904;
                    continue;
                case 0x459a0:
                    r2 = ((r21 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x459c0;
                        continue;
                    }
                    if(r9 != r21) {
                        /* Next insn is delay slot */ 
                        pc=0x45948;
                        continue;
                    }
                    r2 = r13 < r18 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45948;
                        continue;
                    }
                case 0x459c0:
                    /* Next insn is delay slot */ 
                    r11 = r0 + -1;
                    pc=0x45990;
                    continue;
                case 0x459c8:
                    if(r11 < 0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a50;
                        run_45a00(); return;
                    }
                    r2 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x459f0;
                        continue;
                    }
                    r9 = r0 - r9;
                    r8 = r0 - r8;
                    r2 = ((r0 & 0xffffffffL) < (r9 & 0xffffffffL)) ? 1 : 0;
                    r8 = r8 - r2;
                case 0x459f0:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    if(r3 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x45a18;
                        run_45a00(); return;
                    }
                case 0x45a00:
                    pc=0x45a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45a00() throws ExecutionException { /* 0x45a00 - 0x45c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45a00:
                    if(r11 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r19 + -1;
                        pc=0x45a0c;
                        continue;
                    }
                    r2 = r19 + -1;
                    r2 = r30 + r0;
                case 0x45a0c:
                    r3 = readPages[(r29+72)>>>12][((r29+72)>>>2)&0x3ff];
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                case 0x45a18:
                    r31 = readPages[(r29+60)>>>12][((r29+60)>>>2)&0x3ff];
                    r30 = readPages[(r29+56)>>>12][((r29+56)>>>2)&0x3ff];
                    r23 = readPages[(r29+52)>>>12][((r29+52)>>>2)&0x3ff];
                    r22 = readPages[(r29+48)>>>12][((r29+48)>>>2)&0x3ff];
                    r21 = readPages[(r29+44)>>>12][((r29+44)>>>2)&0x3ff];
                    r20 = readPages[(r29+40)>>>12][((r29+40)>>>2)&0x3ff];
                    r19 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r18 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r17 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r16 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r2 = r8 + r0;
                    r3 = r9 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 64;
                    pc=r31;
                    return;
                case 0x45a50:
                    r3 = readPages[(r29+64)>>>12][((r29+64)>>>2)&0x3ff];
                    r2 = r0 + 34;
                    r8 = r0 + -1;
                    r9 = r0 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r3+0)>>>12][((r3+0)>>>2)&0x3ff] = r2;
                    pc=0x459f0;
                    run_45800(); return;
                case 0x45a68:
                    r2 = r4 & 3;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x459c8;
                        run_45800(); return;
                    }
                    r2 = r4 & 1;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r18 + -55;
                        pc=0x45a84;
                        continue;
                    }
                    r3 = r18 + -55;
                    r3 = r18 + -87;
                case 0x45a84:
                    /* Next insn is delay slot */ 
                    r18 = r3 + r0;
                    pc=0x45920;
                    run_45800(); return;
                case 0x45a8c:
                    r2 = r0 + 48;
                    if(r18 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4589c;
                        run_45800(); return;
                    }
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r3 = tmp;
                    r2 = r0 + 120;
                    if(r3 == r2) {
                        /* Next insn is delay slot */ 
                        pc=0x45ab4;
                        continue;
                    }
                    r2 = r0 + 88;
                    if(r3 != r2) {
                        /* Next insn is delay slot */ 
                        pc=0x4589c;
                        run_45800(); return;
                    }
                case 0x45ab4:
                    addr=r19+1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    r22 = r0 + 16;
                    /* Next insn is delay slot */ 
                    r19 = r19 + 2;
                    pc=0x4589c;
                    run_45800(); return;
                case 0x45ac4:
                    addr=r19+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    if((tmp&0x80)!=0) tmp |= 0xffffff00; /* sign extend */
                    r18 = tmp;
                    /* Next insn is delay slot */ 
                    r19 = r19 + 1;
                    pc=0x45888;
                    run_45800(); return;
                case 0x45ad0:
                    r2 = r0 + 1;
                    /* Next insn is delay slot */ 
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r2;
                    pc=0x45ac4;
                    continue;
                case 0x45c00:
                    pc=0x45c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45c00() throws ExecutionException { /* 0x45c00 - 0x45e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45c00:
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x45c14;
                    pc=0x2e2d0;
                    run_2e200(); return;
                case 0x45c14:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x45e00:
                    pc=0x45e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_45e00() throws ExecutionException { /* 0x45e00 - 0x46000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x45e00:
                    r2 = r4 + r0;
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r29 = r29 + -24;
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x45e20;
                    pc=0x2df60;
                    run_2de00(); return;
                case 0x45e20:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46000:
                    pc=0x46000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46000() throws ExecutionException { /* 0x46000 - 0x46200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46000:
                    writePages[(r29+8)>>>12][((r29+8)>>>2)&0x3ff] = r6;
                    writePages[(r29+12)>>>12][((r29+12)>>>2)&0x3ff] = r7;
                    r29 = r29 + -24;
                    r2 = r4 + r0;
                    r7 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r4 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r6 = r5 + r0;
                    r5 = r2 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r31;
                    /* Next insn is delay slot */ 
                    r31=0x4602c;
                    pc=0x2de20;
                    run_2de00(); return;
                case 0x4602c:
                    r31 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r29 = r29 + 24;
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x46200:
                    pc=0x46200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46200() throws ExecutionException { /* 0x46200 - 0x46400 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46200:
                    r29 = r29 + -40;
                    writePages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff] = r19;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r31;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r20;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r18;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    r5 = readPages[(r4+48)>>>12][((r4+48)>>>2)&0x3ff];
                    r2 = r4 + 64;
                    if(r5 == r2) {
                        /* Next insn is delay slot */ 
                        r19 = r4 + r0;
                        pc=0x46290;
                        continue;
                    }
                    r19 = r4 + r0;
                    r18 = readPages[(r4+52)>>>12][((r4+52)>>>2)&0x3ff];
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    r20 = r18 << 1;
                    /* Next insn is delay slot */ 
                    r6 = r20 + r0;
                    r31=0x46240;
                    pc=0x42800;
                    run_42800(); return;
                case 0x46240:
                    r17 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + -1;
                        pc=0x46270;
                        continue;
                    }
                    r2 = r0 + -1;
                    r16 = r17 + r18;
                    r4 = r16 + r0;
                    r5 = r17 + r0;
                    /* Next insn is delay slot */ 
                    r6 = r18 + r0;
                    r31=0x46260;
                    pc=0x2e5dc;
                    run_2e400(); return;
                case 0x46260:
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r16;
                    writePages[(r19+48)>>>12][((r19+48)>>>2)&0x3ff] = r17;
                    writePages[(r19+52)>>>12][((r19+52)>>>2)&0x3ff] = r20;
                case 0x4626c:
                    r2 = r0 + r0;
                case 0x46270:
                    r31 = readPages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff];
                    r20 = readPages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff];
                    r19 = readPages[(r29+28)>>>12][((r29+28)>>>2)&0x3ff];
                    r18 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 40;
                    pc=r31;
                    return;
                case 0x46290:
                    r4 = readPages[(r4+84)>>>12][((r4+84)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r5 = r0 + 1024;
                    r31=0x4629c;
                    pc=0x24200;
                    run_24200(); return;
                case 0x4629c:
                    r17 = r2 + r0;
                    if(r17 == r0) {
                        /* Next insn is delay slot */ 
                        r2 = r0 + -1;
                        pc=0x46270;
                        continue;
                    }
                    r2 = r0 + -1;
                    writePages[(r19+48)>>>12][((r19+48)>>>2)&0x3ff] = r17;
                    r2 = r0 + 1024;
                    r17 = r17 + 1021;
                    writePages[(r19+52)>>>12][((r19+52)>>>2)&0x3ff] = r2;
                    r18 = r0 + 2;
                    r4 = r17 + 2;
                    r3 = r19 + 66;
                case 0x462c4:
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    r18 = r18 + -1;
                    addr=r4+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r2&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = r3 + -1;
                    if(r18 >= 0) {
                        /* Next insn is delay slot */ 
                        r4 = r4 + -1;
                        pc=0x462c4;
                        continue;
                    }
                    r4 = r4 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r19+0)>>>12][((r19+0)>>>2)&0x3ff] = r17;
                    pc=0x4626c;
                    continue;
                case 0x46400:
                    pc=0x46400;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46400() throws ExecutionException { /* 0x46400 - 0x46600 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46400:
                    r29 = r29 + -32;
                    r2 = r0 + -1;
                    writePages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff] = r17;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r31;
                    r17 = r4 + r0;
                    r16 = r5 + r0;
                    if(r4 == r2) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x464e8;
                        continue;
                    }
                    r3 = r0 + -1;
                    r4 = readPages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff];
                    if(r4 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46444;
                        continue;
                    }
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    writePages[(r5+84)>>>12][((r5+84)>>>2)&0x3ff] = r2;
                    r4 = r2 + r0;
                case 0x46444:
                    r2 = readPages[(r4+56)>>>12][((r4+56)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x465c0;
                        continue;
                    }
                case 0x46454:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 & 65503;
                    r3 = r2 & 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    if(r3 != r0) {
                        /* Next insn is delay slot */ 
                        r4 = r2 + r0;
                        pc=0x46498;
                        continue;
                    }
                    r4 = r2 + r0;
                    r2 = r2 & 16;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x464e8;
                        continue;
                    }
                    r3 = r0 + -1;
                    r2 = r4 & 8;
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46598;
                        continue;
                    }
                case 0x46488:
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    r2 = r2 | 4;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x46498:
                    r2 = readPages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff];
                    r17 = r17 & 255;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46518;
                        continue;
                    }
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r3 = readPages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff];
                    r2 = r2 < r3 ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46500;
                        continue;
                    }
                case 0x464c0:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = r3 + -1;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x464d4:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    r2 = r2 + 1;
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r2;
                case 0x464e4:
                    r3 = r17 + r0;
                case 0x464e8:
                    r31 = readPages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff];
                    r17 = readPages[(r29+20)>>>12][((r29+20)>>>2)&0x3ff];
                    r16 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r2 = r3 + r0;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 32;
                    pc=r31;
                    return;
                case 0x46500:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x46508;
                    pc=0x46200;
                    run_46200(); return;
                case 0x46508:
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x464c0;
                        continue;
                    }
                    r3 = r0 + -1;
                    /* Next insn is delay slot */ 
                    pc=0x464e8;
                    continue;
                case 0x46518:
                    r2 = readPages[(r16+16)>>>12][((r16+16)>>>2)&0x3ff];
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4658c;
                        continue;
                    }
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    r2 = ((r2 & 0xffffffffL) < (r3 & 0xffffffffL)) ? 1 : 0;
                    if(r2 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4654c;
                        continue;
                    }
                    addr=r3+-1;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&3)<<3)) & 0xff;
                    r2 = tmp;
                    if(r2 == r17) {
                        /* Next insn is delay slot */ 
                        pc=0x46580;
                        continue;
                    }
                case 0x4654c:
                    r2 = readPages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff];
                    writePages[(r16+56)>>>12][((r16+56)>>>2)&0x3ff] = r3;
                    writePages[(r16+60)>>>12][((r16+60)>>>2)&0x3ff] = r2;
                    r3 = r0 + 3;
                    r2 = r16 + 64;
                    writePages[(r16+48)>>>12][((r16+48)>>>2)&0x3ff] = r2;
                    writePages[(r16+52)>>>12][((r16+52)>>>2)&0x3ff] = r3;
                    r2 = r16 + 66;
                    r3 = r0 + 1;
                    addr=r16+66;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r17&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r16+4)>>>12][((r16+4)>>>2)&0x3ff] = r3;
                    pc=0x464e4;
                    continue;
                case 0x46580:
                    r3 = r3 + -1;
                    /* Next insn is delay slot */ 
                    writePages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff] = r3;
                    pc=0x464d4;
                    continue;
                case 0x4658c:
                    r3 = readPages[(r16+0)>>>12][((r16+0)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    pc=0x4654c;
                    continue;
                case 0x46598:
                    /* Next insn is delay slot */ 
                    r4 = r16 + r0;
                    r31=0x465a0;
                    pc=0x20600;
                    run_20600(); return;
                case 0x465a0:
                    if(r2 != r0) {
                        /* Next insn is delay slot */ 
                        r3 = r0 + -1;
                        pc=0x464e8;
                        continue;
                    }
                    r3 = r0 + -1;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp>>>(((~addr)&2)<<3)) & 0xffff;
                    r2 = tmp;
                    writePages[(r16+8)>>>12][((r16+8)>>>2)&0x3ff] = r0;
                    r2 = r2 & 65527;
                    addr=r16+12;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    writePages[(r16+24)>>>12][((r16+24)>>>2)&0x3ff] = r0;
                    pc=0x46488;
                    continue;
                case 0x465c0:
                    /* Next insn is delay slot */ 
                    r31=0x465c8;
                    pc=0x21400;
                    run_21400(); return;
                case 0x465c8:
                    /* Next insn is delay slot */ 
                    pc=0x46454;
                    continue;
                case 0x46600:
                    pc=0x46600;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46600() throws ExecutionException { /* 0x46600 - 0x46800 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46600:
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    r16 = r5 + r0;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r5 = r6 + r0;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    r6 = r7 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r16 + -1;
                        pc=0x46634;
                        continue;
                    }
                    r2 = r16 + -1;
                    r2 = r0 + r0;
                case 0x46634:
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r2 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r4 = r29 + 16;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r2;
                    r31=0x4664c;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x4664c:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x46660;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x46660:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x46800:
                    pc=0x46800;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46800() throws ExecutionException { /* 0x46800 - 0x46a00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46800:
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r16;
                    r16 = r6 + r0;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    writePages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff] = r31;
                    r6 = r7 + r0;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    if(r16 != r0) {
                        /* Next insn is delay slot */ 
                        r2 = r16 + -1;
                        pc=0x46830;
                        continue;
                    }
                    r2 = r16 + -1;
                    r2 = r0 + r0;
                case 0x46830:
                    r7 = readPages[(r29+136)>>>12][((r29+136)>>>2)&0x3ff];
                    r5 = r29 + 16;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r4;
                    r31=0x46848;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x46848:
                    if(r16 == r0) {
                        /* Next insn is delay slot */ 
                        pc=0x4685c;
                        continue;
                    }
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                case 0x4685c:
                    r31 = readPages[(r29+116)>>>12][((r29+116)>>>2)&0x3ff];
                    r16 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x46a00:
                    pc=0x46a00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46a00() throws ExecutionException { /* 0x46a00 - 0x46c00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46a00:
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r3 = readPages[(r28+-32072)>>>12][((r28+-32072)>>>2)&0x3ff];
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r4;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r4;
                    r2 = r2 | 65535;
                    r4 = r29 + 16;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r31;
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r3;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    r31=0x46a38;
                    pc=0x29e00;
                    run_29e00(); return;
                case 0x46a38:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x46c00:
                    pc=0x46c00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46c00() throws ExecutionException { /* 0x46c00 - 0x46e00 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46c00:
                    r29 = r29 + -120;
                    r2 = r0 + 520;
                    addr=r29+28;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&(0xffff<<((addr&2)<<3)))|((r2&0xffff)<<(((~addr)&2)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    r2 = 32767 << 16;
                    writePages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff] = r5;
                    writePages[(r29+32)>>>12][((r29+32)>>>2)&0x3ff] = r5;
                    r2 = r2 | 65535;
                    r5 = r29 + 16;
                    writePages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff] = r31;
                    writePages[(r29+24)>>>12][((r29+24)>>>2)&0x3ff] = r2;
                    writePages[(r29+36)>>>12][((r29+36)>>>2)&0x3ff] = r2;
                    /* Next insn is delay slot */ 
                    writePages[(r29+100)>>>12][((r29+100)>>>2)&0x3ff] = r4;
                    r31=0x46c34;
                    pc=0x2a000;
                    run_2a000(); return;
                case 0x46c34:
                    r3 = readPages[(r29+16)>>>12][((r29+16)>>>2)&0x3ff];
                    r31 = readPages[(r29+112)>>>12][((r29+112)>>>2)&0x3ff];
                    addr=r3+0;
                    tmp = readPages[(addr)>>>12][((addr)>>>2)&0x3ff];
                    tmp = (tmp&~(0xff000000>>>((addr&3)<<3)))|((r0&0xff)<<(((~addr)&3)<<3));
                    writePages[(addr)>>>12][((addr)>>>2)&0x3ff] = tmp;
                    /* Next insn is delay slot */ 
                    r29 = r29 + 120;
                    pc=r31;
                    return;
                case 0x46e00:
                    pc=0x46e00;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_46e00() throws ExecutionException { /* 0x46e00 - 0x47000 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x46e00:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47000:
                    pc=0x47000;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }
    private final void run_47000() throws ExecutionException { /* 0x47000 - 0x47200 */
        int addr, tmp;
        for(;;) {
            switch(pc) {
                case 0x47000:
                    /* Next insn is delay slot */ 
                    pc=r31;
                    return;
                case 0x47200:
                    pc=0x47200;
                    return;
                default: throw new ExecutionException("invalid address 0x" + Long.toString(pc&0xffffffffL,16));
            }
            /* NOT REACHED */
        }
    }

    private static final int[] _data1 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data2 = decodeData("\177\177\177\177x\000\000\000\000\000 \020\010\004\002\001",0x2);
    private static final int[] _data3 = decodeData(")UHB\002YJr9Z-vq\000Js\005\035n&KQhe7\010\014'I\001\010o:YmF\013L@R7Z\014F)\001Da9Y,B\003=\\ 1[lF)\001Bd0\\\016F+\020@f9\033mR\002M,D(\020(4Z\014\024\n\000\000\000\007+MBg2ND\002+L@[7\\\016FK=\\s.H\rV\013Qdi<\027lfK1J\n\000\000\000\000\001\000@-0H\014\026c\035^r4]\r\006i\000@ )Y.G\031\001hh2H\014\026c\035^r4]\r\006i\001ho\020\035.6)8@ *\032\014WI\001Rn1[\016V#\024t\n\020\010\004\002\001\000@ 6\030.3\021\000Pd2YL\027+1h)\005\010\004\002k\014@i7\031M\026c\024@o:]\014fK1J\n\020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\004\033=\\v2\\NB\003\004@m0]\016&K`@f4[\014R\003Q^ 0H\rf+\\@f7\\MV\013P@(:\\m\026s\034@-9\010\014\026s\020@-;J!\"\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@T4\031-b\003\025pi:\010\r\026k5Jd4X.F+1r\n\020\010\005V!\001Hi6Y-g\033%^n9H\004\004#\025fi9\031,B\002M,D\020\035\016&KAXe9H\005\006#\025La:[\016B\003%f 0[\rBH(@ \026Y$\006\023=jn2\010\004\002\001\000@ \020\023-\026s%Zu6H\rV\013\035\\i:\035,F)\001^f\020\035l\026sQJd\020\031-\026;\025\\v0[\016V+L@(\030Y%S\031@R\n\020\010\005VY\001Va8\034\014\022\001\000@ \020\010\004\004\013\rFu9\030,7I\001`a9\030-V+QJr\020\031Mw\021\001Xa9LD\002AEJ-\033\n!\"\001\000Zi\020\032.F+IBt4[mg\031\000@A6\031mw\023%hh6H\r\027#\025da:\032-vsL\024 \020\013-r\003\031Rl2Wn&{=h \020\010\n&{=h 7YD\0063%Xe9H\r\026q\001nh4Xm\002\003Q^ 9]\rw\023\024@r2\\nVcQRn3H\nRbLXV\005\010\004\002kH@f7\\MV\013P@ \020\010\004\002\002%\\p:]\004\006k\005hr4^\004\0063%Xe\020\031Mw\0235Bt\005\010\004\002\001\000@ \020\034nFA\000@ \020\010\004\002\002M,D(\020(4Y\001\020a9\035lVc0ZB7Y-\026s\034@t2^\016B\003\031^r6X.@Q\000@ \020\010\004\002\003Mh \020\010\004\002\001\000@ )\\\014\027\023MJ :\031/\007!\000Pd2YL\027+1h)\005\010\004\002\001\000@ \020\031\016B\001\000@ \020\010\004\002\002\021Jn9Y$\007#\025pt\005\010\004\002\001\000@ \020\034l\"\001\000@ \020\010\004\002\002M`a9\034lR\003\011Rn0\\O\020Q\000@ \020\010\004\002\003\021D \020\010\004\002\001\000@ \"\031-g\033\024@b4[L\027\023d\024 \020\013.b\003YJr1\033n6KQr \020\010\010F+\031Bu6\035\004\003\0118@ \030\010\014f{H@n7H\014f+\025Hb0Xm2a\000d 3\033n\"\0035^r2BD\002\0015n 3\033n&k\005h \020\010\004\002\001\001\036u:\034\016W!\001Za:\034M\027A\001Li6\031$\0063=dm0]\004\002CMJe\020\013.\"\003\031^r\020\031Mw\0235Bt9J!\"\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\n\014F+\031Bu6\035\004\006KL@d2[N6)\001he<\035\005\020P\002s4$\022\177n^\n@9Z\022\011?w/\005 0NL3S\020te\035\032\r3S$to\035\034G'#Xtw\035\000\000\007+9Vn7]mb\003\005Xg7\\M\027#!Z:\020\011.0\000\000\000C7[Nf+Ihi7\031d\002+L@t7H\004W\030(\000\000\000\000\014f\013%Xe2\010\016Fy\001de0Y\004\007\033ABr9Y$\006k\005hr4^\000\000\000\000\000 \020\025\016&\0139fp7\\m\026s\034@t4\031$\006k\005hr4^\005bq8\024\000\000\000\000\0063\005Rl2Y\004\007#<@r2X,B\003\021Jn9Y$\006k\005hr4^\000\006#%Ze7\034m\026{9f 6].7!\001De\020\033Mvq5\\e3X.FKYJ\0001\030,B\003\031Rl2H\014f{IZa:\016D\002+L\000L7X,FK9N :\032\014R\0035Bt9\032/\002q8\\\n\000\000\014f\013%Xe2\010\016Fy\001de0Y\004\007\033ABr9Y$\006k\005hr4^\005b\001\001\010i2\010\017\026{T@s8\031,6K\031r :\032\014R\003\r^r9\031,7!\001Li6\031$\007#e`e\020\035m\027# @t4\031$\002kH@a9\031nVk\025\\t\037@\000\004\033=Zp:]\r\026s\034@t4\031$\005\032Y\010.\027\013A \000\000\000e9\034Mw\021\001Rn\020\034nf\"1\002S\031\000\000\000\000\001jn5[Mw;8@a6\031mw\023%hh6@\000\000\000)\nL T\n4*\020@C(\025$\005\"%\032E\020\010\004\002\001\000@ \020\010\004\003i\000J63H\0166+\014\\\n\000\000\011U*1(I(\023\011\024\032\005(I'SJ2\002\0112  H\004\002\001\000@ \036H\004S31H\n\000\000\000\004jU\030T$T\011DJ\r\002T$Sie\031\001\004Y\020\020+e!\000@ \020\017$\002)YXd\005\000\000\000\000\000\002\004\032\000\000\020Jp\000\001\002\036\000\000\010\0320\000\000AZ\000\000\004\022\\\000\000!\025`\000\002\007\002\000\000\0209p\000\001\004W\000\000\010\034@\000\000B+@\000\004\022\\\000\000!\025`\000\002\007*\000\000\020Jp\000\001\004W\000\000\010\035P\000\000B+@\000\004\020L\000\000!\025`\000\002\010,\000\000\020Cafv2\023LW:\021\032a:\000\000\007\033YHN2]j4k\005h\000\000\034nf\"9Jw)S,\027!h@p7Z-g#H\000\0009]LDs\025nS&X.CQ\001do;Z-f \000\000s;\031\011f+]&M0]\007\"\003YBl:Y \000\000\001fv2\023LW:M,D)\031,0\000\000\000\0009]LD\033=\\v2\\NE\033Q^D\035\010\014f\013%Xe2\010\016Fy\001Bl6\033l6\013QJ \"\000\000\000\000\001fv2\020mvsYJr:\021\016FzLt 3\030-\026c\025H :\033d\006\0131Xo1X.F)\001&\000\000\000\000\007\033YHW9\032.F*\021Jn9Y(\027\023IBy\035\010\014f\013%Xe2\010\016Fy\001nr4]\014R\001\025f\000\000\034nf\"1^a2\021\014VsMJA9\034L\027Ih@f0Z-F+\020@t7H\016&+\005H \022\\`\000\000\000\000s;\031\011F{\005HD2[N6*\005dr0^'\"\003\004\000\000\000\000\004RSLJl2\011-F!\025Xd\022[\014@P\000\000\000\000\034nf\"1^a2\024n\006\013Ife*\031/\007\"!\004F4[\014SQ\001Da2\010\014fK1J 3\033n&k\005h 7[D\006c%\\e\020\014`\000\003Mld&\033l\026\"M`a9\034lU#\025pt$\020HfK1J:\020\022$\006#=\\':\010\r6s=n 4\033nr\003Q^ 4\030-f#1J 0H\014fK1J ;Z.FA\001Jl2[,VsQBl\020\033,\027#IRc2\\d\002C1Bs:\010\014VsQdy\020\033mb\003!Ja2\031.\"\0031Rn2H\0062H\000\000\000\000\034nf\"1^a2\024n\006\013Ife*\031/\007\"!\004F4[\014SQ\001Jr9\033n\"\003IJa2\032-f9\001`o4[NG\021\000Jd\000\000\000\000\003Mld&\033l\026\"M`a9\034lU#\025pt$\020HfK1J:\020\031.'\023=d 9\031,\026#%\\g\020\034Mw;%\\d\020\011,@\000\000\000\0009]LDc=Bd)\\\014\027\023MJT2^\016DB\011\014i6\031'\"\003\025dr7\\D\007\023\025Bd4[Lr\003YBl:Y$\002+\020\000S+\021\011DJ\011\006 ;\013D\002+L\000\000\000\011%S9If%\026N\0160P\000\000%\030M\rF!\024b46\031\004S\011QXd\022L&Fc\020J1\032\031\001 \000\000\000%\026L&G\031\024b46\031\004S\011QXd\022L&Fc\020J1\032\031\001 \000\000\000%\030MN2)Dls\022L&g\031\024b69B@\000\000\000@%6\031\004\002+1H \022[\014@\000\000\000\0009]LDc=Bd)\\\014\027\023MJT2^\016D3%Xe\035\010\014&\013\020@f4[\014R\003\031^r6X.@\000\000@%6\031\004\002+1L\000\000\000\000\002+1H \022[\014B\001\025Xd\005\000\000\000\000\001fv2\023\rv\013\021&p0\\N6*\011Rn0\\O\0243%Xe\035\010\014&\013\020@f4[\014R\003\031^r6X.@\000\000\000\000\020\011-F!\000Jl2\000\000\000\000\001fv2\023\rv\013\021\010e7\034lU#\025pt#\032-F)h@b0Y\004\0063%Xe\020\031Mw\0235Bt\000\000\000\002+1H \022[\014@P\000\000\000\000\034nf\"1^a2\021\014VsMJB4[L\027\023e\014i6\031'\"\003\011Bd\020\031M\026c\024@f7\\MV\013P\000s;\031\011F{\005HS8\030.'\033\025\032a:\034M\027Ah@u7\032mf{]\\ 3\033n&k\005h \022Y\000\000\000\000\00272\000\000\023;`\000\001\033c\000\000\011^@\000\000Mv@\000\004q\030\000\000'\n`\000\0028`\000\000\023FP\000\001\034:\01673\021.r4]\014U\033ABr9Y)V\013Qdi<\016D\0063\005Rl2Y\004\007#<@w9\032.F)\001Li6\031$\002+L\024\000\000\000\000\023O`\000\001\035\004\000\000\011hP\000\000NH\000\000\004th9]LE;IRt2Q\014VsMJM0]\016&K`t 3\030-\026c\025H :\033d\007;IRt2H\014fK1J \022\\a \000\000\000\000\000No\000\000\004w \000\000'<@\000\002;x\000\000\023`!(o7H\rV\0139r 8\032.\006+L@o8\031-`\001\025f \036\010\004W\031\000d>\027Y\014W1=\\u6\033\000\006\033=jl2\033Dw!\001de0Y\004\007#!J 3\032-F)\000Js\000\000\000\006\023iRp\031\010\005V \000\000\000\000\011.2\001\025f \021\011.2\020\000\000b=\032.\003\021\000Z1\000\000\000\000\003\r^m8\034LW\033L\000\000\000\000\000\000\000\000\000E'\021\011B\0025*S*\010\010$)\001\030E)Td\005\"!\002N\020\021)d\"H\000R\"T*T*M(E\"\010\010DJ5\nN)R)trL@C SIdzP@E,\020hT*\020@N*S$\004JQ\nR U\011\024z9&\000\000\000\011tr\024@O#\010\013\024zU$ \"\022)T*9&I'SJ2\002%& &\021*5\031\001(H SD\004zH@E(U(\024a\001(O\020\026HU\022<\000\000\000\000\011e*4@I*\021*$\nQ\022O'\024d\002B9*M!\021*\"\002=\014 &\020)d\032i\036S\020\024jD*A&)\020\022*2\002%\034V S\011\024 \001$E(U(U\032Q\nD\020\021\011\024j\025\034S$Sie\031\000PN*S($*H@O#\010\010TJ\035\nN(\020)\025\022L@D\"Ti\025\022\025\010)\020\022*2\002%\034V S\011\024 \000\0006\025\023E3!)\022T\"TH\025\"%\036N)Jf\022\001,@I*\021*$\nQ\022O'\024e$JQ\nR U\011\024z9& !P)dr=( \"V\0104*\025\010 '\025`\0031)\034+\032\nI\025\"\025$A*\022)trLV1\020\020h\024r9\036T\020\021+\004\032\025\nD\020\023Jp\003Mld&\020*3\021\001`a9\030-V+QJr\020\031.'\023=d:\020\011.0P\000\000\000\000\024itbY\022N#H\nDB\024@[ WJD\nt@E$QhTrA$O!\023\010Th(\000\000\000\000\011dy8@O#\010\n$z]& \020\010\004\002\001\000@ \020\010\004\002\001\000@ \036H\004S31H\n\000\000\000\004r<\\ 'QD\004\032=\030U&SJ2\001\000@ \020\010\004\002\001\000@ \020\017$\002)YXd\005\000\000\000\0029\036.\020\023hb\0029\036N\026VHU\022<@V S\nT*L@ \020\010\007R\001\024ll2\002@\000\000\001\032A*\024I\025A\001\010E'\024i\025\"d@ \020\010\004\002\001\000@ \020\010\004\003i\000J6\027\014Lb)\024\024\000\000\000\000\004j\0050.\020\023Irq\001\036F\020\023\010\024r\r4O)H\n5\"\025 S\020\017$\002)YXd\005\000\000\000\0025\002X\027\010\011dy8@O#\010\010TJ\035\nN(\020)\025\022L@ \020\010\007R\001\024ll2\002@\000\000\001\030E#\025\004\002\002\025\034D\020\023hb\002Q\020E\020\022)e\"\025$V S\004\003i\000J9\027\014HPP\000\000R$Qi\005!\001\nN\"\010\011t1\001(H\"H\011\024rQ\nR+\020)B\001t@%\034KF$((\000\000%P*\005\002\004@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\010\004\002\001\000z \022N%c\022\024\024\000\000.6DB/}ka(\007\033\"!\027~upT\007\033YHL Tf$\011\001Fa6\033\014V!\001ni:\032\004\004rU\030L\020\030.'\023\005r\n\000\000\000\000\002Q$A'\024j\004zM\022N#H\nDB\024@M U\n$J`@F'TD\005\032A\nE\"\002@\000\000\001Xa9LG\"\003]`t9\026f\005h\000\000\0006\030.3\021h@w8\035\016%YE:\000\000\000\rF\013Ld:\020\035n\007#I62.@\000\000\0031Bs\031\016D\007;Ahr-LkP\000\000\000l0\\f#Q\001np:\034K3\"t\000\000\000\033\014\027\031Ht ;\\\016G\022lj]\000\000\000\006c\005f2\035\010\016w\003Qd[\033\027 \000\000\001Xa9LG\"\003]`t9\026fuh\000\000\0006\030.3\021h@w8\035\016%Ya:\000\000\000\rF\013Ld:\020\035n\007#I69.@\000\000\0031Bs\031\016D\007\023%hz\000\000\rF\013Ld:\020\030Mf \000\000\0006\030.3\021h@O(\020JF+5`\000\000\000\011e*5\004E)\010\011t1\001\030A'\020k$zL@S*\021*\005\031\000@ \036H\004S31H\n)\022*EQ\001,A&\025(U\031\001&T PI\024b%4E\"\010\004\002\001\000z \022MMF (\000\000\005\020itjA*T\"Q\004\005\022%(Z\020\025H\024bU\nS\020\010\005\004*I$O)\010\010$r\021&)\005\000\000\000\000\000J36\031\004\002\001\024d2\027\014&D)\000@(\022L&\022qI\n)\005\000\000\000\000\001fv2\023\010\025\031Ht 0[\rF{\rBt4[mb\003=L )\010\014f\013%Xe2\000\rF\013Ld:\020\024ESsL\000\000\005\024i\024r\035*L TD\0052\005\030U\"Tg\"\000\000\000\n&\021(e!\001&I'\021jTb\005$ +\021(5\"=$S\020\n\016G\023\005\\s8\033n6)\001^f\020\025%\023Q\000\000\000\000\002J$J\035\020T\020\024i\024r\035*L TD\0052\025\006T'TJ2\001!hr0[N7\003=fe\020\033lb\002XR:\020\000\000\005\032%\034G*S\010\025\021\001,A&\025(U\031\001\014O*SHB\001\000@ \020\017$\002)YH\n\000\000\000\000\003Mld&\020*3\021h@f0]\014\026a\001Jr9\033n\"a\001Bb7\\NFK9N\000\000\034M\027#YJc\035\010\0160\000\000\000r4]\016f+\014t <\035F \003Mld&\020*3\021h@i6]\016\026c\010@f0Z-F+\020@t7H\0146{9le9\031lR\001!Re9\034D\003i\000Jl2\n! \000\000\000\000\020\010\rB\001t@%6\031\004\002\003$@=\020\011-F (\000 \020\011-F!\000@%6\031d\002\001\025Xg\020\010\004Vc\034\024\000\000\000\011F\0139&t7\\LU[):\0009]LDb\005&2\035\010\014f\013%Xe2\010\016Fy\001Bl6\033l6\013QJ &\030-e\033Q^r2VdV\"t\000\000\000\000\01673\021\030A)LG\"\003Mho9\031$\002BI\nT)\024%\022\003\rBl6\031,B\003=\\ 4[LF+`@%2\010\005\006s=h 0[\rF{\rBt2Y\005\020\000\000\000s;\031\011D\nLd:\020\034nF{IJ \024\024jDzI )\020\030l\026c1Jd\020\035m\027# @j\020\017GR\0025\002X&\023\000\000\000\001fv2\023\010\025\031Ht 9]\rw\023\024@()\021*E\022@R 1X-Fc\025H ;Z.FA\001T \037\017$\004j\0050L&\000\000\000\003Mld&\020*3\021h@s:\033n&)\000PR\"U\n%\001$@c0[\rF+\020@o7\010\r\026s\021Jx\020\011,B\001!\\o:\010\014\026c1^c0]\014V!$\000\000\000\000\000\000\000\000\177]V\031`V\rm\036?tH?5\"\020Z\030\037{n0^J\003vMO\177\022\017m(D\026F\007GQ-~\"\027Y<#d\006L&\031E\013@9q`\007D\036^\014]ty\021S\011F1\"p\016?jU*U*U*\r_r3\031Lf1kb\017x$I\022$\000A\177w{cG\r~\021EN\023}]\013MbS\004\006u~g0y+nIS4\1771\006YT\r\001u#?VwEU\026{{\032\037j/4Y\021l\ruot+\"\020Xj6\013gy\0054uc\0216B\022+Lt 7\\\016FK=\\ 9\031.\027+%de9H\014\026q\001Br3]-V+9h \026K$\002+\014\024\000\000\011.3Q\001Rl6\031,v\0130@o8\035\r\026{8@-\026H\004V\030(\000\000\000\023Mw!\001^w7\031. \000\000\000N7H\0167+\rP 3\032-F)\001^r\020\031\r\027\023\025Ft7\\O\020\000\000\000N7H\0167+\rP 8\034Mv\033\025fs\000\022-g#\025dr:\\\016F+\020@s<\\nF+4@c0[\r@\002$^O\020\031.'\023=d\000\000\000\011fy\001fu1Z\004\006#\025li1Y$\006{H@a2\031\016&+Mf\000\000\000\010\027\023\034@l4\\nB\003Q^o\020\033\rvs\034\000\000\000\021/\006+\014@f7\\MV\013P@e9\034Mw\020\000\000\000!\030,B\003\031Rl2H\rg+5De9\000\011fy\001Fh4[\014G\023\025\\\000'\033d\006k=de\020\034\016&{\rJs9Y.0\000\000\000N7]\004\006+9^u3Z\004\007\033ABc2@\000\000\000\001 e9\033-\027\033MRo7\010\014F+9Re2\000\000\000\002\011Bd\020\030,F#IJs9@\010&c=Fk\020\031\014W3%Fe\020\034LW\013URr2Y\000\000\000\001\010e;\032,6)\001^r\020\034LW\033=jr1Y$\006\023Ufy\000\021M\026c\024@e<\032.7#L\000C9\033n7\0315He;\032,6)\001Xi7\032`\000\000\001\034o\020\034nV\033 @d2]M\026\033\024\000\000'\033nB\003\004@d4\\LV\033Q^r<@\011\027\031\001B 2\032.&+\rho9\036 \000\002%\\v0[\r\026!\001Br3]-V+9h\000\000\000\000\005#=^ 6X-gI\001^p2[D\0063%Xe9H\r\026q\001fy9]\014Vh\000\000\000*\033mr\0035Bn<H\rw\003\025\\ 3\032-F+L\000N7]\004\006\011\001Fh0\\L\026\033QJr\020\031\014W3%Fe\000\000\nF+ah 3\032-F)\001Du9^ \000\002\031Rl2H\016F{<@l0\\Lv(\000\000N7H\0167\003\005Fe\020\033\014V3P@o7\010\014F+YRc2@\011\026c1Jg0[\004\007\033\025Jk\000\000\000\000\002IJa2\013-vs1r 3\032-F)\001fy9]\014Vh\000\000\000*\033mr\0035Bn<H\rFK9Vs\000\000\010'\023=Ve7\010\016\006KAJ\000&X.FA\001Br3]-V+9h\000\000\000\n&+Mjl:\010\016F{<@l0\\Lv(\000\000\000\000\023Mr\0035Js9X,v)\001^f\020\031\014W\033%de2\010\016GKAJ\000\000\022,F+9hi3\032,W\021\001de6[nf+\020\000\000\"\031,\026#1^c5@\000\000\000\001\034o:\010\014\022\003Mhr2X-P\000\000\000\000)]\016&+\005Z 4[l7#0@t4[,V{Uh\000\000\000\000\004s<@s:\034LV\0134@r2\\mw+IFe9@\011V\013\rPi7\031$\006KL@n7]\004\006{8@t4\031$\006s\025hw7\\M0\000\000\000N7H\016\006\013\rVa3Y \000\002IJs7].&\033\024@i9H\016&+5^t2@\000\0053%dt:X-B\003\rRr1]-\027!\001Rs\020\031mvs\024\000A2\035LW\023QRs2H\014W\023I^r\000\024n&k=jn:\010\014W\023I^r\000\000\000\004\033=Zm:[M\026\033\005hi7[D\006+Ido9\000\n\007\023=ho1[mB\003\025dr7\\@\000\0025jl:\032-\006{@@a:\035\014VkAhe2\000\000\004\023\005H 6Y.7\033\005Ne\000\020l\026s9^t\020\030,6\033\025fs\020\030$\006s\025Jd2Y\004\007\033!Br2Y\004\006c%Dr0\\O\020\000\000\000A1XlW\033MRn3H\014\022\003\r^r9\035.\007#\025H 9Z\014\027\023\025H 6\032,'\023\005dy\000\000\000\000\0019Xi1\010\0166+\rhi7[D\006K8@a\027\033nW!\001Fo9\034NW\003QJd\000\020.G#\025Zp:\032-f9\001ho\020\033\r\026s,@i7\010\rV{IJ 9Z\014\027\023\025H 6\032,'\023\005di2\\d\007#!Bn\020\034o\027\033QJm\020\033\r\026k%h\000\000\000\0106\0139\\o:\010\014WC\025F 0H\0166C\005de2\010\rFK\011da9\036$\006#%de1]\rGH\000\000\000#\035-f\033QRo7\010\rf{P@i6\\\rF+5Jn:\031,@\000\000\000\000'\033d\006k=de\020\031M\026c\025f\000\000\000\010FKIJc:\033n'I\001\\o:\010\014VkAhy\000\021M\026c\024@o9\010\016\006\013QP 7\030-V)\001ho7H\rF{9N\000\000\025\rvy\001Za7\036$\007\033eZb7[\r\026\031\001Xi7\032n0\002=`e9\030.FK=\\ 7\033nB\003Mjp8\033n'#\025H 7[D\007\033=Fk2]\000\000\000\001\034o\020\030NV3\031Jr\020\034n\006\013\rJ 0]L\026K1Bb6\031 \000\000\001\002d2\034LW\033L@f0[-\026cd@n7]\004\007\033U`p7\\NF+\020@b<H\016\007\023=ho1[mB\003\031Bm4[\017\020\002Ado:\033l6{0@w9\033mf9\001hy8\031$\0063=d 9[l6[\025h\000\000\024mv\033-Jt\020\033n\006+IBt4[mb\003=\\ 7\033mbkM^c5Y.@\000\001 r7]\rv\033=X 7\033nB\003\005la4[\014\026\0231J\000\000\020l\026q\035h 9Y-f!\001Bf:\031.\"\003M^c5Y.B\003MPu:\031\rw;8\000\000\000\000\0106{9\\e1]\r\026{8@r2YNW\033\025H\000\000\020,F#IJs9H\014\026cIJa2\036$\006K8@u9Y \000\002M^f:\035l\027\023\024@c0].6+\020@c7[Mf+\rhi7[D\006\013\011^r:\000\000\000\000\001\034e:\035mw\023,@i9H\016VsIJa1Z\014\026\0231J\000\000\023LW#]^r5H\r\026sQJr3\030,6)\001Rs\020\033Mw!\001Fo7\031M\026;Ude2\000\0106{9\\e1]\r\026{8@t4[,V!\001^u:\000\000\000\000\001\020o9]\004\006KL@d7]m`\000\000\000\000$\033n7!\001Rs\020\035-g\023\025Bc4\030,&c\024\000C7[Mf+\rhi7[D\006\0131de0Y\017\022\003%\\ 8\034Mv;IJs9@\000\005\033=Fk2]\004\006\0131de0Y\017\022\003\r^n7\031,7#\025H\000\000\000\000\004#\025ft4[L\027#%^n\020\030,F#IJs9H\016&+Eji9\031,@\000\000\000\000&Y.7\033\005Ne\020\035\rvy\001Xo7\031`\000\000\000\000U7\032mf{]\\ 8\034Mw#=Fo6\000\000\000\000\001&o1ZlW!\001hy8\031$\006s=h 9].\007\003=dt2Y\000\000\000\001&o1ZlW!\001Rs\020\030-G\023\025Bd<H\0146{9\\e1]\014V \001&o1ZlW!\001Rs\020\033Mw!\001Fo7\033LV\033QJd\000\023Mw!\001fu8\034\rw\023QJd\000\000\000\000\000\011p0\000\000NC \000\004t&\000\000'\"`\000\002:\031\000\000\023Q`\000\001\035\017@\000\011i\010\000\000NI \000\004tP\000\000'%0\000\002:.\000\000\023S\010\000\001\035\032\000\000\011i\\\000\000NN@\000\004tz\000\000'(\000\000\002:C\000\000\023T0\000\001\035$@\000\011j0\000\000NS`\000\004u$\000\000'*P\000\002:X\000\000\023UX\000\001\035/\000\000\011k\004\000\000NY\000\000\004uN\000\000'- \000\002:m\000\000\023W\000\000\001\0359@\000\011kX\000\000N^ \000\004x\030\000\000'A@\000\002<\014\000\000\023``\000\001\036\006\000\000\011p0\000\000O\003\000\000\004x\030\000\000'/@\000\002:\177\000\000\023``\000\001\036\006\000\000\011p0\000\000O\003\000\000\004x\030\000\000'A@\000\002<\014\000\000\023``\000\001\036\006\000\000\011p0\000\000O\003\000\000\004x\030\000\000'A@\000\002;\002\000\000\023``\000\001\035B@\000\011l \000\000Nb`\000\004v\034\000\000'2\020\000\002;\024\000\000\023Y8\000\001\035M\000\000\011lt\000\000Nh\000\000\004x\030\000\000'A@\000\002;#\000\000\023``\000\001\036\006\000\000\011m\030\000\000O\003\000\000\004x\030\000\000'A@\000\002<\014\000\000\023``\000\001\035T@\000\011m0\000\000Nk`\000\004vd\000\000'6P\000\002;8\000\000\023[X\000\001\035_\000\000\011n\004\000\000Nq\000\000\004x\030\000\000'A@\000\002;G\000\000\023``\000\001\036\006\000\000\011p0\000\000O\003\000\000\004x\030\000\000'A@\000\002<\014\000\000\023``\000\001\036\006\000\000\011n(\000\000Ns \000\004w \000\000':0\000\002;V\000\000\023]H\000\001\035n\000\000\011n|\000\000Nx@\000\004wJ\000\000'=\000\000\002;k\000\000\023^p\000\001\035x@\000\011oP\000\000N}`\000\004wt\000\000'?P\000\002<\000\000\000\023`\030\000\001\036\006\000\000\011p0\000\000O\001@\000\004x\022\000\000'A@\000\002<\014\000\000\023``\000\001\036\006\000\000\011p0\000\000O\004`\000\004zd\000\000'Z \000\002=R\000\000\023m\020\000\001\036i\000\000\011vH\000\000O4@\000\004{$\000\000'Z \000\002E1\000\000\024+\010\000\001\"X@\000\n\025D\000\000Q, \000\004{$\000\000'Z \000\002=R\000\000\023m\020\000\001\036i\000\000\011vH\000\000O4@\000\004{$\000\000'Z \000\002=R\000\000\023m\020\000\001\036i\000\000\011vH\000\000O4@\000\004{$\000\000'Z \000\002=R\000\000\023m\020\000\001\"X@\000\011vH\000\000O4@\000\004{$\000\000'Z \000\002=R\000\000\023m\020\000\001\036i\000\000\011vH\000\000O4@\000\004{$\000\000'U \000\002=R\000\000\023j@ \020\010\004\002\001\000@ \020\010\004\002\001\000@ \020\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\006\023UN 4[D\0073\031`r4[NF1h@b0Y\004\006\023\005fe\000\000\000\003\001Dd3\032\r&c9`rA!\020hD*\030\000\000\000\000\006\003\011Hf4\032MFsAeBb1Y\014V0\000\000\000\000\000\000*\016p\000\002^\013\000\000\025pX\000\001(>@\000\nx,\000\000WB`\000\005<\026\000\000+a0\000\002^\013\000\000\025pX\000\001(A\000\000\nDL\000\000WB`\000\005\"\034\000\000*\022P\000\002^\013\000\000\025\013P\000\001(_@\000\nE|\000\000T/`\000\005\"~\000\000*\027p\000\002Q?\000\000\025\013x\000\001(_@\000\nE|\000\000WB`\000\005<\026\000\000+a0\000\002^\013\000\000\025pX\000\001/\005@\000\nx,\000\000WB`\000\005<\026\000\000+a0\000\002QO\000\000\025^0\000\001/\005@\000\no\030\000\000WB`\000\005<\026\000\000+a0\000\002^\013\000\000\025R`\000\001/\005@\000\nx,\000\000VL\000\000\005<\026\000\000+a0\000\002^\013\000\000\025pX\000\001/\005@\000\nk\030\000\000WB`\000\005<\026\000\000+30\000\002^\013\000\000\025pX\000\001/\005@\000\nx,\000\000WB`\000\005<\026\000\000+a0\000\002^\013\000\000\025pX\000\001/\005@\000\nnd\000\000T4`\000\0057L\000\000+<`\000\002[f\000\000\025i8\000\001(i@\000\nx,\000\000WB`\000\005:6\000\000+a0\000\002])\000\000\025S \000\001.k\000\000\nw \000\000WB`\000\005;X\000\000+a0\000\002Zj\000\000\025pX\000\001/\005@\000\nxt\000\002@\000\010\000\004\000\001@\000@\000\024\000\006\000\001`\000@\000\022\000\005\000\0010\0000\000\r\000\003@\000x\000 \000\000\000\000,H0\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002k\r\000\000\026!h\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000,J@\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005I,\000\000,J`\000\002dV\000\000\026%0\000\0012+\000\000\013\022X\000\000Y\025@\000\005I,\000\000,J`\000\002dV\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Y\027\000\000\005U\032\000\000-1P\000\002jM\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005Tr\000\000-1P\000\002k\r\000\000\026SX\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002k\r\000\000\026Xh\000\0015F@\000\013,p\000\000Zc \000\005V\032\000\000-(0\000\002k\r\000\000\026Xh\000\0015F@\000\013,4\000\000Zc \000\005V\032\000\000-1P\000\002jJ\000\000\026%h\000\0015&@\000\013*4\000\000ZS \000\005U\036\000\000-*\020\000\002k\r\000\000\026Xh\000\0015+@\000\013,4\000\000ZV \000\005Tx\000\000-0\000\000\002k\r\000\000\026Xh\000\0015C@\000\013,4\000\000Zb \000\005V\032\000\000-1P\000\002k\034\000\000\026)\010\000\0012a@\000\013\031$\000\000Yb \000\005Q:\000\000-\005p\000\002g;\000\000\026Bx\000\0013]@\000\013\035l\000\000Yh@\000\005Ph\000\000-\006@\000\002h4\000\000\026C \000\0014\032\000\000\013!P\000\000Z\r\000\000\005P~\000\000-\007p\000\002g;\000\000\026;X\000\0013]@\000\013\035l\000\000Yn`\000\005Nv\000\000,w0\000\002hL\000\000\026D`\000\0014&\000\000\013\"0\000\000Z\023\000\000\005Q\030\000\000,w0\000\002g;\000\000\026;X\000\0013]@\000\013\035l\000\000Yn`\000\005Nv\000\000,w0\000\002g;\000\000\026;X\000\0013]@\000\013\035l\000\000Yn`\000\005Nv\000\000,w0\000\002g;\000\000\026;X\000\0014)@\000\013\035l\000\000Yn`\000\005Nv\000\000,w0\000\002g;\000\000\026;X\000\0013]@\000\013\035l\000\000Z\023\000\000\005Q\030\000\000-\011@\000\002hL\000\000\026D`\000\0014&\000\000\013\035l\000\000Yn`\000\005Nv\000\000,w0\000\002g;\000\000\026;X\000\0013]@\000\013\035l\000\000Yn`\000\005Nv\000\000,w0\000\002g;\000\000\026;X\000\0013]@\000\013\035l\000\000Yn`\000\005Nv\000\000-\n0\000\002j\014\000\000\026H`\000\0015\006\000\000\013(D\000\000Z#\000\000\005Qr\000\000-\017@\000\002h|\000\000\026G`\000\0014>\000\000\013#p\000\000Z\037\000\000\005Qx\000\000-\017@\000\002h|\000\000\026H`\000\0014F\000\000\013$0\000\000Z#\000\000\005R\030\000\000-\021@\000\002i\014\000\000\026H`\000\0014F\000\000\013$0\000\000Z#\000\000\005T0\000\000-\021@\000\002i\014\000\000\026H`\000\0014F\000\000\013$0\000\000Z#\000\000\005R\030\000\000-\021@\000\002i\014\000\000\026H`\000\0014F\000\000\013$0\000\000Z#\000\000\005R\030\000\000-\021@\000\002i\014\000\000\026H`\000\0014F\000\000\013$0\000\000Z#\000\000\005R\030\000\000-\021@\000\002i\014\000\000\026H`\000\0014F\000\000\013$0\000\000Z#\000\000\005R\030\000\000-\021@\000\002i\014\000\000\026H`\000\0015\014\004s<@E9\034Mw\020\000\000\000\000\025-f[9^w7\010\r\006{Mh\000\000\000\000\004C=ft\020\033L\026k\024@l7[m7+@@f0Z-G+IJ\000\000\000\000\005+9Vn7]mb\003MJr;\031.\"\003\025dr7\\@\000\000\000\000N7H\014\026#\021de9\\d\006\013Mfo1Z,\027#\025H ;Z.FA\001\\a6Y \005:\005$N$SHsQ\001fy9XnFah@U7\032mf{]\\ 7\030-V)h@%2\002@\000\001=Jt1Klw\023=jp\000\000\004UZxt]\035\011+5qi::\022Z\016P\002]\002R'\022)d9h@p0]\r\006\033=\\f\035\010\nVs-\\o;[D\002\0239Bm2HG\"\001\025H\n\000\000\005v#\025l/1[mg\033=Xe\000\000\000\000\001\025j.\022]%b+T\\%:@\nVs-\\o;[D\004+Ido9\000\000\000\001=Jt1Kn\006\013Mfw2\000\004UZxt]\035\011+5qi::\022Y\007\"+\020t%-WG%ihJ[/\016KSQ\025f\n\000\000\000\002{\021Jv\027[NVcnfK9Rt<@\000\000\000\000\000\003c@\000\000\036\034\000\000\001uK@\000\017-\020\000\000zf\000\000\007VJ\000\000K%\020\000\004Z*\000\000%RP\000\002-\025\000\000\022i(\000\001\026J@\000\0114T\000\000K% \000\004Z*\000\000%RP\177?_ow{}~\177$Tiri`p5\034K&\020\000\000\000\000\000\001 \000\000\0002\000\000\000\017S\177@\000\000\000\000\000\000\002\000H\000\000\000\000\000\000\001\000Y\000\000\000\000\000\000\000@GP\000\000\000\000\000\000 0q\000\000\000\000\000\000\020\037\006P\000\000\000\000\000\010\022t\022\000\000\000\000\000\004\013\014%P\000\000\000\000\002\006/WB\000\000\000\000\001\003MfY \000\000\000\000B\001(\013r\000\000\000\000!\ri\0077 \000\000\000\020MQTRD\000\000\000\010*\021B9e \000\000\004\026ZyD\017$\000\000\002\014\030kzIF@\000\001\006Aa^&~\004\000\000C;\r\nx.b@\000!jx\026k\035\035H\000\020|\025G\021A\021\036@\010A-<:xZc\010\004\",5dk8]u\002\022\001pgAI],I\0115\026@X~\n+lDu\036\0107Nf;4!P87I_A\000\000\021R;EVj\0057\005iSB<\007i\037~>UT\011nH|L\003S\023T*On_n;ypy\034i,R}D&x9$}D=-\"N3\031)!\177j\023i'\036I+;P#\037\014Kg!,@\030PdV\033h0\000\004\004\002\001@`0\030\020\010\004\002\001\000@ \020\n\005\002A P(\024\n\005\002A P(\024\n\005\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\030\014\006\003\001@`0\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`p8\034\016\007\003A`pxa3c);
    private static final int[] _data4 = decodeData("\000\000\000\000\000\000\010r\006\000\000\000\000\000\000\004Y\020\000\000$-0\000\002\"n@\000\022\027(\000\001\021>\000\000\011\014\n\000\000HbhHif6we \000\004V*\000\000%2`\000\002+\026\000\000\022Y8\000\001\025K@\000\011,`\000\000Jf\000\000\004V2\000\000%3\020\000\002+\032\000\000\022YP\000\001\025M@\000\011,l\000\000Jg\000\000\004V8\000\000%3P\000\002+\035\000\000\022Yp\000\001\025O\000\000\011,|\000\000Jg`\000\004V@\000\000%4\000\000\002+!\000\000\022Z\010\000\001\025Q\000\000\011-\010\000\000Jh`\000\004VF\000\000%4@\000\002+$\000\000\022Z(\000\001\025R@\000\011-\030\000\000Ji@\000\004VN\000\000%4p\000\002+(\000\000\022Z@\000\001\025T@\000\011-$\000\000Jj@\000\004VT\000\000%50\000\002++\000\000\022Z`\000\001\025V\000\000\011-4\000\000Jk \000\004V\\\000\000%5`\000\002+/\000\000\022Zx\000\001\025X\000\000\011-@\000\000Jl \000\004Vb\000\000%6 \000\002+2\000\000\022[\030\000\001\025Y@\000\011-P\000\000Jm\000\000\004Vj\000\000%6P\000\002+6\000\000\022[0\000\001\025[@\000\011-\\\000\000Jn\000\000\004Vp\000\000%7\020\000\002+9\000\000\022[P\000\001\025]\000\000\011-l\000\000Jn`\000\004Vx\000\000%7@\000\002+=\000\000\022[h\000\001\025_\000\000\011-x\000\000Jo`\000\004V~\000\000%8\000\000\002+@\000\000\022\\\010\000\001\025`@\000\011.\010\000\000Jp@\000\004W\006\000\000%80\000\002+D\000\000\022\\ \000\001\025b@\000\011.\024\000\000Jq@\000\004W\014\000\000%8p\000\002+G\000\000\022\\@\000\001\025d\000\000\011.$\000\000Jr \000\004W\024\000\000%9 \000\002+K\000\000\022\\X\000\001\025f\000\000\011.0\000\000Js \000\004W\032\000\000%9`\000\002+N\000\000\022\\x\000\001\025g@\000\011.@\000\000Jt\000\000\004W\"\000\000%:\020\000\002+R\000\000\022]\020\000\001\025i@\000\011.L\000\000Ju\000\000\004W(\000\000%:P\000\002+U\000\000\022]0\000\001\025k\000\000\011.\\\000\000Ju`\000\004W0\000\000%;\000\000\002+Y\000\000\022]H\000\001\025m\000\000\011.h\000\000Jv`\000\004W6\000\000%;@\000\002+\\\000\000\022]h\000\001\025n@\000\011.x\000\000Jw@\000\004W>\000\000%;p\000\002+`\000\000\022^\000\000\001\025p@\000\011/\004\000\000Jx@\000\004WD\000\000%<0\000\002+c\000\000\022^ \000\001\025r\000\000\011/\024\000\000Jy \000\004WL\000\000%<`\000\002+g\000\000\022^8\000\001\025t\000\000\011/ \000\000Jz \000\004WR\000\000%= \000\002+j\000\000\022^X\000\001\025u@\000\011/0\000\000J{\000\000\004WZ\000\000%=P\000\002+n\000\000\022^p\000\001\025w@\000\011/<\000\000J|\000\000\004W`\000\000%>\020\000\002+q\000\000\022_\020\000\001\025y\000\000\011/L\000\000J|`\000\004Wh\000\000%>@\000\002+u\000\000\022_(\000\001\025{\000\000\011/X\000\000J}`\000\004Wn\000\000%?\000\000\002+x\000\000\022_H\000\001\025|@\000\011/h\000\000J~@\000\004Wv\000\000%?0\000\002+|\000\000\022_`\000\001\025~@\000\011/t\000\000J\177@\000\004W|\000\000%?p\000\002+\177\000\000\022`\000\000\001\026\000\000\000\0110\004\000\000K\000 \000\004X\004\000\000%@ \000\002,\003\000\000\022`\030\000\001\026\002\000\000\0110\020\000\000K\001 \000\004X\n\000\000%@`\000\002,\006\000\000\022`8\000\001\026\003@\000\0110 \000\000K\002\000\000\004X\022\000\000%A\020\000\002,\n\000\000\022`P\000\001\026\005@\000\0110,\000\000K\003\000\000\004X\030\000\000%AP\000\002,\r\000\000\022`p\000\001\026\007\000\000\0110<\000\000K\003`\000\004X \000\000%B\000\000\002,\021\000\000\022a\010\000\001\026\011\000\000\0110H\000\000K\004`\000\004X&\000\000%\016H\000\002(v\000\000\022G@\000\001\024=`\000\011#z\020`\000\000\000\000\000\000\000\000\000\000\000\000\001",0x1f6);
    private static final int[] _data5 = decodeData("\"TJ$zHt \000\001a \000\001Xa9L@\000\000\000\000s:\032\000\007\033P\000\0002\035\000\000\003MD\000\000\031\014 \000\000Js\026U.@\000\000\000%9K*0\000\000\000\000\022\\eU3P\000\000\000\017V\0147^A5vc&\022qLh\000\000\000\000\000\000\022b\030\000\000\000\000\011\025H\n\000\011,pP\000@%2\000\004\002+1L\n\000\000\000\002\001\025Xd\000\000\000\000\001\000Jl3\000\000\000\000\000xk2^'`\000\000\000r9\030 \002AaJ)\000\000\000\000\001 pi\024@\000\000\000\000\024\000\000\000\004\000\000\000\000%6\031\004W\030\000\000\000\022YdW\030\000\000\000\000\011-F (\000\000\000\000\004Vc\020@%3B@\002+\034Jc\000\000\000\000\002\025$R'TG\"\000\000\024\000\000\000\000pP\000\000r\000\000\000\002h\000\000\000\027\031o \00194\000\000\031o&K@@-2\000\005f\023h\000.1\036F \000\000\000\000\022\\ef;h\000\000\000\011.2rh\000\000\000\000\004W\0319Dz\031\000\000\002+L\\b=\000\000\000\001x|\000\000\017@\000\000\001Nz4\\\004\002iD\000w\000\000\000\006\010\000\000\000\000\000\000\000\001\177`\000\000\000\000\000\000\001\000 \000\000\000\000\000\000\000@\004\000\000\000\000\000\000\000 \006\000\000\000\000\000\000\000\017|\000\000\000\000\000\000\000\010\001\000\000\000\000\000\000\000\003\177@\000\000\000\000\000\000\000\000\000\000\000\002@\000\000\001\005H\000\000\000\000\000\000\000>X1^z\005W[\r\026@\000\000\000\000\000\000\000\017~3\031Lf3\031Lg\177\000\000\000\000\000\000\000\003\177@\000\000\000\000\000\000\002\000 \000\000\000\000\000\000\000\177p\000\000\000\000\000\000\001?x\000\000\000\000\000\000\000 \014\000\000\000\000\000\000\000\017~\000\000\000\000\000\000\000\007\177\000\000\000\000\000\000\000\003\177@\000\000\000\000\000\000\001\177`\000\000\000\000\000\000\001|7r\017\021\000\003V8?|H?5\"\020Z\030?\r|Cd \000uN\017~\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\003\177`\000\000\000\000\000\000\005\177`\000\000\000\000\000\000\000\177\020VN\\2\026h\"?T^i2#X\033k\037l!V5\003 =(Ovt.7\nL\020\033G|\022$I\022\000 \177s~U*U*U*Pm~E4\"\013\r&a>\177-o\013*-wv5?Yl\036*{R4m_o\016\0347xF\0268oy\031Lf3\030uq\0167\013Ih\000\000\000\000\007\177`\000\000\000\000\000\000\001\177`\000\000\000\000\000\000\000\003%7\007x/GM2?x\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000@\000\000\000\004\000\000\000\000\000\000%MxC\000\000\000\000\000\022R \000\000@\000\007\177\177\177\177ND\000\000\000^b4[Ew\033 \000s4\000\000\002k\014\000\000'\033d\006c=Fk\000\000\000\000\000\000\000\000\000\000\010\037\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\001\177`\000\000\000\000\000\000\002\177p\000\000\000\000\000\000\000?p\000\000\000\000\000\000\000\037w\177\177|R@5JO|\000\000\000k/rM'|\177\177\177\024P\r2S\000\000\000\000\027\000\000\000\002%\\f\000\023L\024p\000Pn:[\rBH\000\000e\022[\014@\000\000\000\000\027\000\000\000\001<\000\000\000\034@\000\000\000Js\035\010\004W\030(\000\000\000\000\000\005*M\nR\000\000\000\000\000\000\011%2\000\000\000\000\000`\000\000\000\011f\n8\000Ax\000\000\000\000\000\000\000\037~\000\000\000\000\000\000\000\017z(=\035Fo!X'|4(Q\01302\0263~M\010\023('o\037Y\177`\000\000\000\000\000\000\001\000$\000\000\000\000\000\000\000@\016\000\000\000\000\000\000\000 \005\000\000\000\000\000\000\000\017|\000\000\000\000\000\000\000\000\000%S \000\002-\032\000\000\000\000\001\027\000\000\000\000\000\000\000\000\020`\000\000\000\000\004S.\000\000\000\000\000?x\000\000\000\000\000\000\000 \011\000\000\000\000\000\000\000\037~\000\000\000\000\000\000\000\000\020\010\004\002\001",0x100);


    private final void trampoline() throws ExecutionException {
        while(state == RUNNING) {
            switch(pc>>>9) {
                case 0x80: run_10000(); break; 
                case 0x81: run_10200(); break; 
                case 0x82: run_10400(); break; 
                case 0x83: run_10600(); break; 
                case 0x84: run_10800(); break; 
                case 0x85: run_10a00(); break; 
                case 0x86: run_10c00(); break; 
                case 0x87: run_10e00(); break; 
                case 0x88: run_11000(); break; 
                case 0x89: run_11200(); break; 
                case 0x8a: run_11400(); break; 
                case 0x8b: run_11600(); break; 
                case 0x8c: run_11800(); break; 
                case 0x8d: run_11a00(); break; 
                case 0x8e: run_11c00(); break; 
                case 0x8f: run_11e00(); break; 
                case 0x90: run_12000(); break; 
                case 0x91: run_12200(); break; 
                case 0x92: run_12400(); break; 
                case 0x93: run_12600(); break; 
                case 0x94: run_12800(); break; 
                case 0x95: run_12a00(); break; 
                case 0x96: run_12c00(); break; 
                case 0x97: run_12e00(); break; 
                case 0x98: run_13000(); break; 
                case 0x99: run_13200(); break; 
                case 0x9a: run_13400(); break; 
                case 0x9b: run_13600(); break; 
                case 0x9c: run_13800(); break; 
                case 0x9d: run_13a00(); break; 
                case 0x9e: run_13c00(); break; 
                case 0x9f: run_13e00(); break; 
                case 0xa0: run_14000(); break; 
                case 0xa1: run_14200(); break; 
                case 0xa2: run_14400(); break; 
                case 0xa3: run_14600(); break; 
                case 0xa4: run_14800(); break; 
                case 0xa5: run_14a00(); break; 
                case 0xa6: run_14c00(); break; 
                case 0xa7: run_14e00(); break; 
                case 0xa8: run_15000(); break; 
                case 0xa9: run_15200(); break; 
                case 0xaa: run_15400(); break; 
                case 0xab: run_15600(); break; 
                case 0xac: run_15800(); break; 
                case 0xad: run_15a00(); break; 
                case 0xae: run_15c00(); break; 
                case 0xaf: run_15e00(); break; 
                case 0xb0: run_16000(); break; 
                case 0xb1: run_16200(); break; 
                case 0xb2: run_16400(); break; 
                case 0xb3: run_16600(); break; 
                case 0xb4: run_16800(); break; 
                case 0xb5: run_16a00(); break; 
                case 0xb6: run_16c00(); break; 
                case 0xb7: run_16e00(); break; 
                case 0xb8: run_17000(); break; 
                case 0xb9: run_17200(); break; 
                case 0xba: run_17400(); break; 
                case 0xbb: run_17600(); break; 
                case 0xbc: run_17800(); break; 
                case 0xbd: run_17a00(); break; 
                case 0xbe: run_17c00(); break; 
                case 0xbf: run_17e00(); break; 
                case 0xc0: run_18000(); break; 
                case 0xc1: run_18200(); break; 
                case 0xc2: run_18400(); break; 
                case 0xc3: run_18600(); break; 
                case 0xc4: run_18800(); break; 
                case 0xc5: run_18a00(); break; 
                case 0xc6: run_18c00(); break; 
                case 0xc7: run_18e00(); break; 
                case 0xc8: run_19000(); break; 
                case 0xc9: run_19200(); break; 
                case 0xca: run_19400(); break; 
                case 0xcb: run_19600(); break; 
                case 0xcc: run_19800(); break; 
                case 0xcd: run_19a00(); break; 
                case 0xce: run_19c00(); break; 
                case 0xcf: run_19e00(); break; 
                case 0xd0: run_1a000(); break; 
                case 0xd1: run_1a200(); break; 
                case 0xd2: run_1a400(); break; 
                case 0xd3: run_1a600(); break; 
                case 0xd4: run_1a800(); break; 
                case 0xd5: run_1aa00(); break; 
                case 0xd6: run_1ac00(); break; 
                case 0xd7: run_1ae00(); break; 
                case 0xd8: run_1b000(); break; 
                case 0xd9: run_1b200(); break; 
                case 0xda: run_1b400(); break; 
                case 0xdb: run_1b600(); break; 
                case 0xdc: run_1b800(); break; 
                case 0xdd: run_1ba00(); break; 
                case 0xde: run_1bc00(); break; 
                case 0xdf: run_1be00(); break; 
                case 0xe0: run_1c000(); break; 
                case 0xe1: run_1c200(); break; 
                case 0xe2: run_1c400(); break; 
                case 0xe3: run_1c600(); break; 
                case 0xe4: run_1c800(); break; 
                case 0xe5: run_1ca00(); break; 
                case 0xe6: run_1cc00(); break; 
                case 0xe7: run_1ce00(); break; 
                case 0xe8: run_1d000(); break; 
                case 0xe9: run_1d200(); break; 
                case 0xea: run_1d400(); break; 
                case 0xeb: run_1d600(); break; 
                case 0xec: run_1d800(); break; 
                case 0xed: run_1da00(); break; 
                case 0xee: run_1dc00(); break; 
                case 0xef: run_1de00(); break; 
                case 0xf0: run_1e000(); break; 
                case 0xf1: run_1e200(); break; 
                case 0xf2: run_1e400(); break; 
                case 0xf3: run_1e600(); break; 
                case 0xf4: run_1e800(); break; 
                case 0xf5: run_1ea00(); break; 
                case 0xf6: run_1ec00(); break; 
                case 0xf7: run_1ee00(); break; 
                case 0xf8: run_1f000(); break; 
                case 0xf9: run_1f200(); break; 
                case 0xfa: run_1f400(); break; 
                case 0xfb: run_1f600(); break; 
                case 0xfc: run_1f800(); break; 
                case 0xfd: run_1fa00(); break; 
                case 0xfe: run_1fc00(); break; 
                case 0xff: run_1fe00(); break; 
                case 0x100: run_20000(); break; 
                case 0x101: run_20200(); break; 
                case 0x102: run_20400(); break; 
                case 0x103: run_20600(); break; 
                case 0x104: run_20800(); break; 
                case 0x105: run_20a00(); break; 
                case 0x106: run_20c00(); break; 
                case 0x107: run_20e00(); break; 
                case 0x108: run_21000(); break; 
                case 0x109: run_21200(); break; 
                case 0x10a: run_21400(); break; 
                case 0x10b: run_21600(); break; 
                case 0x10c: run_21800(); break; 
                case 0x10d: run_21a00(); break; 
                case 0x10e: run_21c00(); break; 
                case 0x10f: run_21e00(); break; 
                case 0x110: run_22000(); break; 
                case 0x111: run_22200(); break; 
                case 0x112: run_22400(); break; 
                case 0x113: run_22600(); break; 
                case 0x114: run_22800(); break; 
                case 0x115: run_22a00(); break; 
                case 0x116: run_22c00(); break; 
                case 0x117: run_22e00(); break; 
                case 0x118: run_23000(); break; 
                case 0x119: run_23200(); break; 
                case 0x11a: run_23400(); break; 
                case 0x11b: run_23600(); break; 
                case 0x11c: run_23800(); break; 
                case 0x11d: run_23a00(); break; 
                case 0x11e: run_23c00(); break; 
                case 0x11f: run_23e00(); break; 
                case 0x120: run_24000(); break; 
                case 0x121: run_24200(); break; 
                case 0x122: run_24400(); break; 
                case 0x123: run_24600(); break; 
                case 0x124: run_24800(); break; 
                case 0x125: run_24a00(); break; 
                case 0x126: run_24c00(); break; 
                case 0x127: run_24e00(); break; 
                case 0x128: run_25000(); break; 
                case 0x129: run_25200(); break; 
                case 0x12a: run_25400(); break; 
                case 0x12b: run_25600(); break; 
                case 0x12c: run_25800(); break; 
                case 0x12d: run_25a00(); break; 
                case 0x12e: run_25c00(); break; 
                case 0x12f: run_25e00(); break; 
                case 0x130: run_26000(); break; 
                case 0x131: run_26200(); break; 
                case 0x132: run_26400(); break; 
                case 0x133: run_26600(); break; 
                case 0x134: run_26800(); break; 
                case 0x135: run_26a00(); break; 
                case 0x136: run_26c00(); break; 
                case 0x137: run_26e00(); break; 
                case 0x138: run_27000(); break; 
                case 0x139: run_27200(); break; 
                case 0x13a: run_27400(); break; 
                case 0x13b: run_27600(); break; 
                case 0x13c: run_27800(); break; 
                case 0x13d: run_27a00(); break; 
                case 0x13e: run_27c00(); break; 
                case 0x13f: run_27e00(); break; 
                case 0x140: run_28000(); break; 
                case 0x141: run_28200(); break; 
                case 0x142: run_28400(); break; 
                case 0x143: run_28600(); break; 
                case 0x144: run_28800(); break; 
                case 0x145: run_28a00(); break; 
                case 0x146: run_28c00(); break; 
                case 0x147: run_28e00(); break; 
                case 0x148: run_29000(); break; 
                case 0x149: run_29200(); break; 
                case 0x14a: run_29400(); break; 
                case 0x14b: run_29600(); break; 
                case 0x14c: run_29800(); break; 
                case 0x14d: run_29a00(); break; 
                case 0x14e: run_29c00(); break; 
                case 0x14f: run_29e00(); break; 
                case 0x150: run_2a000(); break; 
                case 0x151: run_2a200(); break; 
                case 0x152: run_2a400(); break; 
                case 0x153: run_2a600(); break; 
                case 0x154: run_2a800(); break; 
                case 0x155: run_2aa00(); break; 
                case 0x156: run_2ac00(); break; 
                case 0x157: run_2ae00(); break; 
                case 0x158: run_2b000(); break; 
                case 0x159: run_2b200(); break; 
                case 0x15a: run_2b400(); break; 
                case 0x15b: run_2b600(); break; 
                case 0x15c: run_2b800(); break; 
                case 0x15d: run_2ba00(); break; 
                case 0x15e: run_2bc00(); break; 
                case 0x15f: run_2be00(); break; 
                case 0x160: run_2c000(); break; 
                case 0x161: run_2c200(); break; 
                case 0x162: run_2c400(); break; 
                case 0x163: run_2c600(); break; 
                case 0x164: run_2c800(); break; 
                case 0x165: run_2ca00(); break; 
                case 0x166: run_2cc00(); break; 
                case 0x167: run_2ce00(); break; 
                case 0x168: run_2d000(); break; 
                case 0x169: run_2d200(); break; 
                case 0x16a: run_2d400(); break; 
                case 0x16b: run_2d600(); break; 
                case 0x16c: run_2d800(); break; 
                case 0x16d: run_2da00(); break; 
                case 0x16e: run_2dc00(); break; 
                case 0x16f: run_2de00(); break; 
                case 0x170: run_2e000(); break; 
                case 0x171: run_2e200(); break; 
                case 0x172: run_2e400(); break; 
                case 0x173: run_2e600(); break; 
                case 0x174: run_2e800(); break; 
                case 0x175: run_2ea00(); break; 
                case 0x176: run_2ec00(); break; 
                case 0x177: run_2ee00(); break; 
                case 0x178: run_2f000(); break; 
                case 0x179: run_2f200(); break; 
                case 0x17a: run_2f400(); break; 
                case 0x17b: run_2f600(); break; 
                case 0x17c: run_2f800(); break; 
                case 0x17d: run_2fa00(); break; 
                case 0x17e: run_2fc00(); break; 
                case 0x17f: run_2fe00(); break; 
                case 0x180: run_30000(); break; 
                case 0x181: run_30200(); break; 
                case 0x182: run_30400(); break; 
                case 0x183: run_30600(); break; 
                case 0x184: run_30800(); break; 
                case 0x185: run_30a00(); break; 
                case 0x186: run_30c00(); break; 
                case 0x187: run_30e00(); break; 
                case 0x188: run_31000(); break; 
                case 0x189: run_31200(); break; 
                case 0x18a: run_31400(); break; 
                case 0x18b: run_31600(); break; 
                case 0x18c: run_31800(); break; 
                case 0x18d: run_31a00(); break; 
                case 0x18e: run_31c00(); break; 
                case 0x18f: run_31e00(); break; 
                case 0x190: run_32000(); break; 
                case 0x191: run_32200(); break; 
                case 0x192: run_32400(); break; 
                case 0x193: run_32600(); break; 
                case 0x194: run_32800(); break; 
                case 0x195: run_32a00(); break; 
                case 0x196: run_32c00(); break; 
                case 0x197: run_32e00(); break; 
                case 0x198: run_33000(); break; 
                case 0x199: run_33200(); break; 
                case 0x19a: run_33400(); break; 
                case 0x19b: run_33600(); break; 
                case 0x19c: run_33800(); break; 
                case 0x19d: run_33a00(); break; 
                case 0x19e: run_33c00(); break; 
                case 0x19f: run_33e00(); break; 
                case 0x1a0: run_34000(); break; 
                case 0x1a1: run_34200(); break; 
                case 0x1a2: run_34400(); break; 
                case 0x1a3: run_34600(); break; 
                case 0x1a4: run_34800(); break; 
                case 0x1a5: run_34a00(); break; 
                case 0x1a6: run_34c00(); break; 
                case 0x1a7: run_34e00(); break; 
                case 0x1a8: run_35000(); break; 
                case 0x1a9: run_35200(); break; 
                case 0x1aa: run_35400(); break; 
                case 0x1ab: run_35600(); break; 
                case 0x1ac: run_35800(); break; 
                case 0x1ad: run_35a00(); break; 
                case 0x1ae: run_35c00(); break; 
                case 0x1af: run_35e00(); break; 
                case 0x1b0: run_36000(); break; 
                case 0x1b1: run_36200(); break; 
                case 0x1b2: run_36400(); break; 
                case 0x1b3: run_36600(); break; 
                case 0x1b4: run_36800(); break; 
                case 0x1b5: run_36a00(); break; 
                case 0x1b6: run_36c00(); break; 
                case 0x1b7: run_36e00(); break; 
                case 0x1b8: run_37000(); break; 
                case 0x1b9: run_37200(); break; 
                case 0x1ba: run_37400(); break; 
                case 0x1bb: run_37600(); break; 
                case 0x1bc: run_37800(); break; 
                case 0x1bd: run_37a00(); break; 
                case 0x1be: run_37c00(); break; 
                case 0x1bf: run_37e00(); break; 
                case 0x1c0: run_38000(); break; 
                case 0x1c1: run_38200(); break; 
                case 0x1c2: run_38400(); break; 
                case 0x1c3: run_38600(); break; 
                case 0x1c4: run_38800(); break; 
                case 0x1c5: run_38a00(); break; 
                case 0x1c6: run_38c00(); break; 
                case 0x1c7: run_38e00(); break; 
                case 0x1c8: run_39000(); break; 
                case 0x1c9: run_39200(); break; 
                case 0x1ca: run_39400(); break; 
                case 0x1cb: run_39600(); break; 
                case 0x1cc: run_39800(); break; 
                case 0x1cd: run_39a00(); break; 
                case 0x1ce: run_39c00(); break; 
                case 0x1cf: run_39e00(); break; 
                case 0x1d0: run_3a000(); break; 
                case 0x1d1: run_3a200(); break; 
                case 0x1d2: run_3a400(); break; 
                case 0x1d3: run_3a600(); break; 
                case 0x1d4: run_3a800(); break; 
                case 0x1d5: run_3aa00(); break; 
                case 0x1d6: run_3ac00(); break; 
                case 0x1d7: run_3ae00(); break; 
                case 0x1d8: run_3b000(); break; 
                case 0x1d9: run_3b200(); break; 
                case 0x1da: run_3b400(); break; 
                case 0x1db: run_3b600(); break; 
                case 0x1dc: run_3b800(); break; 
                case 0x1dd: run_3ba00(); break; 
                case 0x1de: run_3bc00(); break; 
                case 0x1df: run_3be00(); break; 
                case 0x1e0: run_3c000(); break; 
                case 0x1e1: run_3c200(); break; 
                case 0x1e2: run_3c400(); break; 
                case 0x1e3: run_3c600(); break; 
                case 0x1e4: run_3c800(); break; 
                case 0x1e5: run_3ca00(); break; 
                case 0x1e6: run_3cc00(); break; 
                case 0x1e7: run_3ce00(); break; 
                case 0x1e8: run_3d000(); break; 
                case 0x1e9: run_3d200(); break; 
                case 0x1ea: run_3d400(); break; 
                case 0x1eb: run_3d600(); break; 
                case 0x1ec: run_3d800(); break; 
                case 0x1ed: run_3da00(); break; 
                case 0x1ee: run_3dc00(); break; 
                case 0x1ef: run_3de00(); break; 
                case 0x1f0: run_3e000(); break; 
                case 0x1f1: run_3e200(); break; 
                case 0x1f2: run_3e400(); break; 
                case 0x1f3: run_3e600(); break; 
                case 0x1f4: run_3e800(); break; 
                case 0x1f5: run_3ea00(); break; 
                case 0x1f6: run_3ec00(); break; 
                case 0x1f7: run_3ee00(); break; 
                case 0x1f8: run_3f000(); break; 
                case 0x1f9: run_3f200(); break; 
                case 0x1fa: run_3f400(); break; 
                case 0x1fb: run_3f600(); break; 
                case 0x1fc: run_3f800(); break; 
                case 0x1fd: run_3fa00(); break; 
                case 0x1fe: run_3fc00(); break; 
                case 0x1ff: run_3fe00(); break; 
                case 0x200: run_40000(); break; 
                case 0x201: run_40200(); break; 
                case 0x202: run_40400(); break; 
                case 0x203: run_40600(); break; 
                case 0x204: run_40800(); break; 
                case 0x205: run_40a00(); break; 
                case 0x206: run_40c00(); break; 
                case 0x207: run_40e00(); break; 
                case 0x208: run_41000(); break; 
                case 0x209: run_41200(); break; 
                case 0x20a: run_41400(); break; 
                case 0x20b: run_41600(); break; 
                case 0x20c: run_41800(); break; 
                case 0x20d: run_41a00(); break; 
                case 0x20e: run_41c00(); break; 
                case 0x20f: run_41e00(); break; 
                case 0x210: run_42000(); break; 
                case 0x211: run_42200(); break; 
                case 0x212: run_42400(); break; 
                case 0x213: run_42600(); break; 
                case 0x214: run_42800(); break; 
                case 0x215: run_42a00(); break; 
                case 0x216: run_42c00(); break; 
                case 0x217: run_42e00(); break; 
                case 0x218: run_43000(); break; 
                case 0x219: run_43200(); break; 
                case 0x21a: run_43400(); break; 
                case 0x21b: run_43600(); break; 
                case 0x21c: run_43800(); break; 
                case 0x21d: run_43a00(); break; 
                case 0x21e: run_43c00(); break; 
                case 0x21f: run_43e00(); break; 
                case 0x220: run_44000(); break; 
                case 0x221: run_44200(); break; 
                case 0x222: run_44400(); break; 
                case 0x223: run_44600(); break; 
                case 0x224: run_44800(); break; 
                case 0x225: run_44a00(); break; 
                case 0x226: run_44c00(); break; 
                case 0x227: run_44e00(); break; 
                case 0x228: run_45000(); break; 
                case 0x229: run_45200(); break; 
                case 0x22a: run_45400(); break; 
                case 0x22b: run_45600(); break; 
                case 0x22c: run_45800(); break; 
                case 0x22d: run_45a00(); break; 
                case 0x22e: run_45c00(); break; 
                case 0x22f: run_45e00(); break; 
                case 0x230: run_46000(); break; 
                case 0x231: run_46200(); break; 
                case 0x232: run_46400(); break; 
                case 0x233: run_46600(); break; 
                case 0x234: run_46800(); break; 
                case 0x235: run_46a00(); break; 
                case 0x236: run_46c00(); break; 
                case 0x237: run_46e00(); break; 
                case 0x238: run_47000(); break; 
                default: throw new ExecutionException("invalid address 0x" + Long.toString(this.pc&0xffffffffL,16) + ": r2: " + r2);
            }
        }
    }

    public Svdlibc() {
        super(4096,65536);
        initPages(_data1,0x47200,false);
        initPages(_data2,0x47208,false);
        initPages(_data3,0x48000,true);
        initPages(_data4,0x4a8f0,false);
        initPages(_data5,0x4b0d0,false);
        clearPages(0x4b4d0,0x2d);
        clearPages(0x4b588,0xcae);
    }

    protected int entryPoint() { return 0x1e400; }
    protected int heapStart() { return 0x4e840; }
    protected int gp() { return 0x530d0; }
    public static void main(String[] args) throws Exception {
        Svdlibc me = new Svdlibc();
        int status = me.run("edu.mit.tedlab.Svdlibc",args);
        System.exit(status);
    }

    protected void _execute() throws ExecutionException { trampoline(); }

    protected void setCPUState(CPUState state) {
        r1=state.r[1];
        r2=state.r[2];
        r3=state.r[3];
        r4=state.r[4];
        r5=state.r[5];
        r6=state.r[6];
        r7=state.r[7];
        r8=state.r[8];
        r9=state.r[9];
        r10=state.r[10];
        r11=state.r[11];
        r12=state.r[12];
        r13=state.r[13];
        r14=state.r[14];
        r15=state.r[15];
        r16=state.r[16];
        r17=state.r[17];
        r18=state.r[18];
        r19=state.r[19];
        r20=state.r[20];
        r21=state.r[21];
        r22=state.r[22];
        r23=state.r[23];
        r24=state.r[24];
        r25=state.r[25];
        r26=state.r[26];
        r27=state.r[27];
        r28=state.r[28];
        r29=state.r[29];
        r30=state.r[30];
        r31=state.r[31];
        f0=state.f[0];
        f1=state.f[1];
        f2=state.f[2];
        f3=state.f[3];
        f4=state.f[4];
        f5=state.f[5];
        f6=state.f[6];
        f7=state.f[7];
        f8=state.f[8];
        f9=state.f[9];
        f10=state.f[10];
        f11=state.f[11];
        f12=state.f[12];
        f13=state.f[13];
        f14=state.f[14];
        f15=state.f[15];
        f16=state.f[16];
        f17=state.f[17];
        f18=state.f[18];
        f19=state.f[19];
        f20=state.f[20];
        f21=state.f[21];
        f22=state.f[22];
        f23=state.f[23];
        f24=state.f[24];
        f25=state.f[25];
        f26=state.f[26];
        f27=state.f[27];
        f28=state.f[28];
        f29=state.f[29];
        f30=state.f[30];
        f31=state.f[31];
        hi=state.hi; lo=state.lo; fcsr=state.fcsr;
        pc=state.pc;
    }
    protected void getCPUState(CPUState state) {
        state.r[1]=r1;
        state.r[2]=r2;
        state.r[3]=r3;
        state.r[4]=r4;
        state.r[5]=r5;
        state.r[6]=r6;
        state.r[7]=r7;
        state.r[8]=r8;
        state.r[9]=r9;
        state.r[10]=r10;
        state.r[11]=r11;
        state.r[12]=r12;
        state.r[13]=r13;
        state.r[14]=r14;
        state.r[15]=r15;
        state.r[16]=r16;
        state.r[17]=r17;
        state.r[18]=r18;
        state.r[19]=r19;
        state.r[20]=r20;
        state.r[21]=r21;
        state.r[22]=r22;
        state.r[23]=r23;
        state.r[24]=r24;
        state.r[25]=r25;
        state.r[26]=r26;
        state.r[27]=r27;
        state.r[28]=r28;
        state.r[29]=r29;
        state.r[30]=r30;
        state.r[31]=r31;
        state.f[0]=f0;
        state.f[1]=f1;
        state.f[2]=f2;
        state.f[3]=f3;
        state.f[4]=f4;
        state.f[5]=f5;
        state.f[6]=f6;
        state.f[7]=f7;
        state.f[8]=f8;
        state.f[9]=f9;
        state.f[10]=f10;
        state.f[11]=f11;
        state.f[12]=f12;
        state.f[13]=f13;
        state.f[14]=f14;
        state.f[15]=f15;
        state.f[16]=f16;
        state.f[17]=f17;
        state.f[18]=f18;
        state.f[19]=f19;
        state.f[20]=f20;
        state.f[21]=f21;
        state.f[22]=f22;
        state.f[23]=f23;
        state.f[24]=f24;
        state.f[25]=f25;
        state.f[26]=f26;
        state.f[27]=f27;
        state.f[28]=f28;
        state.f[29]=f29;
        state.f[30]=f30;
        state.f[31]=f31;
        state.hi=hi; state.lo=lo; state.fcsr=fcsr;
        state.pc=pc;
    }

    private static final java.util.Hashtable symbols = new java.util.Hashtable();
    static {
        symbols.put("setgrent",new Integer(0x3a400));
        symbols.put("chroot",new Integer(0x33800));
        symbols.put("strcpy",new Integer(0x44a00));
        symbols.put("fabs",new Integer(0x1ea00));
        symbols.put("sqrt",new Integer(0x1ec00));
        symbols.put("rotateArray",new Integer(0x17be4));
        symbols.put("waitpid",new Integer(0x31a00));
        symbols.put("getgid",new Integer(0x2ecc4));
        symbols.put("popen",new Integer(0x25400));
        symbols.put("sysconf",new Integer(0x31000));
        symbols.put("printf",new Integer(0x25c00));
        symbols.put("svdNewSMat",new Integer(0x11044));
        symbols.put("vsprintf",new Integer(0x46a00));
        symbols.put("utime",new Integer(0x31400));
        symbols.put("getlogin",new Integer(0x3b600));
        symbols.put("recv",new Integer(0x36a00));
        symbols.put("connect",new Integer(0x34e00));
        symbols.put("ungetc",new Integer(0x46400));
        symbols.put("imtqlb",new Integer(0x1b3fc));
        symbols.put("strerror",new Integer(0x27400));
        symbols.put("geteuid",new Integer(0x2ecb4));
        symbols.put("svdWriteDenseMatrix",new Integer(0x13ae0));
        symbols.put("memmove",new Integer(0x40000));
        symbols.put("pclose",new Integer(0x25800));
        symbols.put("snprintf",new Integer(0x44200));
        symbols.put("pathconf",new Integer(0x33400));
        symbols.put("timer",new Integer(0x10164));
        symbols.put("mknod",new Integer(0x33a00));
        symbols.put("getgrgid",new Integer(0x3a000));
        symbols.put("getenv",new Integer(0x3ec00));
        symbols.put("fchmod",new Integer(0x32c00));
        symbols.put("svdLoadDenseArray",new Integer(0x11f58));
        symbols.put("getegid",new Integer(0x2ecd4));
        symbols.put("setpriority",new Integer(0x34c00));
        symbols.put("getpriority",new Integer(0x34a00));
        symbols.put("imtql2",new Integer(0x1bf80));
        symbols.put("usleep",new Integer(0x33e00));
        symbols.put("getpagesize",new Integer(0x2e180));
        symbols.put("fchown",new Integer(0x32600));
        symbols.put("fscanf",new Integer(0x22600));
        symbols.put("fgets",new Integer(0x20800));
        symbols.put("svd_dmin",new Integer(0x14d0c));
        symbols.put("dirname",new Integer(0x2f600));
        symbols.put("svd_opb",new Integer(0x15fa0));
        symbols.put("memcpy",new Integer(0x2e5dc));
        symbols.put("execl",new Integer(0x3da00));
        symbols.put("write_header",new Integer(0x16c54));
        symbols.put("perror",new Integer(0x25200));
        symbols.put("svd_imax",new Integer(0x14d98));
        symbols.put("readlink",new Integer(0x32200));
        symbols.put("dup2",new Integer(0x31800));
        symbols.put("store",new Integer(0x1d31c));
        symbols.put("getpass",new Integer(0x3b200));
        symbols.put("getuid",new Integer(0x2eca4));
        symbols.put("svd_closeFile",new Integer(0x148d8));
        symbols.put("malloc",new Integer(0x23a00));
        symbols.put("isatty",new Integer(0x3f200));
        symbols.put("svdLoadSparseMatrix",new Integer(0x136f8));
        symbols.put("endpwent",new Integer(0x3b000));
        symbols.put("sleep",new Integer(0x2e0f0));
        symbols.put("vsnprintf",new Integer(0x46600));
        symbols.put("recvfrom",new Integer(0x36400));
        symbols.put("svdFreeSMat",new Integer(0x111d4));
        symbols.put("strtoul",new Integer(0x45600));
        symbols.put("svd_datx",new Integer(0x14f74));
        symbols.put("gethostbyaddr",new Integer(0x39c00));
        symbols.put("svd_daxpy",new Integer(0x1562c));
        symbols.put("svdFreeSVDRec",new Integer(0x11330));
        symbols.put("rmdir",new Integer(0x30e00));
        symbols.put("socket",new Integer(0x35000));
        symbols.put("select",new Integer(0x36600));
        symbols.put("readdir",new Integer(0x39000));
        symbols.put("lchown",new Integer(0x32800));
        symbols.put("setgroups",new Integer(0x37a00));
        symbols.put("printUsage",new Integer(0x102cc));
        symbols.put("fflush",new Integer(0x20600));
        symbols.put("svd_error",new Integer(0x13ed0));
        symbols.put("ftruncate",new Integer(0x33c00));
        symbols.put("realpath",new Integer(0x34400));
        symbols.put("svd_readFile",new Integer(0x14350));
        symbols.put("chown",new Integer(0x32400));
        symbols.put("svd_fatalError",new Integer(0x13f68));
        symbols.put("svd_doubleArray",new Integer(0x13d90));
        symbols.put("svd_dswap",new Integer(0x15b40));
        symbols.put("send",new Integer(0x36800));
        symbols.put("svd_fsign",new Integer(0x14b74));
        symbols.put("chmod",new Integer(0x32a00));
        symbols.put("alarm",new Integer(0x2f064));
        symbols.put("strtol",new Integer(0x29200));
        symbols.put("pipe",new Integer(0x31600));
        symbols.put("lanso",new Integer(0x18584));
        symbols.put("uname",new Integer(0x2fa00));
        symbols.put("accept",new Integer(0x35600));
        symbols.put("basename",new Integer(0x2f800));
        symbols.put("calloc",new Integer(0x1fc00));
        symbols.put("strtod",new Integer(0x28c00));
        symbols.put("isinf",new Integer(0x42e00));
        symbols.put("atof",new Integer(0x1f800));
        symbols.put("sysctl",new Integer(0x34800));
        symbols.put("fstat",new Integer(0x45e00));
        symbols.put("fprintf",new Integer(0x21a00));
        symbols.put("setpwent",new Integer(0x3ae00));
        symbols.put("bind",new Integer(0x35c00));
        symbols.put("inet_addr",new Integer(0x3bc00));
        symbols.put("mkfifo",new Integer(0x34000));
        symbols.put("chdir",new Integer(0x31200));
        symbols.put("initgroups",new Integer(0x3be00));
        symbols.put("endgrent",new Integer(0x3a600));
        symbols.put("setsockopt",new Integer(0x35a00));
        symbols.put("fseek",new Integer(0x22a00));
        symbols.put("ortbnd",new Integer(0x199c8));
        symbols.put("svdTransposeS",new Integer(0x11a2c));
        symbols.put("memchr",new Integer(0x24a00));
        symbols.put("svd_dscal",new Integer(0x14e60));
        symbols.put("umask",new Integer(0x2ec94));
        symbols.put("svdLoadDenseMatrix",new Integer(0x1382c));
        symbols.put("lstat",new Integer(0x32e00));
        symbols.put("svd_readBinFloat",new Integer(0x149f0));
        symbols.put("purge",new Integer(0x19d98));
        symbols.put("setgid",new Integer(0x37600));
        symbols.put("signal",new Integer(0x43a00));
        symbols.put("svd_ddot",new Integer(0x153c0));
        symbols.put("strncmp",new Integer(0x44c00));
        symbols.put("svdConvertStoD",new Integer(0x11424));
        symbols.put("strncpy",new Integer(0x44e00));
        symbols.put("sync",new Integer(0x38a00));
        symbols.put("strcasecmp",new Integer(0x26e00));
        symbols.put("sendto",new Integer(0x36200));
        symbols.put("svd_writeFile",new Integer(0x1476c));
        symbols.put("realloc",new Integer(0x42600));
        symbols.put("svdLAS2",new Integer(0x16e74));
        symbols.put("listen",new Integer(0x35e00));
        symbols.put("svd_writeBinInt",new Integer(0x14a84));
        symbols.put("fdopen",new Integer(0x3de00));
        symbols.put("fork",new Integer(0x45c00));
        symbols.put("sscanf",new Integer(0x44600));
        symbols.put("svd_random2",new Integer(0x1659c));
        symbols.put("getgrent",new Integer(0x3a200));
        symbols.put("sigaction",new Integer(0x38e00));
        symbols.put("svd_dsort2",new Integer(0x15894));
        symbols.put("fread",new Integer(0x21e00));
        symbols.put("inet_aton",new Integer(0x30000));
        symbols.put("svdNewSVDRec",new Integer(0x112c8));
        symbols.put("symlink",new Integer(0x32000));
        symbols.put("svd_dcopy",new Integer(0x151b4));
        symbols.put("fopen",new Integer(0x21800));
        symbols.put("getopt",new Integer(0x23400));
        symbols.put("memset",new Integer(0x2e5ec));
        symbols.put("main",new Integer(0x10320));
        symbols.put("svdFreeDMat",new Integer(0x10f70));
        symbols.put("matherr",new Integer(0x1f400));
        symbols.put("fclose",new Integer(0x20400));
        symbols.put("inet_ntoa",new Integer(0x39400));
        symbols.put("getppid",new Integer(0x2e7bc));
        symbols.put("opendir",new Integer(0x2f200));
        symbols.put("svdNewDMat",new Integer(0x10d3c));
        symbols.put("getgroups",new Integer(0x36c00));
        symbols.put("getgrouplist",new Integer(0x30400));
        symbols.put("seteuid",new Integer(0x37400));
        symbols.put("svd_writeBinFloat",new Integer(0x14afc));
        symbols.put("herror",new Integer(0x39a00));
        symbols.put("svd_pythag",new Integer(0x16880));
        symbols.put("strcmp",new Integer(0x27200));
        symbols.put("shutdown",new Integer(0x36000));
        symbols.put("ttyname",new Integer(0x38c00));
        symbols.put("getpwuid",new Integer(0x3aa00));
        symbols.put("dup",new Integer(0x33200));
        symbols.put("getcwd",new Integer(0x31c00));
        symbols.put("gethostbyname",new Integer(0x2f400));
        symbols.put("getpwnam",new Integer(0x3a800));
        symbols.put("svd_imin",new Integer(0x14dfc));
        symbols.put("getservbyname",new Integer(0x39600));
        symbols.put("atan",new Integer(0x1e600));
        symbols.put("gethostname",new Integer(0x3b800));
        symbols.put("svdResetCounters",new Integer(0x10cd8));
        symbols.put("sprintf",new Integer(0x26400));
        symbols.put("strtof",new Integer(0x28e00));
        symbols.put("atexit",new Integer(0x1f600));
        symbols.put("setlocale",new Integer(0x3fa00));
        symbols.put("getpeername",new Integer(0x37000));
        symbols.put("check_parameters",new Integer(0x16aac));
        symbols.put("svdWriteSparseMatrix",new Integer(0x13960));
        symbols.put("vfork",new Integer(0x33600));
        symbols.put("svdLAS2A",new Integer(0x16da0));
        symbols.put("svdTransposeD",new Integer(0x118f0));
        symbols.put("isnan",new Integer(0x1f200));
        symbols.put("fsync",new Integer(0x37e00));
        symbols.put("startv",new Integer(0x1a698));
        symbols.put("fputc",new Integer(0x21c00));
        symbols.put("lanczos_step",new Integer(0x18e18));
        symbols.put("stpone",new Integer(0x1a2e4));
        symbols.put("getsockopt",new Integer(0x35800));
        symbols.put("hstrerror",new Integer(0x39800));
        symbols.put("localeconv",new Integer(0x3fc00));
        symbols.put("stat",new Integer(0x29600));
        symbols.put("svd_longArray",new Integer(0x13d00));
        symbols.put("fwrite",new Integer(0x23200));
        symbols.put("access",new Integer(0x30c00));
        symbols.put("vfscanf",new Integer(0x2c200));
        symbols.put("svd_dmax",new Integer(0x14c80));
        symbols.put("svdConvertDtoS",new Integer(0x115b0));
        symbols.put("getdents",new Integer(0x33000));
        symbols.put("exit",new Integer(0x20200));
        symbols.put("klogctl",new Integer(0x34200));
        symbols.put("getgrnam",new Integer(0x39e00));
        symbols.put("svd_beep",new Integer(0x13e20));
        symbols.put("atoi",new Integer(0x1fa00));
        symbols.put("error_bound",new Integer(0x1abb0));
        symbols.put("ritvec",new Integer(0x17db0));
        symbols.put("getpwent",new Integer(0x3ac00));
        symbols.put("svd_opa",new Integer(0x16378));
        symbols.put("daemon",new Integer(0x3ba00));
        symbols.put("machar",new Integer(0x1cc0c));
        symbols.put("strlen",new Integer(0x1d710));
        symbols.put("open",new Integer(0x46000));
        symbols.put("svdWriteDenseArray",new Integer(0x11dcc));
        symbols.put("strchr",new Integer(0x27000));
        symbols.put("fputs",new Integer(0x3e200));
        symbols.put("setsid",new Integer(0x37c00));
        symbols.put("setegid",new Integer(0x37800));
        symbols.put("closedir",new Integer(0x39200));
        symbols.put("vasprintf",new Integer(0x3b400));
        symbols.put("svd_fatalReadFile",new Integer(0x14230));
        symbols.put("setuid",new Integer(0x37200));
        symbols.put("svd_debug",new Integer(0x13e74));
        symbols.put("mkdir",new Integer(0x30a00));
        symbols.put("svd_idamax",new Integer(0x15dbc));
        symbols.put("close",new Integer(0x29400));
        symbols.put("_call_helper",new Integer(0x1d728));
        symbols.put("vfprintf",new Integer(0x29e00));
        symbols.put("raise",new Integer(0x43800));
        symbols.put("free",new Integer(0x23c00));
        symbols.put("svd_readBinInt",new Integer(0x1496c));
        symbols.put("getsockname",new Integer(0x36e00));
    }
    public int lookupSymbol(String symbol) { Integer i = (Integer) symbols.get(symbol); return i==null ? -1 : i.intValue(); }

}

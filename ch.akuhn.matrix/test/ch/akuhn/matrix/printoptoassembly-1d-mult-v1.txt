	@Override
	public double[] mult(double[] y) {
		double[] x = new double[a.length];
		int n = 0;
		for (int i = 0; i < lda; i++) {
			for (int j = 0; j < lda; j++, n++) {
				x[i] += a[n] * y[j];
			}
		}
		return x;
	}

{method} 
VM option '+PrintOptoAssembly'
 - klass: {other class}
 - method holder:     'java/lang/Math'
 - constants:         0x084e7fd4{constant pool}
 - access:            0x81000009  public static 
 - name:              'max'
 - signature:         '(II)I'
 - max stack:         2
 - max locals:        2
 - size of params:    2
 - method size:       20
 - vtable index:      -2
 - code size:         11
 - code start:        0x290ead30
 - code end (excl):   0x290ead3b
 - method data:       0x2920a448
 - checked ex length: 0
 - linenumber start:  0x290ead3b
 - localvar length:   2
 - localvar start:    0x290ead46
#
#  int ( int, int )
#
#r000 ecx   : parm 0: int
#r005 edx   : parm 1: int
# -- Old esp -- Framesize: 16 --
#r045 esp+12: return address
#r044 esp+ 8: pad2, in_preserve
#r043 esp+ 4: pad2, in_preserve
#r042 esp+ 0: Fixed slot 0
#
abababab   N1: #	B1 <- B1  Freq: 10000
abababab
000   B1: #	N1 <- BLOCK HEAD IS JUNK   Freq: 10000
000   	PUSHL  EBP
	SUB    ESP,8	# Create frame
007   	CMP    ECX,EDX
009   	MOV    EAX,ECX
00b   	CMOVlt EAX,EDX
00e   	ADD    ESP,8	# Destroy frame
	POPL   EBP
	TEST   PollPage,EAX	! Poll Safepoint
	
018   	RET
018

	(0)
	(0) 0.004973257
{method} 
 - klass: {other class}
 - method holder:     'ch/akuhn/matrix/OneDimensional'
 - constants:         0x084e7fd4{constant pool}
 - access:            0xc1000001  public 
 - name:              'mult'
 - signature:         '([D)[D'
 - max stack:         8
 - max locals:        6
 - size of params:    2
 - method size:       20
 - vtable index:      7
 - code size:         69
 - code start:        0x291f0d48
 - code end (excl):   0x291f0d8d
 - method data:       0x29237448
 - checked ex length: 0
 - linenumber start:  0x291f0d8d
 - localvar length:   6
 - localvar start:    0x291f0d9e
#
#  double[int:>=0]:exact* ( rawptr:BotPTR )
#
#r000 ecx   : parm 0: rawptr:BotPTR
# -- Old esp -- Framesize: 80 --
#r045 esp+76: return address
#r044 esp+72: pad2, in_preserve
#r043 esp+68: pad2, in_preserve
#r042 esp+64: Fixed slot 0
#r061 esp+60: spill
#r060 esp+56: spill
#r059 esp+52: spill
#r058 esp+48: spill
#r057 esp+44: spill
#r056 esp+40: spill
#r055 esp+36: spill
#r054 esp+32: spill
#r053 esp+28: spill
#r052 esp+24: spill
#r051 esp+20: spill
#r050 esp+16: spill
#r049 esp+12: spill
#r048 esp+ 8: spill
#r047 esp+ 4: spill
#r046 esp+ 0: outgoing argument
#
000   N630: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	INT3
      	NOP 	# 3 bytes pad for loops and calls

004   B1: #	B35 B2 <- BLOCK HEAD IS JUNK   Freq: 1
004   	# stack bang
	PUSHL  EBP
	SUB    ESP,72	# Create frame
012   	MOV    ESI,[ECX]
014   	MOV    EBP,[ECX + #4]
017   	MOV    EBX,[ECX + #20]
01a   	MOV    [ESP + #16],EBX
01e   	MOV    EDI,[ECX + #16]
021   	MOV    [ESP + #20],EDI
025   	MOV    EBX,[ECX + #8]
028   	MOV    EDI,[ECX + #12]
02b   	MOV    [ESP + #4],EDI
02f   	MOV    [ESP + #0],ECX
032   	CALL_LEAF,runtime  OSR_migration_end
        No JVM State Info
        # 
037   	MOV    ECX,[ESP + #16]
03b   	TEST   ECX,ECX
03d   	Jeq    B35  P=0.001000 C=-1.000000
03d
043   B2: #	B37 B3 <- B1  Freq: 0.999
043   	MOV    EDI,[ECX + #4]
046   	CMPu   EDI,precise klass ch/akuhn/matrix/OneDimensional: 0x009b6558:Constant:exact *
04c   	Jne,u  B37  P=0.100000 C=-1.000000
04c
052   B3: #	B4 <- B2  Freq: 0.8991
052   	#checkcastPP of ECX
052   	MOV    [ESP + #52],ECX
052
056   B4: #	B36 B5 <- B3 B35  Freq: 0.9001
056   	MOV    EDI,[ESP + #20]
05a   	TEST   EDI,EDI
05c   	Jeq    B36  P=0.001000 C=-1.000000
05c
062   B5: #	B37 B6 <- B4  Freq: 0.8992
062   	MOV    ECX,[EDI + #4]
065   	CMPu   ECX,precise klass [D: 0x0095ac00:Constant:exact *
06b   	Jne,u  B37  P=0.100000 C=-1.000000
06b
071   B6: #	B7 <- B5  Freq: 0.80928
071   	#checkcastPP of EDI
071
071   B7: #	B38 B8 <- B6 B36  Freq: 0.81018
071   	MOV    EAX,[ESP + #4]
075   	TEST   EAX,EAX
077   	Jeq    B38  P=0.001000 C=-1.000000
077
07d   B8: #	B37 B9 <- B7  Freq: 0.80937
07d   	MOV    ECX,EAX
07f   	MOV    EAX,[ECX + #4]
082   	CMPu   EAX,precise klass [D: 0x0095ac00:Constant:exact *
088   	Jne,u  B37  P=0.100000 C=-1.000000
088
08e   B9: #	B10 <- B8  Freq: 0.728433
08e   	MOV    EAX,ECX
090   	#checkcastPP of EAX
090   	MOV    [ESP + #36],EAX
094   	LEA    ECX,[EAX + #8]
094
097   B10: #	B11 <- B9 B38  Freq: 0.729243
097   	MOV    [ESP + #24],ESI
09b   	MOV    [ESP + #16],ECX
09b
09f   B11: #	B50 B12 <- B10 B33 	Loop: B11-B33  Freq: 7.0339
09f   	MOV    EAX,[ESP + #36]
0a3   	TEST   EAX,EAX
0a5   	Jeq    B50  P=0.000001 C=-1.000000
0a5
0ab   B12: #	B49 B13 <- B11  Freq: 7.03389
0ab   	MOV    EAX,[ESP + #16]
0af   	MOV    ECX,[EAX]
0b1   	CMPu   EBP,ECX
0b3   	Jge,u  B49  P=0.000001 C=-1.000000
0b3
0b9   B13: #	B48 B14 <- B12  Freq: 7.03389
0b9   	MOV    ECX,[ESP + #52]
0bd   	MOV    ECX,[ECX + #12] ! Field ch/akuhn/matrix/OneDimensional.a
0c0   	NullCheck ECX
0c0
0c0   B14: #	B47 B15 <- B13  Freq: 7.03388
0c0   	MOV    [ESP + #40],ECX
0c4   	MOV    ECX,[ECX + #8]
0c7   	NullCheck ECX
0c7
0c7   B15: #	B45 B16 <- B14  Freq: 7.03387
0c7   	MOV    [ESP + #4],ECX
0cb   	MOV    EAX,[ESP + #36]
0cf   	MOVSD  XMM0a,[EAX + #16 + EBP << #3]
0d5   	CMPu   EBX,ECX
0d7   	Jge,u  B45  P=0.000001 C=-1.000000
0d7
0dd   B16: #	B44 B17 <- B15  Freq: 7.03386
0dd   	MOV    ECX,[EDI + #8]
0e0   	NullCheck EDI
0e0
0e0   B17: #	B42 B18 <- B16  Freq: 7.03386
0e0   	MOV    [ESP + #8],ECX
0e4   	MOV    EAX,[ESP + #40]
0e8   	MOVSD  XMM1a,[EAX + #16 + EBX << #3]
0ee   	MOV    ECX,[ESP + #24]
0f2   	CMPu   ECX,[ESP + #8]
0f6   	Jge,u  B42  P=0.000001 C=-1.000000
0f6
0fc   B18: #	B41 B19 <- B17  Freq: 7.03385
0fc   	MULSD  XMM1a,[EDI + #16 + ECX << #3]
102   	MOV    EAX,[ESP + #52]
106   	MOV    ECX,[EAX + #8] ! Field ch/akuhn/matrix/OneDimensional.lda
109   	MOV    [ESP + #12],ECX
10d   	ADDSD  XMM1a,XMM0a
111   	MOV    ECX,[ESP + #36]
115   	MOVSD  [ECX + #16 + EBP << #3],XMM1a
11b   	MOV    EAX,[ESP + #24]
11f   	INC    EAX
120   	CMP    EAX,[ESP + #12]
124   	Jge    B41  P=0.000976 C=11275.000000
124
12a   B19: #	B20 <- B18  Freq: 7.02699
12a   	MOV    ECX,EBX
12c   	SUB    ECX,[ESP + #24]
130   	MOV    EDX,[ESP + #40]
134   	LEA    ESI,[EDX + ECX << #3]
137   	MOV    [ESP + #20],ECX
13b   	MOV    EDX,[ESP + #24]
13f   	SUB    EDX,EBX
141   	MOV    ECX,[ESP + #24]
145   	ADD    ECX,#2
148   	MAX    ECX,EDX
14e   	XOR    EBX,EBX
150   	MAX    ECX,EBX
156   	MOV    EDX,ECX
156
158   B20: #	B40 B21 <- B19 B22 	Loop: B20-B22 inner stride: not constant pre of N543 Freq: 7187.75
158   	MOV    ECX,[ESP + #36]
15c   	MOVSD  XMM0a,[ECX + #16 + EBP << #3]
162   	MOV    EBX,EAX
164   	ADD    EBX,[ESP + #20]
168   	CMPu   EBX,[ESP + #4]
16c   	Jge,u  B40  P=0.000001 C=-1.000000
16c
172   B21: #	B39 B22 <- B20  Freq: 7187.75
172   	MOVSD  XMM1a,[ESI + #16 + EAX << #3]
178   	CMPu   EAX,[ESP + #8]
17c   	Jge,u  B39  P=0.000001 C=-1.000000
17c
182   B22: #	B20 B23 <- B21  Freq: 7187.74
182   	MULSD  XMM1a,[EDI + #16 + EAX << #3]
188   	ADDSD  XMM1a,XMM0a
18c   	MOVSD  [ECX + #16 + EBP << #3],XMM1a
192   	INC    EAX
193   	CMP    EAX,EDX
195   	Jlt,s  B20  P=0.999024 C=11275.000000
195
197   B23: #	B26 B24 <- B22  Freq: 7.01242
197   	MOV    EDX,[ESP + #4]
19b   	SUB    EDX,[ESP + #20]
19f   	MOV    ECX,[ESP + #12]
1a3   	MIN    EDX,ECX
1a9   	MOV    ECX,[ESP + #8]
1ad   	MIN    EDX,ECX
1b3   	SUB    EDX,EAX
1b5   	AND    EDX,#-8
1b8   	ADD    EDX,EAX
1ba   	CMP    EAX,EDX
1bc   	Jge    B26  P=0.500000 C=-1.000000
      	NOP 	# 14 bytes pad for loops and calls

1d0   B24: #	B24 B25 <- B23 B24 	Loop: B24-B24 inner stride: not constant main of N182 Freq: 3593.87
1d0   	MOVSD  XMM0a,[EDI + #16 + EAX << #3]
1d6   	MULSD  XMM0a,[ESI + #16 + EAX << #3]
1dc   	ADDSD  XMM0a,XMM1a
1e0   	MOV    EBX,[ESP + #36]
1e4   	MOVSD  [EBX + #16 + EBP << #3],XMM0a
1ea   	MOVSD  XMM1a,[ESI + #24 + EAX << #3]
1f0   	MULSD  XMM1a,[EDI + #24 + EAX << #3]
1f6   	ADDSD  XMM1a,XMM0a
1fa   	MOV    ECX,[ESP + #36]
1fe   	MOVSD  [ECX + #16 + EBP << #3],XMM1a
204   	MOVSD  XMM0a,[EDI + #32 + EAX << #3]
20a   	MULSD  XMM0a,[ESI + #32 + EAX << #3]
210   	ADDSD  XMM0a,XMM1a
214   	MOVSD  [ECX + #16 + EBP << #3],XMM0a
21a   	MOVSD  XMM1a,[ESI + #40 + EAX << #3]
220   	MULSD  XMM1a,[EDI + #40 + EAX << #3]
226   	ADDSD  XMM1a,XMM0a
22a   	MOVSD  [ECX + #16 + EBP << #3],XMM1a
230   	MOVSD  XMM0a,[EDI + #48 + EAX << #3]
236   	MULSD  XMM0a,[ESI + #48 + EAX << #3]
23c   	ADDSD  XMM0a,XMM1a
240   	MOVSD  [ECX + #16 + EBP << #3],XMM0a
246   	MOVSD  XMM1a,[ESI + #56 + EAX << #3]
24c   	MULSD  XMM1a,[EDI + #56 + EAX << #3]
252   	ADDSD  XMM1a,XMM0a
256   	MOVSD  [ECX + #16 + EBP << #3],XMM1a
25c   	MOVSD  XMM0a,[EDI + #64 + EAX << #3]
262   	MULSD  XMM0a,[ESI + #64 + EAX << #3]
268   	ADDSD  XMM0a,XMM1a
26c   	MOVSD  [ECX + #16 + EBP << #3],XMM0a
272   	MOVSD  XMM1a,[EDI + #72 + EAX << #3]
278   	MULSD  XMM1a,[ESI + #72 + EAX << #3]
27e   	ADDSD  XMM1a,XMM0a
282   	MOVSD  [ECX + #16 + EBP << #3],XMM1a
288   	ADD    EAX,#8
28b   	CMP    EAX,EDX
28d   	Jlt    B24	# Loop end  P=0.999024 C=11275.000000
28d
293   B25: #	B26 <- B24  Freq: 3.50621
293   	MOV    EBX,[ESP + #20]
297   	ADD    EBX,EAX
299   	DEC    EBX
29a
29a   B26: #	B30 B27 <- B23 B25  Freq: 7.01242
29a   	CMP    EAX,[ESP + #12]
29e   	Jge,s  B30  P=0.500000 C=-1.000000
29e
2a0   B27: #	B40 B28 <- B26 B29 	Loop: B27-B29 inner stride: not constant post of N543 Freq: 3586.43
2a0   	MOV    EBX,[ESP + #36]
2a4   	MOVSD  XMM0a,[EBX + #16 + EBP << #3]
2aa   	MOV    EBX,EAX
2ac   	ADD    EBX,[ESP + #20]
2b0   	CMPu   EBX,[ESP + #4]
2b4   	Jge,u  B40  P=0.000001 C=-1.000000
2b4
2ba   B28: #	B39 B29 <- B27  Freq: 3586.42
2ba   	MOVSD  XMM1a,[ESI + #16 + EAX << #3]
2c0   	CMPu   EAX,[ESP + #8]
2c4   	Jge,u  B39  P=0.000001 C=-1.000000
2c4
2ca   B29: #	B27 B30 <- B28  Freq: 3586.42
2ca   	MULSD  XMM1a,[EDI + #16 + EAX << #3]
2d0   	ADDSD  XMM1a,XMM0a
2d4   	MOV    EDX,[ESP + #36]
2d8   	MOVSD  [EDX + #16 + EBP << #3],XMM1a
2de   	INC    EAX
2df   	CMP    EAX,[ESP + #12]
2e3   	Jlt,s  B27  P=0.999024 C=11275.000000
2e3
2e5   B30: #	B31 <- B29 B26  Freq: 7.00515
2e5   	INC    EBX
2e6
2e6   B31: #	B34 B32 <- B41 B30  Freq: 7.01202
2e6   	INC    EBP
2e7   	CMP    EBP,[ESP + #12]
2eb   	Jge,s  B34  P=0.100000 C=-1.000000
2eb
2ed   B32: #	B34 B33 <- B31  Freq: 6.31081
2ed   	MOV    EAX,[ESP + #12]
2f1   	TEST   EAX,EAX
2f3   	Jle,s  B34  P=0.000976 C=11.000000
2f3
2f5   B33: #	B11 <- B32  Freq: 6.30466
2f5   	XOR    ECX,ECX
2f7   	MOV    [ESP + #24],ECX
2fb   	JMP    B11
2fb
300   B34: #	N630 <- B31 B32  Freq: 0.707359
300   	MOV    EAX,[ESP + #36]
304   	ADD    ESP,72	# Destroy frame
	POPL   EBP
	TEST   PollPage,EAX	! Poll Safepoint
	
30e   	RET
30e
30f   B35: #	B4 <- B1  Freq: 0.000999987
30f   	MOV    EDI,NULL
314   	MOV    [ESP + #52],EDI
318   	JMP    B4
318
31d   B36: #	B7 <- B4  Freq: 0.000900088
31d   	MOV    EDI,NULL
322   	JMP    B7
322
327   B37: #	N630 <- B2 B5 B8  Freq: 1e-006
327   	MOV    ECX,#-75
32c   	MOV    [ESP + #8],EBX
330   	MOV    [ESP + #12],ESI
334   	NOP 	# 3 bytes pad for loops and calls
337   	CALL,static  wrapper for: uncommon_trap(reason='unreached' action='reinterpret')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:22  L[0]=esp + #16 L[1]=esp + #20 L[2]=esp + #4 L[3]=esp + #8 L[4]=EBP L[5]=esp + #12
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

33c   	INT3   ; ShouldNotReachHere
33c
33d   B38: #	B10 <- B7  Freq: 0.00081017
33d   	MOV    ECX,NULL
342   	MOV    [ESP + #36],ECX
346   	MOV    ECX,NULL+8
34b   	JMP    B10
34b
350   B39: #	B43 <- B28 B21  Freq: 1e-006
350   	MOVSD  [ESP + #16],XMM1a
356   	MOVSD  [ESP + #8],XMM0a
35c   	JMP,s  B43
35c
35e   B40: #	B46 <- B27 B20  Freq: 1e-006
35e   	MOVSD  [ESP + #8],XMM0a
364   	JMP,s  B46
364
366   B41: #	B31 <- B18  Freq: 0.00686229
366   	INC    EBX
367   	JMP    B31
367
36c   B42: #	B43 <- B17  Freq: 1e-006
36c   	MOVSD  [ESP + #16],XMM1a
372   	MOVSD  [ESP + #8],XMM0a
378   	MOV    EAX,[ESP + #24]
378
37c   B43: #	N630 <- B42 B39  Freq: 1e-006
37c   	MOV    ECX,#-28
381   	MOV    [ESP + #4],EDI
385   	MOV    [ESP + #28],EBX
389   	MOV    [ESP + #32],EAX
38d   	NOP 	# 2 bytes pad for loops and calls
38f   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:36  L[0]=esp + #52 L[1]=esp + #4 L[2]=esp + #36 L[3]=esp + #28 L[4]=EBP L[5]=esp + #32 STK[0]=esp + #36 STK[1]=EBP STK[2]=esp + #8 STK[3]=_ STK[4]=esp + #16 STK[5]=_ STK[6]=esp + #4 STK[7]=esp + #32
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

394   	INT3   ; ShouldNotReachHere
394
395   B44: #	N630 <- B16  Freq: 1e-006
395   	MOV    ECX,#-10
39a   	MOV    EBP,EDI
39c   	NOP 	# 3 bytes pad for loops and calls
39f   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=_ STK[5]=_ STK[6]=EBP STK[7]=esp + #24
        # AllocatedObj(0x0409e9f4)

3a4   	INT3   ; ShouldNotReachHere
3a4
3a5   B45: #	B46 <- B15  Freq: 1e-006
3a5   	MOVSD  [ESP + #8],XMM0a
3ab   	MOV    EAX,[ESP + #24]
3ab
3af   B46: #	N630 <- B45 B40  Freq: 1e-006
3af   	MOV    ECX,#-28
3b4   	MOV    [ESP + #4],EDI
3b8   	MOV    EDI,[ESP + #36]
3bc   	MOV    [ESP + #16],EDI
3c0   	MOV    [ESP + #20],EBX
3c4   	MOV    [ESP + #24],EAX
3c8   	NOP 	# 3 bytes pad for loops and calls
3cb   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:32  L[0]=esp + #52 L[1]=esp + #4 L[2]=esp + #16 L[3]=esp + #20 L[4]=EBP L[5]=esp + #24 STK[0]=esp + #16 STK[1]=EBP STK[2]=esp + #8 STK[3]=_ STK[4]=esp + #40 STK[5]=esp + #20
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

3d0   	INT3   ; ShouldNotReachHere
3d0
3d1   B47: #	N630 <- B14  Freq: 1e-006
3d1   	MOV    ECX,#-10
3d6   	MOV    EBP,EBX
3d8   	NOP 	# 3 bytes pad for loops and calls
3db   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=esp + #40 STK[5]=EBP
        # AllocatedObj(0x0409e9f4)

3e0   	INT3   ; ShouldNotReachHere
3e0
3e1   B48: #	N630 <- B13  Freq: 1e-006
3e1   	MOV    ECX,#-10
3e6   	NOP 	# 1 bytes pad for loops and calls
3e7   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:28  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=esp + #52
        # AllocatedObj(0x0409e9f4)

3ec   	INT3   ; ShouldNotReachHere
3ec
3ed   B49: #	N630 <- B12  Freq: 1e-006
3ed   	MOV    ECX,#-28
3f2   	MOV    [ESP + #4],EDI
3f6   	MOV    [ESP + #12],EBX
3fa   	PUSH   [ESP + #24]
	POP    [ESP + #16]
402   	NOP 	# 1 bytes pad for loops and calls
403   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:26  L[0]=esp + #52 L[1]=esp + #4 L[2]=esp + #36 L[3]=esp + #12 L[4]=EBP L[5]=esp + #16 STK[0]=esp + #36 STK[1]=EBP STK[2]=esp + #36 STK[3]=EBP
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

408   	INT3   ; ShouldNotReachHere
408
409   B50: #	N630 <- B11  Freq: 1e-006
409   	MOV    ECX,#-10
40e   	NOP 	# 1 bytes pad for loops and calls
40f   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:26  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=esp + #36 STK[3]=EBP
        # AllocatedObj(0x0409e9f4)

414   	INT3   ; ShouldNotReachHere
414

{method} 
 - klass: {other class}
 - method holder:     'ch/akuhn/matrix/OneDimensional'
 - constants:         0x084e7fd4{constant pool}
 - access:            0xc1000001  public 
 - name:              'mult'
 - signature:         '([D)[D'
 - max stack:         8
 - max locals:        6
 - size of params:    2
 - method size:       20
 - vtable index:      7
 - code size:         69
 - code start:        0x291f0aa8
 - code end (excl):   0x291f0aed
 - method data:       0x29237190
 - checked ex length: 0
 - linenumber start:  0x291f0aed
 - localvar length:   6
 - localvar start:    0x291f0afe
#
#  double[int:>=0]:exact* ( ch/akuhn/matrix/OneDimensional:NotNull *, double[int:>=0]:exact* )
#
#r000 ecx   : parm 0: ch/akuhn/matrix/OneDimensional:NotNull *
#r005 edx   : parm 1: double[int:>=0]:exact*
# -- Old esp -- Framesize: 80 --
#r045 esp+76: return address
#r044 esp+72: pad2, in_preserve
#r043 esp+68: pad2, in_preserve
#r042 esp+64: Fixed slot 0
#r061 esp+60: spill
#r060 esp+56: spill
#r059 esp+52: spill
#r058 esp+48: spill
#r057 esp+44: spill
#r056 esp+40: spill
#r055 esp+36: spill
#r054 esp+32: spill
#r053 esp+28: spill
#r052 esp+24: spill
#r051 esp+20: spill
#r050 esp+16: spill
#r049 esp+12: spill
#r048 esp+ 8: spill
#r047 esp+ 4: spill
#r046 esp+ 0: spill
#
000   N574: #	B1 <- BLOCK HEAD IS JUNK   Freq: 3
000   	CMP    EAX,[ECX+4]	# Inline cache check
	JNE    SharedRuntime::handle_ic_miss_stub
	NOP
	NOP
	NOP

000
00c   B1: #	B37 B2 <- BLOCK HEAD IS JUNK   Freq: 3
00c   	# stack bang
	PUSHL  EBP
	SUB    ESP,72	# Create frame
01a   	MOV    [ESP + #40],EDX
01e   	MOV    EBP,ECX
020   	MOV    ESI,[ECX + #12] ! Field ch/akuhn/matrix/OneDimensional.a
023   	MOV    EBX,[ESI + #8]
026   	NullCheck ESI
026
026   B2: #	B26 B3 <- B1  Freq: 3
026   	CMPu   EBX,#131072
02c   	Jgt,u  B26  P=0.000001 C=-1.000000
02c
032   B3: #	B26 B4 <- B2  Freq: 2.99999
032   	MOV    ECX,FS:[0x00] 
039   	MOV    EDI,[ECX + TLS::thread_ptr_offset()]
03f   	MOV    EDX,[EDI + #68]
042   	LEA    ECX,[EDX + #16 + EBX << #3]
046   	CMPu   ECX,[EDI + #76]
049   	Jge,u  B26  P=0.000100 C=-1.000000
049
04f   B4: #	B5 <- B3  Freq: 2.99969
04f   	MOV    [EDI + #68],ECX
052   	PREFETCHNTA [ECX + #256]	! Prefetch into non-temporal cache for write
059   	MOV    [EDX],0x00000001
05f   	PREFETCHNTA [ECX + #288]	! Prefetch into non-temporal cache for write
066   	MOV    [EDX + #4],precise klass [D: 0x0095ac00:Constant:exact *
06d   	MOV    [EDX + #8],EBX
070   	PREFETCHNTA [ECX + #320]	! Prefetch into non-temporal cache for write
077   	LEA    EDI,[EDX + #16]
07a   	MOV    ECX,EBX
07c   	ADD    ECX,#2
07f   	AND    ECX,#536870911
085   	ADD    ECX,#-2
088   	SHL    ECX,1	# Convert doublewords to words
	XOR    EAX,EAX
	REP STOS	# store EAX into [EDI++] while ECX--
08e
08e   B5: #	B25 B6 <- B27 B4  Freq: 3
08e   	
08e   	#checkcastPP of EDX
08e   	MOV    ECX,[EBP + #8] ! Field ch/akuhn/matrix/OneDimensional.lda
091   	TEST   ECX,ECX
093   	Jle    B25  P=0.001002 C=1.000000
093
099   B6: #	B7 <- B5  Freq: 2.99699
099   	MOV    [ESP + #4],ECX
09d   	MOV    [ESP + #32],EDX
0a1   	MOV    [ESP + #0],EBX
0a4   	MOV    [ESP + #48],EBP
0a8   	MOV    EBP,ESI
0aa   	MOV    [ESP + #36],ESI
0ae   	MOV    ESI,EDX
0b0   	MOV    ECX,#1
0b5   	XOR    EBX,EBX
0b7   	MOV    [ESP + #8],EBX
0bb   	XOR    EDI,EDI
0bd   	MOV    [ESP + #12],EBX
0bd
0c1   B7: #	B8 <- B6 B23 	Loop: B7-B23 stride: not constant  Freq: 495.549
0c1   	XOR    EAX,EAX
      	NOP 	# 1 bytes pad for loops and calls

0c4   B8: #	B35 B9 <- B7 B12 	Loop: B8-B12 inner stride: not constant pre of N364 Freq: 494231
0c4   	MOV    EBX,EAX
0c6   	ADD    EBX,[ESP + #8]
0ca   	CMPu   EDI,[ESP + #0]
0cd   	Jge,u  B35  P=0.000001 C=-1.000000
0cd
0d3   B9: #	B33 B10 <- B8  Freq: 494231
0d3   	MOVSD  XMM0a,[ESI + #16]
0d8   	CMPu   EBX,[ESP + #0]
0db   	Jge,u  B33  P=0.000001 C=-1.000000
0db
0e1   B10: #	B32 B11 <- B9  Freq: 494230
0e1   	MOV    EDX,[ESP + #40]
0e5   	MOV    EDX,[EDX + #8]
0e8   	NullCheck EDX
0e8
0e8   B11: #	B30 B12 <- B10  Freq: 494230
0e8   	MOV    [ESP + #16],EDX
0ec   	MOVSD  XMM1a,[EBP + #16 + EAX << #3]
0f2   	CMPu   EAX,EDX
0f4   	Jge,u  B30  P=0.000001 C=-1.000000
0f4
0fa   B12: #	B8 B13 <- B11  Freq: 494229
0fa   	MOV    EDX,[ESP + #40]
0fe   	MULSD  XMM1a,[EDX + #16 + EAX << #3]
104   	ADDSD  XMM1a,XMM0a
108   	MOVSD  [ESI + #16],XMM1a
10d   	INC    EAX
10e   	CMP    EAX,ECX
110   	Jlt,s  B8  P=0.999001 C=998373.000000
110
112   B13: #	B15 B14 <- B12  Freq: 493.545
112   	MOV    ECX,[ESP + #36]
116   	MOV    EBP,[ESP + #12]
11a   	ADD    ECX,EBP
11c   	MOV    EBP,[ESP + #4]
120   	MOV    EDX,[ESP + #16]
124   	MIN    EBP,EDX
12a   	MOV    EDX,[ESP + #0]
12d   	SUB    EDX,[ESP + #8]
131   	SUB    EBP,EAX
133   	DEC    EDX
134   	AND    EBP,#-2
137   	ADD    EBP,EAX
139   	MIN    EDX,EBP
13f   	SUB    EDX,EAX
141   	MOV    EBP,EDX
143   	INC    EBP
144   	SHR    EBP,#31
147   	ADD    EBP,EDX
149   	INC    EBP
14a   	AND    EBP,#-8
14d   	ADD    EBP,EAX
14f   	CMP    EAX,EBP
151   	Jlt,s  B15  P=0.500000 C=-1.000000
151
153   B14: #	B18 <- B13  Freq: 246.773
153   	MOV    EDX,EDI
155   	JMP    B18
155
15a   B15: #	B16 <- B13  Freq: 246.773
15a   	MOV    EDX,EDI
      	NOP 	# 4 bytes pad for loops and calls

160   B16: #	B16 B17 <- B15 B16 	Loop: B16-B16 inner stride: not constant main of N128 Freq: 247115
160   	MOV    EBX,[ESP + #40]
164   	MOVSD  XMM0a,[EBX + #16 + EAX << #3]
16a   	MULSD  XMM0a,[ECX + #16 + EAX << #3]
170   	ADDSD  XMM0a,XMM1a
174   	MOVSD  [ESI + #16],XMM0a
179   	MOVSD  XMM1a,[EBX + #24 + EAX << #3]
17f   	MULSD  XMM1a,[ECX + #24 + EAX << #3]
185   	ADDSD  XMM1a,XMM0a
189   	MOVSD  [ESI + #16],XMM1a
18e   	MOVSD  XMM0a,[EBX + #32 + EAX << #3]
194   	MULSD  XMM0a,[ECX + #32 + EAX << #3]
19a   	ADDSD  XMM0a,XMM1a
19e   	MOVSD  [ESI + #16],XMM0a
1a3   	MOVSD  XMM1a,[ECX + #40 + EAX << #3]
1a9   	MULSD  XMM1a,[EBX + #40 + EAX << #3]
1af   	ADDSD  XMM1a,XMM0a
1b3   	MOVSD  [ESI + #16],XMM1a
1b8   	MOVSD  XMM0a,[EBX + #48 + EAX << #3]
1be   	MULSD  XMM0a,[ECX + #48 + EAX << #3]
1c4   	ADDSD  XMM0a,XMM1a
1c8   	MOVSD  [ESI + #16],XMM0a
1cd   	MOVSD  XMM1a,[EBX + #56 + EAX << #3]
1d3   	MULSD  XMM1a,[ECX + #56 + EAX << #3]
1d9   	ADDSD  XMM1a,XMM0a
1dd   	MOVSD  [ESI + #16],XMM1a
1e2   	MOVSD  XMM0a,[EBX + #64 + EAX << #3]
1e8   	MULSD  XMM0a,[ECX + #64 + EAX << #3]
1ee   	ADDSD  XMM0a,XMM1a
1f2   	MOVSD  [ESI + #16],XMM0a
1f7   	MOVSD  XMM1a,[EBX + #72 + EAX << #3]
1fd   	MULSD  XMM1a,[ECX + #72 + EAX << #3]
203   	ADDSD  XMM1a,XMM0a
207   	MOVSD  [ESI + #16],XMM1a
20c   	ADD    EAX,#8
20f   	CMP    EAX,EBP
211   	Jlt    B16	# Loop end  P=0.999001 C=998373.000000
211
217   B17: #	B18 <- B16  Freq: 246.773
217   	MOV    EBX,[ESP + #8]
21b   	ADD    EBX,EAX
21d   	DEC    EBX
21e
21e   B18: #	B22 B19 <- B14 B17  Freq: 493.545
21e   	CMP    EAX,[ESP + #4]
222   	Jge,s  B22  P=0.500000 C=-1.000000
222
224   B19: #	B29 B20 <- B18 B21 	Loop: B19-B21 inner stride: not constant post of N364 Freq: 246615
224   	MOVSD  XMM0a,[ESI + #16]
229   	MOV    EBX,EAX
22b   	ADD    EBX,[ESP + #8]
22f   	CMPu   EBX,[ESP + #0]
232   	Jge,u  B29  P=0.000001 C=-1.000000
232
238   B20: #	B28 B21 <- B19  Freq: 246614
238   	MOVSD  XMM1a,[ECX + #16 + EAX << #3]
23e   	CMPu   EAX,[ESP + #16]
242   	Jge,u  B28  P=0.000001 C=-1.000000
242
248   B21: #	B19 B22 <- B20  Freq: 246614
248   	MOV    EBP,[ESP + #40]
24c   	MULSD  XMM1a,[EBP + #16 + EAX << #3]
252   	ADDSD  XMM1a,XMM0a
256   	MOVSD  [ESI + #16],XMM1a
25b   	INC    EAX
25c   	CMP    EAX,[ESP + #4]
260   	Jlt,s  B19  P=0.999001 C=998373.000000
260
262   B22: #	B24 B23 <- B21 B18  Freq: 493.046
262   	MOV    EDI,EDX
264   	INC    EDI
265   	CMP    EDI,[ESP + #4]
269   	Jge,s  B24  P=0.001002 C=998.000000
269
26b   B23: #	B7 <- B22  Freq: 492.552
26b   	MOV    EBP,[ESP + #32]
26f   	LEA    ESI,[EBP + #8 + EDX << #3]
273   	MOV    ECX,#-1
278   	SUB    ECX,EBX
27a   	MOV    EAX,#-2
27f   	SUB    EAX,EBX
281   	MAX    ECX,EAX
287   	MOV    EBP,#1
28c   	MAX    ECX,EBP
292   	MOV    EBP,EBX
294   	SHL    EBP,#3
297   	MOV    EDX,EBP
299   	MOV    EBP,[ESP + #36]
29d   	MOV    EAX,EDX
29f   	LEA    EBP,[EBP + #8 + EAX]
2a3   	INC    EBX
2a4   	MOV    [ESP + #8],EBX
2a8   	MOV    EBX,EAX
2aa   	ADD    EBX,#8
2ad   	MOV    [ESP + #12],EBX
2b1   	JMP    B7
2b1
2b6   B24: #	B25 <- B22  Freq: 0.494038
2b6   	MOV    EDX,[ESP + #32]
2b6
2ba   B25: #	N574 <- B24 B5  Freq: 0.497045
2ba   	MOV    EAX,EDX
2bc   	ADD    ESP,72	# Destroy frame
	POPL   EBP
	TEST   PollPage,EAX	! Poll Safepoint
	
2c6   	RET
2c6
2c7   B26: #	B36 B27 <- B2 B3  Freq: 0.000303089
2c7   	MOV    [ESP + #4],ESI
2cb   	MOV    [ESP + #0],EBX
2ce   	MOV    ECX,precise klass [D: 0x0095ac00:Constant:exact *
2d3   	MOV    EDX,EBX
2d5   	NOP 	# 2 bytes pad for loops and calls
2d7   	CALL,static  wrapper for: _new_array_Java
        # ch.akuhn.matrix.OneDimensional::mult @ bci:5  L[0]=EBP L[1]=esp + #40 L[2]=_ L[3]=_ L[4]=_ L[5]=_
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

2dc
2dc   B27: #	B5 <- B26  Freq: 0.000303083
        # Block is sole successor of call
2dc   	MOV    EBX,[ESP + #0]
2df   	MOV    EDX,EAX
2e1   	MOV    ESI,[ESP + #4]
2e5   	JMP    B5
2e5
2ea   B28: #	B31 <- B20  Freq: 1e-006
2ea   	MOVSD  [ESP + #8],XMM1a
2f0   	MOVSD  [ESP + #0],XMM0a
2f5   	MOV    EDI,EDX
2f7   	JMP,s  B31
2f7
2f9   B29: #	B34 <- B19  Freq: 1e-006
2f9   	MOVSD  [ESP + #0],XMM0a
2fe   	MOV    EDI,EDX
300   	JMP,s  B34
300
302   B30: #	B31 <- B11  Freq: 1e-006
302   	MOVSD  [ESP + #8],XMM1a
308   	MOVSD  [ESP + #0],XMM0a
308
30d   B31: #	N574 <- B28 B30  Freq: 1e-006
30d   	MOV    ECX,#-28
312   	MOV    EBP,[ESP + #40]
316   	MOV    ESI,[ESP + #32]
31a   	MOV    [ESP + #16],ESI
31e   	MOV    [ESP + #20],EBX
322   	MOV    [ESP + #24],EDI
326   	MOV    [ESP + #28],EAX
32a   	NOP 	# 1 bytes pad for loops and calls
32b   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:36  L[0]=esp + #48 L[1]=EBP L[2]=esp + #16 L[3]=esp + #20 L[4]=esp + #24 L[5]=esp + #28 STK[0]=esp + #16 STK[1]=esp + #24 STK[2]=esp + #0 STK[3]=_ STK[4]=esp + #8 STK[5]=_ STK[6]=EBP STK[7]=esp + #28
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

330   	INT3   ; ShouldNotReachHere
330
331   B32: #	N574 <- B10  Freq: 1e-006
331   	MOV    ECX,#-10
336   	MOV    EBP,[ESP + #40]
33a   	MOV    [ESP + #0],EAX
33d   	NOP 	# 2 bytes pad for loops and calls
33f   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=_ STK[3]=_ STK[4]=_ STK[5]=_ STK[6]=EBP STK[7]=esp + #0
        # AllocatedObj(0x0409e9f4)

344   	INT3   ; ShouldNotReachHere
344
345   B33: #	B34 <- B9  Freq: 1e-006
345   	MOVSD  [ESP + #0],XMM0a
345
34a   B34: #	N574 <- B29 B33  Freq: 1e-006
34a   	MOV    ECX,#-28
34f   	MOV    EBP,[ESP + #40]
353   	MOV    ESI,[ESP + #32]
357   	MOV    [ESP + #8],ESI
35b   	MOV    [ESP + #12],EBX
35f   	MOV    [ESP + #16],EDI
363   	MOV    [ESP + #20],EAX
367   	MOV    EDI,[ESP + #36]
36b   	MOV    [ESP + #32],EDI
36f   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:32  L[0]=esp + #48 L[1]=EBP L[2]=esp + #8 L[3]=esp + #12 L[4]=esp + #16 L[5]=esp + #20 STK[0]=esp + #8 STK[1]=esp + #16 STK[2]=esp + #0 STK[3]=_ STK[4]=esp + #32 STK[5]=esp + #12
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

374   	INT3   ; ShouldNotReachHere
374
375   B35: #	N574 <- B8  Freq: 1e-006
375   	MOV    ECX,#-28
37a   	MOV    EBP,[ESP + #40]
37e   	MOV    ESI,[ESP + #32]
382   	MOV    [ESP + #0],ESI
385   	MOV    [ESP + #4],EBX
389   	MOV    [ESP + #8],EDI
38d   	MOV    [ESP + #12],EAX
391   	NOP 	# 2 bytes pad for loops and calls
393   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:26  L[0]=esp + #48 L[1]=EBP L[2]=esp + #0 L[3]=esp + #4 L[4]=esp + #8 L[5]=esp + #12 STK[0]=esp + #0 STK[1]=esp + #8 STK[2]=esp + #0 STK[3]=esp + #8
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

398   	INT3   ; ShouldNotReachHere
398
399   B36: #	N574 <- B26  Freq: 3.03089e-009
399   	# exception oop is in EAX; no code emitted
399   	MOV    ECX,EAX
39b   	ADD    ESP,72	# Destroy frame
	POPL   EBP
	
39f   	JMP    rethrow_stub
39f
3a4   B37: #	N574 <- B1  Freq: 1e-006
3a4   	MOV    ECX,#-10
3a9   	MOV    EBP,ESI
3ab   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::mult @ bci:4  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=EBP
        # AllocatedObj(0x0409e9f4)

3b0   	INT3   ; ShouldNotReachHere
3b0

	(0) 4.047794887
[D@12558d6

{method} 
VM option '+PrintOptoAssembly'
 - klass: {other class}
 - method holder:     'java/lang/Math'
 - constants:         0x084e7fd4{constant pool}
 - access:            0x81000009  public static 
 - name:              'max'
 - signature:         '(II)I'
 - max stack:         2
 - max locals:        2
 - size of params:    2
 - method size:       20
 - vtable index:      -2
 - code size:         11
 - code start:        0x290ead30
 - code end (excl):   0x290ead3b
 - method data:       0x2920a210
 - checked ex length: 0
 - linenumber start:  0x290ead3b
 - localvar length:   2
 - localvar start:    0x290ead46
#
#  int ( int, int )
#
#r000 ecx   : parm 0: int
#r005 edx   : parm 1: int
# -- Old esp -- Framesize: 16 --
#r045 esp+12: return address
#r044 esp+ 8: pad2, in_preserve
#r043 esp+ 4: pad2, in_preserve
#r042 esp+ 0: Fixed slot 0
#
abababab   N1: #	B1 <- B1  Freq: 10000
abababab
000   B1: #	N1 <- BLOCK HEAD IS JUNK   Freq: 10000
000   	PUSHL  EBP
	SUB    ESP,8	# Create frame
007   	CMP    ECX,EDX
009   	MOV    EAX,ECX
00b   	CMOVlt EAX,EDX
00e   	ADD    ESP,8	# Destroy frame
	POPL   EBP
	TEST   PollPage,EAX	! Poll Safepoint
	
018   	RET
018

	(0)
	(0) 0.005730895000000001
{method} 
 - klass: {other class}
 - method holder:     'ch/akuhn/matrix/OneDimensional'
 - constants:         0x084e7fd4{constant pool}
 - access:            0x81000001  public 
 - name:              'get'
 - signature:         '(II)D'
 - max stack:         4
 - max locals:        3
 - size of params:    3
 - method size:       20
 - vtable index:      5
 - code size:         14
 - code start:        0x291f0ab0
 - code end (excl):   0x291f0abe
 - method data:       0x292372c0
 - checked ex length: 0
 - linenumber start:  0x291f0abe
 - localvar length:   3
 - localvar start:    0x291f0ac2
#
#  double/half ( ch/akuhn/matrix/OneDimensional:NotNull *, int, int )
#
#r000 ecx   : parm 0: ch/akuhn/matrix/OneDimensional:NotNull *
#r005 edx   : parm 1: int
#r047 esp+20: pad0, owned by CALLER
#r046 esp+16: parm 2: int
# -- Old esp -- Framesize: 16 --
#r045 esp+12: return address
#r044 esp+ 8: pad2, in_preserve
#r043 esp+ 4: pad2, in_preserve
#r042 esp+ 0: Fixed slot 0
#
000   N52: #	B1 <- BLOCK HEAD IS JUNK   Freq: 10000
000   	CMP    EAX,[ECX+4]	# Inline cache check
	JNE    SharedRuntime::handle_ic_miss_stub
	NOP
	NOP
	NOP

000
00c   B1: #	B5 B2 <- BLOCK HEAD IS JUNK   Freq: 10000
00c   	# stack bang
	PUSHL  EBP
	SUB    ESP,8	# Create frame
01a   	MOV    EBX,[ESP + #16]
01e   	IMUL   EBX,[ECX + #8]
022   	MOV    EBP,[ECX + #12] ! Field ch/akuhn/matrix/OneDimensional.a
025   	ADD    EDX,EBX
027   	MOV    ECX,[EBP + #8]
02a   	NullCheck EBP
02a
02a   B2: #	B4 B3 <- B1  Freq: 9999.99
02a   	CMPu   EDX,ECX
02c   	Jge,us B4  P=0.000001 C=-1.000000
02c
02e   B3: #	N52 <- B2  Freq: 9999.98
02e   	MOVSD  XMM0a,[EBP + #16 + EDX << #3]
034   	ADD    ESP,8	# Destroy frame
	POPL   EBP
	TEST   PollPage,EAX	! Poll Safepoint
	
03e   	RET
03e
03f   B4: #	N52 <- B2  Freq: 1e-006
03f   	MOV    ECX,#-28
044   	MOV    [ESP + #16],EDX
048   	NOP 	# 3 bytes pad for loops and calls
04b   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::get @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=EBP STK[1]=esp + #16
        # AllocatedObj(0x0409e9f4)

050   	INT3   ; ShouldNotReachHere
050
051   B5: #	N52 <- B1  Freq: 1e-006
051   	MOV    ECX,#-10
056   	MOV    [ESP + #16],EDX
05a   	NOP 	# 1 bytes pad for loops and calls
05b   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::get @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=EBP STK[1]=esp + #16
        # AllocatedObj(0x0409e9f4)

060   	INT3   ; ShouldNotReachHere
060

{method} 
 - klass: {other class}
 - method holder:     'ch/akuhn/matrix/PerformanceTest'
 - constants:         0x084e7fd4{constant pool}
 - access:            0xc1000002  private 
 - name:              'opto'
 - signature:         '()D'
 - max stack:         5
 - max locals:        5
 - size of params:    1
 - method size:       20
 - vtable index:      6
 - code size:         49
 - code start:        0x291f01b8
 - code end (excl):   0x291f01e9
 - method data:       0x29237220
 - checked ex length: 0
 - linenumber start:  0x291f01e9
 - localvar length:   4
 - localvar start:    0x291f01fe
#
#  double/half ( rawptr:BotPTR )
#
#r000 ecx   : parm 0: rawptr:BotPTR
# -- Old esp -- Framesize: 80 --
#r045 esp+76: return address
#r044 esp+72: pad2, in_preserve
#r043 esp+68: pad2, in_preserve
#r042 esp+64: Fixed slot 0
#r061 esp+60: spill
#r060 esp+56: spill
#r059 esp+52: spill
#r058 esp+48: spill
#r057 esp+44: spill
#r056 esp+40: spill
#r055 esp+36: spill
#r054 esp+32: spill
#r053 esp+28: spill
#r052 esp+24: spill
#r051 esp+20: spill
#r050 esp+16: spill
#r049 esp+12: spill
#r048 esp+ 8: spill
#r047 esp+ 4: spill
#r046 esp+ 0: outgoing argument
#
000   N403: #	B1 <- BLOCK HEAD IS JUNK   Freq: 1
000   	INT3
      	NOP 	# 3 bytes pad for loops and calls

004   B1: #	B24 B2 <- BLOCK HEAD IS JUNK   Freq: 1
004   	# stack bang
	PUSHL  EBP
	SUB    ESP,72	# Create frame
012   	MOV    EBX,[ECX]
014   	MOV    EBP,[ECX + #16]
017   	MOVSD  XMM0a,[ECX + #8]
01c   	MOVSD  [ESP + #8],XMM0a
022   	MOV    ESI,[ECX + #4]
025   	MOV    [ESP + #0],ECX
028   	CALL_LEAF,runtime  OSR_migration_end
        No JVM State Info
        # 
02d   	TEST   EBP,EBP
02f   	Jeq    B24  P=0.001000 C=-1.000000
02f
035   B2: #	B23 B3 <- B1  Freq: 0.999
035   	MOV    ECX,[EBP + #4]
038   	CMPu   ECX,precise klass ch/akuhn/matrix/PerformanceTest: 0x009b6500:Constant:exact *
03e   	Jne,u  B23  P=0.100000 C=-1.000000
03e
044   B3: #	B4 <- B2  Freq: 0.8991
044   	#checkcastPP of EBP
044   	LEA    EAX,[EBP + #8]
044
047   B4: #	B5 <- B3 B24 B21 	Loop: B4-B21 stride: not constant  Freq: 8.48818
047   	MOV    EDI,EBX
049   	INC    EDI
04a   	MOV    EDX,ESI
04c   	SHL    EDX,#3
      	NOP 	# 1 bytes pad for loops and calls

050   B5: #	B32 B6 <- B4 B10 	Loop: B5-B10 inner stride: not constant pre of N237 Freq: 8664.43
050   	TEST   EBP,EBP
052   	Jeq    B32  P=0.000001 C=-1.000000
052
058   B6: #	B31 B7 <- B5  Freq: 8664.42
058   	MOV    [ESP + #20],EAX
05c   	MOV    [ESP + #16],ESI
060   	MOV    [ESP + #4],EBP
064   	MOV    EBP,[EAX] ! Field ch/akuhn/matrix/PerformanceTest.a
066   	MOV    ECX,[EBP + #12] ! Field ch/akuhn/matrix/OneDimensional.a
069   	NullCheck EBP
069
069   B7: #	B30 B8 <- B6  Freq: 8664.41
069   	MOV    [ESP + #24],ECX
06d   	MOV    ECX,[EBP + #8] ! Field ch/akuhn/matrix/OneDimensional.lda
070   	MOV    EBP,EBX
072   	IMUL   EBP,ECX
075   	MOV    EAX,EBP
077   	ADD    EAX,ESI
079   	MOV    ESI,[ESP + #24]
07d   	MOV    ESI,[ESI + #8]
080   	NullCheck ESI
080
080   B8: #	B27 B9 <- B7  Freq: 8664.4
080   	CMPu   EAX,ESI
082   	Jge,u  B27  P=0.000001 C=-1.000000
082
088   B9: #	B11 B10 <- B8  Freq: 8664.39
088   	SHL    EBP,#3
08b   	ADD    EBP,EDX
08d   	MOVSD  XMM0a,[ESP + #8]
093   	MOV    EAX,[ESP + #24]
097   	MULSD  XMM0a,[EAX + #16 + EBP]
09d   	INC    EBX
09e   	CMP    EBX,EDI
0a0   	Jge,s  B11  P=0.000976 C=11275.000000
0a0
0a2   B10: #	B5 <- B9  Freq: 8655.94
0a2   	MOVSD  [ESP + #8],XMM0a
0a8   	MOV    EBP,[ESP + #4]
0ac   	MOV    ESI,[ESP + #16]
0b0   	MOV    EAX,[ESP + #20]
0b4   	JMP,s  B5
0b4
0b6   B11: #	B17 B12 <- B9  Freq: 8.45306
0b6   	MOV    EDI,EAX
0b8   	ADD    EDI,EDX
0ba   	MOV    EBP,#1000
0bf   	SUB    EBP,EBX
0c1   	AND    EBP,#-4
0c4   	ADD    EBP,EBX
0c6   	MOV    [ESP + #8],EBP
0ca   	CMP    EBX,EBP
0cc   	Jge    B17  P=0.500000 C=-1.000000
0cc
0d2   B12: #	B26 B13 <- B11 B16 	Loop: B12-B16 inner stride: not constant main of N118 Freq: 4314.29
0d2   	MOV    EBP,EBX
0d4   	IMUL   EBP,ECX
0d7   	MOV    EAX,EBP
0d9   	ADD    EAX,[ESP + #16]
0dd   	CMPu   EAX,ESI
0df   	Jge,u  B26  P=0.000001 C=-1.000000
0df
0e5   B13: #	B28 B14 <- B12  Freq: 4314.29
0e5   	MULSD  XMM0a,[EDI + #16 + EBP << #3]
0eb   	MOV    EDX,EBX
0ed   	INC    EDX
0ee   	MOV    EBP,EDX
0f0   	IMUL   EBP,ECX
0f3   	MOV    EAX,EBP
0f5   	ADD    EAX,[ESP + #16]
0f9   	CMPu   EAX,ESI
0fb   	Jge,u  B28  P=0.000001 C=-1.000000
0fb
101   B14: #	B28 B15 <- B13  Freq: 4314.28
101   	MULSD  XMM0a,[EDI + #16 + EBP << #3]
107   	MOV    EDX,EBX
109   	ADD    EDX,#2
10c   	MOV    EBP,EDX
10e   	IMUL   EBP,ECX
111   	MOV    EAX,EBP
113   	ADD    EAX,[ESP + #16]
117   	CMPu   EAX,ESI
119   	Jge,u  B28  P=0.000001 C=-1.000000
119
11f   B15: #	B28 B16 <- B14  Freq: 4314.28
11f   	MULSD  XMM0a,[EDI + #16 + EBP << #3]
125   	MOV    EDX,EBX
127   	ADD    EDX,#3
12a   	MOV    EBP,EDX
12c   	IMUL   EBP,ECX
12f   	MOV    EAX,EBP
131   	ADD    EAX,[ESP + #16]
135   	CMPu   EAX,ESI
137   	Jge,u  B28  P=0.000001 C=-1.000000
137
13d   B16: #	B12 B17 <- B15  Freq: 4314.27
13d   	MULSD  XMM0a,[EDI + #16 + EBP << #3]
143   	ADD    EBX,#4
146   	CMP    EBX,[ESP + #8]
14a   	Jlt,s  B12  P=0.999024 C=11275.000000
14a
14c   B17: #	B20 B18 <- B11 B16  Freq: 8.43557
14c   	CMP    EBX,#1000
152   	Jge,s  B20  P=0.500000 C=-1.000000
152
154   B18: #	B25 B19 <- B17 B19 	Loop: B18-B19 inner stride: not constant post of N237 Freq: 4318.75
154   	MOV    EDX,EBX
156   	IMUL   EDX,ECX
159   	MOV    EAX,EDX
15b   	ADD    EAX,[ESP + #16]
15f   	CMPu   EAX,ESI
161   	Jge,us B25  P=0.000001 C=-1.000000
161
163   B19: #	B18 B20 <- B18  Freq: 4318.75
163   	MULSD  XMM0a,[EDI + #16 + EDX << #3]
169   	INC    EBX
16a   	CMP    EBX,#1000
170   	Jlt,s  B18  P=0.999024 C=11275.000000
170
172   B20: #	B22 B21 <- B19 B17  Freq: 8.4312
172   	MOV    ESI,[ESP + #16]
176   	INC    ESI
177   	CMP    ESI,#1000
17d   	Jge,s  B22  P=0.100000 C=-1.000000
17d
17f   B21: #	B4 <- B20  Freq: 7.58808
17f   	XOR    EBX,EBX
181   	MOVSD  [ESP + #8],XMM0a
187   	MOV    EBP,[ESP + #4]
18b   	MOV    EAX,[ESP + #20]
18f   	JMP    B4
18f
194   B22: #	N403 <- B20  Freq: 0.84312
194   	ADD    ESP,72	# Destroy frame
	POPL   EBP
	TEST   PollPage,EAX	! Poll Safepoint
	
19e   	RET
19e
19f   B23: #	N403 <- B2  Freq: 1e-006
19f   	MOV    ECX,#-75
1a4   	MOV    [ESP + #4],ESI
1a8   	MOV    [ESP + #16],EBX
1ac   	NOP 	# 3 bytes pad for loops and calls
1af   	CALL,static  wrapper for: uncommon_trap(reason='unreached' action='reinterpret')
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:13  L[0]=EBP L[1]=esp + #8 L[2]=_ L[3]=esp + #4 L[4]=esp + #16
        # AllocatedObj(0x0409e9f4)

1b4   	INT3   ; ShouldNotReachHere
1b4
1b5   B24: #	B4 <- B1  Freq: 0.000999987
1b5   	MOV    EBP,NULL
1ba   	MOV    EAX,NULL+8
1bf   	JMP    B4
1bf
1c4   B25: #	B29 <- B18  Freq: 1e-006
1c4   	MOVSD  [ESP + #8],XMM0a
1ca   	JMP,s  B29
1ca
1cc   B26: #	B28 <- B12  Freq: 1e-006
1cc   	MOV    EDX,EBX
1ce   	JMP,s  B28
1ce
1d0   B27: #	B28 <- B8  Freq: 1e-006
1d0   	MOV    EDX,EBX
1d2   	MOVSD  XMM0a,[ESP + #8]
1d2
1d8   B28: #	B29 <- B27 B26 B14 B13 B15  Freq: 1e-006
1d8   	MOVSD  [ESP + #8],XMM0a
1de   	MOV    EBX,EDX
1de
1e0   B29: #	N403 <- B25 B28  Freq: 1e-006
1e0   	MOV    ECX,#-28
1e5   	MOV    EBP,[ESP + #4]
1e9   	PUSH   [ESP + #16]
	POP    [ESP + #4]
1f1   	MOV    [ESP + #16],EBX
1f5   	PUSH   [ESP + #24]
	POP    [ESP + #20]
1fd   	MOV    [ESP + #24],EAX
201   	NOP 	# 2 bytes pad for loops and calls
203   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::get @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=esp + #20 STK[1]=esp + #24
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:21  L[0]=EBP L[1]=_ L[2]=_ L[3]=esp + #4 L[4]=esp + #16 STK[0]=esp + #8 STK[1]=_
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

208   	INT3   ; ShouldNotReachHere
208
209   B30: #	N403 <- B7  Freq: 1e-006
209   	MOV    ECX,#-10
20e   	MOV    EBP,[ESP + #24]
212   	MOV    [ESP + #4],EAX
216   	NOP 	# 1 bytes pad for loops and calls
217   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::get @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=EBP STK[1]=esp + #4
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:21  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_
        # AllocatedObj(0x0409e9f4)

21c   	INT3   ; ShouldNotReachHere
21c
21d   B31: #	N403 <- B6  Freq: 1e-006
21d   	MOV    ECX,#-10
222   	MOV    [ESP + #4],ESI
226   	MOV    [ESP + #8],EBX
22a   	NOP 	# 1 bytes pad for loops and calls
22b   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:21  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=EBP STK[3]=esp + #4 STK[4]=esp + #8
        # AllocatedObj(0x0409e9f4)

230   	INT3   ; ShouldNotReachHere
230
231   B32: #	N403 <- B5  Freq: 1e-006
231   	MOV    ECX,#-10
236   	NOP 	# 1 bytes pad for loops and calls
237   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:15  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=EBP
        # AllocatedObj(0x0409e9f4)

23c   	INT3   ; ShouldNotReachHere
23c

{method} 
 - klass: {other class}
 - method holder:     'ch/akuhn/matrix/PerformanceTest'
 - constants:         0x084e7fd4{constant pool}
 - access:            0xc1000002  private 
 - name:              'opto'
 - signature:         '()D'
 - max stack:         5
 - max locals:        5
 - size of params:    1
 - method size:       20
 - vtable index:      6
 - code size:         49
 - code start:        0x291f01b8
 - code end (excl):   0x291f01e9
 - method data:       0x29237220
 - checked ex length: 0
 - linenumber start:  0x291f01e9
 - localvar length:   4
 - localvar start:    0x291f01fe
#
#  double/half ( ch/akuhn/matrix/PerformanceTest:NotNull * )
#
#r000 ecx   : parm 0: ch/akuhn/matrix/PerformanceTest:NotNull *
# -- Old esp -- Framesize: 80 --
#r045 esp+76: return address
#r044 esp+72: pad2, in_preserve
#r043 esp+68: pad2, in_preserve
#r042 esp+64: Fixed slot 0
#r061 esp+60: spill
#r060 esp+56: spill
#r059 esp+52: spill
#r058 esp+48: spill
#r057 esp+44: spill
#r056 esp+40: spill
#r055 esp+36: spill
#r054 esp+32: spill
#r053 esp+28: spill
#r052 esp+24: spill
#r051 esp+20: spill
#r050 esp+16: spill
#r049 esp+12: spill
#r048 esp+ 8: spill
#r047 esp+ 4: spill
#r046 esp+ 0: spill
#
000   N341: #	B1 <- BLOCK HEAD IS JUNK   Freq: 96
000   	CMP    EAX,[ECX+4]	# Inline cache check
	JNE    SharedRuntime::handle_ic_miss_stub
	NOP
	NOP
	NOP

000
00c   B1: #	B2 <- BLOCK HEAD IS JUNK   Freq: 96
00c   	# stack bang
	PUSHL  EBP
	SUB    ESP,72	# Create frame
01a   	MOV    EBX,ECX
01c   	MOV    EDI,[ECX + #8] ! Field ch/akuhn/matrix/PerformanceTest.a
01f   	XORPD  XMM0a,XMM0a	# double 0.0
023   	XOR    ECX,ECX
025   	XOR    ESI,ESI
027
027   B2: #	B3 <- B1 B18 	Loop: B2-B18 stride: not constant  Freq: 14682.4
027   	XOR    EAX,EAX
      	NOP 	# 3 bytes pad for loops and calls

02c   B3: #	B26 B4 <- B2 B7 	Loop: B3-B7 inner stride: not constant pre of N214 Freq: 1.46529e+007
02c   	MOV    EBP,[EDI + #12] ! Field ch/akuhn/matrix/OneDimensional.a
02f   	NullCheck EDI
02f
02f   B4: #	B25 B5 <- B3  Freq: 1.46529e+007
02f   	MOV    [ESP + #12],EBP
033   	MOV    [ESP + #8],ESI
037   	MOV    [ESP + #20],EBX
03b   	MOV    EBP,[EDI + #8] ! Field ch/akuhn/matrix/OneDimensional.lda
03e   	MOV    [ESP + #0],EDI
041   	MOV    EDX,EAX
043   	IMUL   EDX,EBP
046   	MOV    EDI,EDX
048   	ADD    EDI,ESI
04a   	MOV    EBX,[ESP + #12]
04e   	MOV    EBX,[EBX + #8]
051   	NullCheck EBX
051
051   B5: #	B22 B6 <- B4  Freq: 1.46529e+007
051   	CMPu   EDI,EBX
053   	Jge,u  B22  P=0.000001 C=-1.000000
053
059   B6: #	B8 B7 <- B5  Freq: 1.46529e+007
059   	SHL    EDX,#3
05c   	ADD    EDX,ECX
05e   	MOV    EDI,[ESP + #12]
062   	MULSD  XMM0a,[EDI + #16 + EDX]
068   	INC    EAX
069   	CMP    EAX,#1
06c   	Jge,s  B8  P=0.000999 C=94775768.000000
06c
06e   B7: #	B3 <- B6  Freq: 1.46382e+007
06e   	MOV    EBX,[ESP + #20]
072   	MOV    EDI,[ESP + #0]
075   	JMP,s  B3
075
077   B8: #	B14 B9 <- B6  Freq: 14637.8
077   	MOV    ESI,EDI
079   	ADD    ESI,ECX
07b   	MOV    ECX,#1000
080   	SUB    ECX,EAX
082   	AND    ECX,#-4
085   	ADD    ECX,EAX
087   	MOV    [ESP + #4],ECX
08b   	CMP    EAX,ECX
08d   	Jge    B14  P=0.500000 C=-1.000000
08d
093   B9: #	B21 B10 <- B8 B13 	Loop: B9-B13 inner stride: not constant main of N79 Freq: 7.29686e+006
093   	MOV    ECX,EAX
095   	IMUL   ECX,EBP
098   	MOV    EDI,ECX
09a   	ADD    EDI,[ESP + #8]
09e   	CMPu   EDI,EBX
0a0   	Jge,u  B21  P=0.000001 C=-1.000000
0a0
0a6   B10: #	B23 B11 <- B9  Freq: 7.29685e+006
0a6   	MULSD  XMM0a,[ESI + #16 + ECX << #3]
0ac   	MOV    EDX,EAX
0ae   	INC    EDX
0af   	MOV    ECX,EDX
0b1   	IMUL   ECX,EBP
0b4   	MOV    EDI,ECX
0b6   	ADD    EDI,[ESP + #8]
0ba   	CMPu   EDI,EBX
0bc   	Jge,u  B23  P=0.000001 C=-1.000000
0bc
0c2   B11: #	B23 B12 <- B10  Freq: 7.29684e+006
0c2   	MULSD  XMM0a,[ESI + #16 + ECX << #3]
0c8   	MOV    EDX,EAX
0ca   	ADD    EDX,#2
0cd   	MOV    ECX,EDX
0cf   	IMUL   ECX,EBP
0d2   	MOV    EDI,ECX
0d4   	ADD    EDI,[ESP + #8]
0d8   	CMPu   EDI,EBX
0da   	Jge,u  B23  P=0.000001 C=-1.000000
0da
0e0   B12: #	B23 B13 <- B11  Freq: 7.29683e+006
0e0   	MULSD  XMM0a,[ESI + #16 + ECX << #3]
0e6   	MOV    EDX,EAX
0e8   	ADD    EDX,#3
0eb   	MOV    ECX,EDX
0ed   	IMUL   ECX,EBP
0f0   	MOV    EDI,ECX
0f2   	ADD    EDI,[ESP + #8]
0f6   	CMPu   EDI,EBX
0f8   	Jge,u  B23  P=0.000001 C=-1.000000
0f8
0fe   B13: #	B9 B14 <- B12  Freq: 7.29683e+006
0fe   	MULSD  XMM0a,[ESI + #16 + ECX << #3]
104   	ADD    EAX,#4
107   	CMP    EAX,[ESP + #4]
10b   	Jlt,s  B9  P=0.999001 C=94775768.000000
10b
10d   B14: #	B17 B15 <- B8 B13  Freq: 14608.3
10d   	CMP    EAX,#1000
113   	Jge,s  B17  P=0.500000 C=-1.000000
      	NOP 	# 3 bytes pad for loops and calls

118   B15: #	B20 B16 <- B14 B16 	Loop: B15-B16 inner stride: not constant post of N214 Freq: 7.30423e+006
118   	MOV    EDX,EAX
11a   	IMUL   EDX,EBP
11d   	MOV    EDI,EDX
11f   	ADD    EDI,[ESP + #8]
123   	CMPu   EDI,EBX
125   	Jge,us B20  P=0.000001 C=-1.000000
125
127   B16: #	B15 B17 <- B15  Freq: 7.30422e+006
127   	MULSD  XMM0a,[ESI + #16 + EDX << #3]
12d   	INC    EAX
12e   	CMP    EAX,#1000
134   	Jlt,s  B15  P=0.999001 C=94775768.000000
134
136   B17: #	B19 B18 <- B16 B14  Freq: 14600.8
136   	MOV    ESI,[ESP + #8]
13a   	INC    ESI
13b   	CMP    ESI,#1000
141   	Jge,s  B19  P=0.000992 C=94775.000000
141
143   B18: #	B2 <- B17  Freq: 14586.4
143   	MOV    EBX,[ESP + #8]
147   	SHL    EBX,#3
14a   	MOV    ECX,EBX
14c   	ADD    ECX,#8
14f   	MOV    EBX,[ESP + #20]
153   	MOV    EDI,[ESP + #0]
156   	JMP    B2
156
15b   B19: #	N341 <- B17  Freq: 14.4814
15b   	ADD    ESP,72	# Destroy frame
	POPL   EBP
	TEST   PollPage,EAX	! Poll Safepoint
	
165   	RET
165
166   B20: #	B24 <- B15  Freq: 1e-006
166   	MOVSD  [ESP + #0],XMM0a
16b   	JMP,s  B24
16b
16d   B21: #	B23 <- B9  Freq: 1e-006
16d   	MOV    EDX,EAX
16f   	JMP,s  B23
16f
171   B22: #	B23 <- B5  Freq: 1e-006
171   	MOV    EDX,EAX
171
173   B23: #	B24 <- B22 B21 B11 B10 B12  Freq: 1e-006
173   	MOVSD  [ESP + #0],XMM0a
178   	MOV    EAX,EDX
178
17a   B24: #	N341 <- B20 B23  Freq: 1e-006
17a   	MOV    ECX,#-28
17f   	MOV    EBP,[ESP + #8]
183   	MOV    [ESP + #8],EAX
187   	MOV    [ESP + #16],EDI
18b   	CALL,static  wrapper for: uncommon_trap(reason='range_check' action='make_not_entrant')
        # ch.akuhn.matrix.OneDimensional::get @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=esp + #12 STK[1]=esp + #16
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:21  L[0]=esp + #20 L[1]=_ L[2]=_ L[3]=EBP L[4]=esp + #8 STK[0]=esp + #0 STK[1]=_
        # AllocatedObj(0x0409e9f4)
AllocatedObj(0x0409e9f4)

190   	INT3   ; ShouldNotReachHere
190
191   B25: #	N341 <- B4  Freq: 1e-006
191   	MOV    ECX,#-10
196   	MOV    EBP,[ESP + #12]
19a   	MOV    [ESP + #0],EDI
19d   	NOP 	# 2 bytes pad for loops and calls
19f   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.OneDimensional::get @ bci:12  L[0]=_ L[1]=_ L[2]=_ STK[0]=EBP STK[1]=esp + #0
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:21  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_
        # AllocatedObj(0x0409e9f4)

1a4   	INT3   ; ShouldNotReachHere
1a4
1a5   B26: #	N341 <- B3  Freq: 1e-006
1a5   	MOV    ECX,#-10
1aa   	MOV    EBP,EDI
1ac   	MOV    [ESP + #0],ESI
1af   	MOV    [ESP + #4],EAX
1b3   	CALL,static  wrapper for: uncommon_trap(reason='null_check' action='maybe_recompile')
        # ch.akuhn.matrix.PerformanceTest::opto @ bci:21  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ STK[0]=_ STK[1]=_ STK[2]=EBP STK[3]=esp + #0 STK[4]=esp + #4
        # AllocatedObj(0x0409e9f4)

1b8   	INT3   ; ShouldNotReachHere
1b8

	(0) 7.096582918
0.0

%h{
  #include <gdk/gdk.h>
%}

%{
  #include <gtk/gtk.h>
  #if GTK_CHECK_VERSION(2,8,0)
  static cairo_surface_t *ref_cairo_surface(GdkDrawable *self);
  #endif
%}

/* Transfers logical drawing commands to a physical (screen) device */
/* The default renderer just passes everything through to GDK */
/* Since GGobi is an interactive graphics platform, the renderer design
   is biased towards screen devices. This doesn't preclude, however, 
   off-screen devices that take "snapshots" of GGobi plots */
class GGobi:Renderer from Gdk:Drawable
{
  /* everything passes through to this drawable by default */
  private GdkDrawable *buffer unrefwith g_object_unref;
  
  /* buffer should be flushed to this drawable */
  private GdkDrawable *parent unrefwith g_object_unref;
  property OBJECT parent
  (nick = "out", blurb = "The drawable to which this renderer is flushed",
   object_type = Gdk:Drawable, flags = CONSTRUCT_ONLY)
   set {
     GObject *obj = g_value_dup_object(VAL);
     if (selfp->parent)
       g_object_unref(G_OBJECT(selfp->parent));
     selfp->parent = GDK_DRAWABLE(obj);
     if (selfp->buffer)
       g_object_unref(G_OBJECT(selfp->buffer));
     selfp->buffer = self_create_target(self, selfp->parent);
   } get {
     g_value_set_object(VAL, selfp->parent);
   };
  
  /* if you already have a special GdkDrawable, and want to make it into a 
     GGobiRenderer, just override this to provide it */
  private virtual GdkDrawable *
  create_target(self, GdkDrawable *parent)
  {
    gint width, height;
    gdk_drawable_get_size(parent, &width, &height);
    return gdk_pixmap_new(parent, width, height, -1);
  }
  
  /* buffers are created by cloning (prototype approach) */
  public virtual GGobiRenderer *
  buffer(self)
  {
    GObject *obj = g_object_new(G_OBJECT_TYPE(self), "parent", self, NULL);
    return GGOBI_RENDERER(obj);
  }
  
  public virtual void
  flush(self, GdkGC *gc, gint xsrc, gint ysrc, gint xdest, gint ydest, 
    gint width, gint height)
  {
    gdk_draw_drawable(selfp->parent, gc, selfp->buffer, xsrc, ysrc, xdest, ydest, 
      width, height);
  }

  /* pass everything through to underlying drawable */
  
  override (Gdk:Drawable) void 
  draw_rectangle (GdkDrawable  *self, GdkGC *gc, gboolean filled,
    gint x, gint y, gint width, gint height)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_rectangle(
      SELF(self)->_priv->buffer, gc, filled, x, y, width, height);
  }
  override (Gdk:Drawable) void 
  draw_arc(GdkDrawable  *self, GdkGC *gc, gboolean filled, gint x, gint y, 
    gint width, gint height, gint angle1, gint angle2)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_arc(
      SELF(self)->_priv->buffer, gc, filled, x, y, width, height, angle1, angle2);
  }
  override (Gdk:Drawable) void 
  draw_polygon(GdkDrawable  *self, GdkGC *gc, gboolean filled, 
    GdkPoint *points, gint npoints)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_polygon(
      SELF(self)->_priv->buffer, gc, filled, points, npoints);
  }
  override (Gdk:Drawable) void 
  draw_points(GdkDrawable  *self, GdkGC *gc, GdkPoint *points, gint npoints)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_points(
      SELF(self)->_priv->buffer, gc, points, npoints);
  }
  override (Gdk:Drawable) void 
  draw_segments(GdkDrawable  *self, GdkGC *gc, GdkSegment *segs, gint nsegs)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_segments(
      SELF(self)->_priv->buffer, gc, segs, nsegs);
  }
  override (Gdk:Drawable) void 
  draw_lines(GdkDrawable  *self, GdkGC *gc, GdkPoint *points, gint npoints)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_lines(
      SELF(self)->_priv->buffer, gc, points, npoints);
  }
  override (Gdk:Drawable) void 
  draw_trapezoids(GdkDrawable *self, GdkGC *gc, GdkTrapezoid *trapezoids, 
    gint n_trapezoids)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_trapezoids(
      SELF(self)->_priv->buffer, gc, trapezoids, n_trapezoids);
  }
  
  override (Gdk:Drawable) void 
  draw_text(GdkDrawable  *self, GdkFont *font, GdkGC *gc, gint x, gint y, 
    const gchar  *text, gint text_length)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_text(
      SELF(self)->_priv->buffer, font, gc, x, y, text, text_length);
  }
  override (Gdk:Drawable) void 
  draw_text_wc(GdkDrawable *self, GdkFont *font, GdkGC *gc, gint x, gint y, 
    const GdkWChar *text, gint text_length)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_text_wc(
      SELF(self)->_priv->buffer, font, gc, x, y, text, text_length);
  }
  override (Gdk:Drawable) void 
  draw_glyphs(GdkDrawable *self, GdkGC *gc, PangoFont *font, gint x, gint y, 
    PangoGlyphString *glyphs)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_glyphs(
      SELF(self)->_priv->buffer, gc, font, x, y, glyphs);
  }
  override (Gdk:Drawable) void 
  draw_glyphs_transformed(GdkDrawable *self, GdkGC *gc, PangoMatrix *matrix, 
    PangoFont *font, gint x, gint y, PangoGlyphString *glyphs)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_glyphs_transformed(
      SELF(self)->_priv->buffer, gc, matrix, font, x, y, glyphs);
  }
  
  override (Gdk:Drawable) GdkGC *
  create_gc(GdkDrawable *self, GdkGCValues *values, GdkGCValuesMask mask)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->create_gc(
      SELF(self)->_priv->buffer, values, mask);
  }
  override (Gdk:Drawable) void 
  draw_drawable(GdkDrawable  *self, GdkGC *gc, GdkDrawable  *src, gint xsrc, 
    gint ysrc, gint xdest, gint ydest, gint width, gint height)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_drawable(
      SELF(self)->_priv->buffer, gc, src, xsrc, ysrc, xdest, ydest, width, height);
  }
  override (Gdk:Drawable) void 
  draw_image(GdkDrawable *self, GdkGC *gc, GdkImage *image, gint xsrc, gint ysrc, 
    gint xdest, gint ydest, gint width, gint height)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_image(
      SELF(self)->_priv->buffer, gc, image, xsrc, ysrc, xdest, ydest, width, height);
  }

  override (Gdk:Drawable) gint 
  get_depth(GdkDrawable  *self)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_depth(
      SELF(self)->_priv->buffer);
  }
  override (Gdk:Drawable) void 
  get_size(GdkDrawable  *self, gint *width, gint *height)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_size(
      SELF(self)->_priv->buffer, width, height);
  }
  
  override (Gdk:Drawable) void 
  set_colormap(GdkDrawable  *self, GdkColormap  *cmap)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->set_colormap(
      SELF(self)->_priv->buffer, cmap);
  }
  override (Gdk:Drawable) GdkColormap* 
  get_colormap(GdkDrawable  *self)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_colormap(
      SELF(self)->_priv->buffer);
  }
  override (Gdk:Drawable) GdkVisual* 
  get_visual(GdkDrawable  *self)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_visual(
      SELF(self)->_priv->buffer);
  }
  override (Gdk:Drawable) GdkScreen* 
  get_screen(GdkDrawable  *self)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_screen(
      SELF(self)->_priv->buffer);
  }
  override (Gdk:Drawable) GdkImage* 
  get_image(GdkDrawable  *self, gint x, gint y, gint width, gint height)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_image(
      SELF(self)->_priv->buffer, x, y, width, height);
  }
  override (Gdk:Drawable) GdkRegion* 
  get_clip_region(GdkDrawable  *self)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_clip_region(
      SELF(self)->_priv->buffer);
  }
  override (Gdk:Drawable) GdkRegion* 
  get_visible_region(GdkDrawable  *self)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_visible_region(
      SELF(self)->_priv->buffer);
  }
  override (Gdk:Drawable) GdkDrawable* 
  get_composite_drawable(GdkDrawable *self, gint x, gint y, gint width, 
    gint height, gint *composite_x_offset, gint *composite_y_offset)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->get_composite_drawable(
      SELF(self)->_priv->buffer, x, y, width, height, composite_x_offset, composite_y_offset);
  }
  
  override (Gdk:Drawable) void 
  draw_pixbuf(GdkDrawable *self, GdkGC *gc, GdkPixbuf *pixbuf, gint src_x, 
    gint src_y, gint dest_x, gint dest_y, gint width, gint height, 
    GdkRgbDither dither, gint x_dither, gint y_dither)
  {
    GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->draw_pixbuf(
      SELF(self)->_priv->buffer, gc, pixbuf, src_x, src_y, dest_x, dest_y, 
      width, height, dither, x_dither, y_dither);
  }
  override (Gdk:Drawable) GdkImage* 
  _copy_to_image(GdkDrawable *self, GdkImage *image, gint src_x, gint src_y,
    gint dest_x, gint dest_y, gint width, gint height)
  {
    return GDK_DRAWABLE_GET_CLASS(SELF(self)->_priv->buffer)->_copy_to_image(
      SELF(self)->_priv->buffer, image, src_x, src_y, dest_x, dest_y, width, height);
  }
  
  class_init(self_class) { /* need to do this one manually, to avoid GTK+ 2.8.x dep */
    #if GTK_CHECK_VERSION(2,8,0)
    GDK_DRAWABLE_CLASS(self_class)->ref_cairo_surface = ref_cairo_surface;
    #endif
  }
}

%{
  #if GTK_CHECK_VERSION(2,8,0)
  static cairo_surface_t *
  ref_cairo_surface(GdkDrawable *self)
  {
    return GDK_DRAWABLE_GET_CLASS(GGOBI_RENDERER(self)->_priv->buffer)->ref_cairo_surface(
      GGOBI_RENDERER(self)->_priv->buffer);
  }
  #endif
%}
